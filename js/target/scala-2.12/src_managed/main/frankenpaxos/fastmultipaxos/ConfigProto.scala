// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.fastmultipaxos

@SerialVersionUID(0L)
final case class ConfigProto(
    f: _root_.scala.Int,
    leaderAddress: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    leaderElectionAddress: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    leaderHeartbeatAddress: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    acceptorAddress: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    acceptorHeartbeatAddress: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    roundSystemType: frankenpaxos.fastmultipaxos.RoundSystemType
    ) extends scalapb.GeneratedMessage with scalapb.Message[ConfigProto] with scalapb.lenses.Updatable[ConfigProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, f)
      leaderAddress.foreach(leaderAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leaderAddress.serializedSize) + leaderAddress.serializedSize)
      leaderElectionAddress.foreach(leaderElectionAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leaderElectionAddress.serializedSize) + leaderElectionAddress.serializedSize)
      leaderHeartbeatAddress.foreach(leaderHeartbeatAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leaderHeartbeatAddress.serializedSize) + leaderHeartbeatAddress.serializedSize)
      acceptorAddress.foreach(acceptorAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(acceptorAddress.serializedSize) + acceptorAddress.serializedSize)
      acceptorHeartbeatAddress.foreach(acceptorHeartbeatAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(acceptorHeartbeatAddress.serializedSize) + acceptorHeartbeatAddress.serializedSize)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, roundSystemType.value)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, f)
      leaderAddress.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      leaderElectionAddress.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      leaderHeartbeatAddress.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      acceptorAddress.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      acceptorHeartbeatAddress.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      _output__.writeEnum(7, roundSystemType.value)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.fastmultipaxos.ConfigProto = {
      var __f = this.f
      val __leaderAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.HostPortProto] ++= this.leaderAddress)
      val __leaderElectionAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.HostPortProto] ++= this.leaderElectionAddress)
      val __leaderHeartbeatAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.HostPortProto] ++= this.leaderHeartbeatAddress)
      val __acceptorAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.HostPortProto] ++= this.acceptorAddress)
      val __acceptorHeartbeatAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.HostPortProto] ++= this.acceptorHeartbeatAddress)
      var __roundSystemType = this.roundSystemType
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __f = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __leaderAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.HostPortProto.defaultInstance)
          case 26 =>
            __leaderElectionAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.HostPortProto.defaultInstance)
          case 34 =>
            __leaderHeartbeatAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.HostPortProto.defaultInstance)
          case 42 =>
            __acceptorAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.HostPortProto.defaultInstance)
          case 50 =>
            __acceptorHeartbeatAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.HostPortProto.defaultInstance)
          case 56 =>
            __roundSystemType = frankenpaxos.fastmultipaxos.RoundSystemType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.fastmultipaxos.ConfigProto(
          f = __f,
          leaderAddress = __leaderAddress.result(),
          leaderElectionAddress = __leaderElectionAddress.result(),
          leaderHeartbeatAddress = __leaderHeartbeatAddress.result(),
          acceptorAddress = __acceptorAddress.result(),
          acceptorHeartbeatAddress = __acceptorHeartbeatAddress.result(),
          roundSystemType = __roundSystemType
      )
    }
    def withF(__v: _root_.scala.Int): ConfigProto = copy(f = __v)
    def clearLeaderAddress = copy(leaderAddress = _root_.scala.collection.Seq.empty)
    def addLeaderAddress(__vs: frankenpaxos.fastmultipaxos.HostPortProto*): ConfigProto = addAllLeaderAddress(__vs)
    def addAllLeaderAddress(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderAddress = leaderAddress ++ __vs)
    def withLeaderAddress(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderAddress = __v)
    def clearLeaderElectionAddress = copy(leaderElectionAddress = _root_.scala.collection.Seq.empty)
    def addLeaderElectionAddress(__vs: frankenpaxos.fastmultipaxos.HostPortProto*): ConfigProto = addAllLeaderElectionAddress(__vs)
    def addAllLeaderElectionAddress(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderElectionAddress = leaderElectionAddress ++ __vs)
    def withLeaderElectionAddress(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderElectionAddress = __v)
    def clearLeaderHeartbeatAddress = copy(leaderHeartbeatAddress = _root_.scala.collection.Seq.empty)
    def addLeaderHeartbeatAddress(__vs: frankenpaxos.fastmultipaxos.HostPortProto*): ConfigProto = addAllLeaderHeartbeatAddress(__vs)
    def addAllLeaderHeartbeatAddress(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderHeartbeatAddress = leaderHeartbeatAddress ++ __vs)
    def withLeaderHeartbeatAddress(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(leaderHeartbeatAddress = __v)
    def clearAcceptorAddress = copy(acceptorAddress = _root_.scala.collection.Seq.empty)
    def addAcceptorAddress(__vs: frankenpaxos.fastmultipaxos.HostPortProto*): ConfigProto = addAllAcceptorAddress(__vs)
    def addAllAcceptorAddress(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(acceptorAddress = acceptorAddress ++ __vs)
    def withAcceptorAddress(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(acceptorAddress = __v)
    def clearAcceptorHeartbeatAddress = copy(acceptorHeartbeatAddress = _root_.scala.collection.Seq.empty)
    def addAcceptorHeartbeatAddress(__vs: frankenpaxos.fastmultipaxos.HostPortProto*): ConfigProto = addAllAcceptorHeartbeatAddress(__vs)
    def addAllAcceptorHeartbeatAddress(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(acceptorHeartbeatAddress = acceptorHeartbeatAddress ++ __vs)
    def withAcceptorHeartbeatAddress(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]): ConfigProto = copy(acceptorHeartbeatAddress = __v)
    def withRoundSystemType(__v: frankenpaxos.fastmultipaxos.RoundSystemType): ConfigProto = copy(roundSystemType = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => f
        case 2 => leaderAddress
        case 3 => leaderElectionAddress
        case 4 => leaderHeartbeatAddress
        case 5 => acceptorAddress
        case 6 => acceptorHeartbeatAddress
        case 7 => roundSystemType.javaValueDescriptor
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(f)
        case 2 => _root_.scalapb.descriptors.PRepeated(leaderAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(leaderElectionAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(leaderHeartbeatAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(acceptorAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(acceptorHeartbeatAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PEnum(roundSystemType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.fastmultipaxos.ConfigProto
}

object ConfigProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.fastmultipaxos.ConfigProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.fastmultipaxos.ConfigProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.fastmultipaxos.ConfigProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.fastmultipaxos.ConfigProto(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]],
      frankenpaxos.fastmultipaxos.RoundSystemType.fromValue(__fieldsMap(__fields.get(6)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.fastmultipaxos.ConfigProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.fastmultipaxos.ConfigProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        frankenpaxos.fastmultipaxos.RoundSystemType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConfigProtoCompanion.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConfigProtoCompanion.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.fastmultipaxos.HostPortProto
      case 3 => __out = frankenpaxos.fastmultipaxos.HostPortProto
      case 4 => __out = frankenpaxos.fastmultipaxos.HostPortProto
      case 5 => __out = frankenpaxos.fastmultipaxos.HostPortProto
      case 6 => __out = frankenpaxos.fastmultipaxos.HostPortProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => frankenpaxos.fastmultipaxos.RoundSystemType
    }
  }
  lazy val defaultInstance = frankenpaxos.fastmultipaxos.ConfigProto(
    f = 0,
    roundSystemType = frankenpaxos.fastmultipaxos.RoundSystemType.CLASSIC_ROUND_ROBIN
  )
  implicit class ConfigProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fastmultipaxos.ConfigProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.fastmultipaxos.ConfigProto](_l) {
    def f: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.f)((c_, f_) => c_.copy(f = f_))
    def leaderAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]] = field(_.leaderAddress)((c_, f_) => c_.copy(leaderAddress = f_))
    def leaderElectionAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]] = field(_.leaderElectionAddress)((c_, f_) => c_.copy(leaderElectionAddress = f_))
    def leaderHeartbeatAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]] = field(_.leaderHeartbeatAddress)((c_, f_) => c_.copy(leaderHeartbeatAddress = f_))
    def acceptorAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]] = field(_.acceptorAddress)((c_, f_) => c_.copy(acceptorAddress = f_))
    def acceptorHeartbeatAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.HostPortProto]] = field(_.acceptorHeartbeatAddress)((c_, f_) => c_.copy(acceptorHeartbeatAddress = f_))
    def roundSystemType: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fastmultipaxos.RoundSystemType] = field(_.roundSystemType)((c_, f_) => c_.copy(roundSystemType = f_))
  }
  final val F_FIELD_NUMBER = 1
  final val LEADERADDRESS_FIELD_NUMBER = 2
  final val LEADERELECTIONADDRESS_FIELD_NUMBER = 3
  final val LEADERHEARTBEATADDRESS_FIELD_NUMBER = 4
  final val ACCEPTORADDRESS_FIELD_NUMBER = 5
  final val ACCEPTORHEARTBEATADDRESS_FIELD_NUMBER = 6
  final val ROUNDSYSTEMTYPE_FIELD_NUMBER = 7
}
