// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.fastmultipaxos

@SerialVersionUID(0L)
final case class Phase1b(
    acceptorId: _root_.scala.Int,
    round: _root_.scala.Int,
    vote: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.Phase1bVote] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phase1b] with scalapb.lenses.Updatable[Phase1b] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, acceptorId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, round)
      vote.foreach(vote => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(vote.serializedSize) + vote.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, acceptorId)
      _output__.writeInt32(2, round)
      vote.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.fastmultipaxos.Phase1b = {
      var __acceptorId = this.acceptorId
      var __round = this.round
      val __vote = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.fastmultipaxos.Phase1bVote] ++= this.vote)
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __acceptorId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __round = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __vote += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.fastmultipaxos.Phase1bVote.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.fastmultipaxos.Phase1b(
          acceptorId = __acceptorId,
          round = __round,
          vote = __vote.result()
      )
    }
    def withAcceptorId(__v: _root_.scala.Int): Phase1b = copy(acceptorId = __v)
    def withRound(__v: _root_.scala.Int): Phase1b = copy(round = __v)
    def clearVote = copy(vote = _root_.scala.collection.Seq.empty)
    def addVote(__vs: frankenpaxos.fastmultipaxos.Phase1bVote*): Phase1b = addAllVote(__vs)
    def addAllVote(__vs: TraversableOnce[frankenpaxos.fastmultipaxos.Phase1bVote]): Phase1b = copy(vote = vote ++ __vs)
    def withVote(__v: _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.Phase1bVote]): Phase1b = copy(vote = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => acceptorId
        case 2 => round
        case 3 => vote
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(acceptorId)
        case 2 => _root_.scalapb.descriptors.PInt(round)
        case 3 => _root_.scalapb.descriptors.PRepeated(vote.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.fastmultipaxos.Phase1b
}

object Phase1b extends scalapb.GeneratedMessageCompanion[frankenpaxos.fastmultipaxos.Phase1b] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.fastmultipaxos.Phase1b] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.fastmultipaxos.Phase1b = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.fastmultipaxos.Phase1b(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.Phase1bVote]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.fastmultipaxos.Phase1b] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.fastmultipaxos.Phase1b(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.Phase1bVote]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FastMultiPaxosProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FastMultiPaxosProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = frankenpaxos.fastmultipaxos.Phase1bVote
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.fastmultipaxos.Phase1b(
    acceptorId = 0,
    round = 0
  )
  implicit class Phase1bLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fastmultipaxos.Phase1b]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.fastmultipaxos.Phase1b](_l) {
    def acceptorId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.acceptorId)((c_, f_) => c_.copy(acceptorId = f_))
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
    def vote: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.fastmultipaxos.Phase1bVote]] = field(_.vote)((c_, f_) => c_.copy(vote = f_))
  }
  final val ACCEPTOR_ID_FIELD_NUMBER = 1
  final val ROUND_FIELD_NUMBER = 2
  final val VOTE_FIELD_NUMBER = 3
}
