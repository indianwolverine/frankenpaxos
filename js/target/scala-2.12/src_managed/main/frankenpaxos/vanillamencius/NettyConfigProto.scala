// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.vanillamencius

@SerialVersionUID(0L)
final case class NettyConfigProto(
    f: _root_.scala.Int,
    serverAddress: _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto] = _root_.scala.collection.Seq.empty,
    heartbeatAddress: _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[NettyConfigProto] with scalapb.lenses.Updatable[NettyConfigProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, f)
      serverAddress.foreach(serverAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(serverAddress.serializedSize) + serverAddress.serializedSize)
      heartbeatAddress.foreach(heartbeatAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(heartbeatAddress.serializedSize) + heartbeatAddress.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, f)
      serverAddress.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      heartbeatAddress.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.vanillamencius.NettyConfigProto = {
      var __f = this.f
      val __serverAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.vanillamencius.HostPortProto] ++= this.serverAddress)
      val __heartbeatAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.vanillamencius.HostPortProto] ++= this.heartbeatAddress)
      var __requiredFields0: _root_.scala.Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __f = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __serverAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.vanillamencius.HostPortProto.defaultInstance)
          case 26 =>
            __heartbeatAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.vanillamencius.HostPortProto.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.vanillamencius.NettyConfigProto(
          f = __f,
          serverAddress = __serverAddress.result(),
          heartbeatAddress = __heartbeatAddress.result()
      )
    }
    def withF(__v: _root_.scala.Int): NettyConfigProto = copy(f = __v)
    def clearServerAddress = copy(serverAddress = _root_.scala.collection.Seq.empty)
    def addServerAddress(__vs: frankenpaxos.vanillamencius.HostPortProto*): NettyConfigProto = addAllServerAddress(__vs)
    def addAllServerAddress(__vs: TraversableOnce[frankenpaxos.vanillamencius.HostPortProto]): NettyConfigProto = copy(serverAddress = serverAddress ++ __vs)
    def withServerAddress(__v: _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]): NettyConfigProto = copy(serverAddress = __v)
    def clearHeartbeatAddress = copy(heartbeatAddress = _root_.scala.collection.Seq.empty)
    def addHeartbeatAddress(__vs: frankenpaxos.vanillamencius.HostPortProto*): NettyConfigProto = addAllHeartbeatAddress(__vs)
    def addAllHeartbeatAddress(__vs: TraversableOnce[frankenpaxos.vanillamencius.HostPortProto]): NettyConfigProto = copy(heartbeatAddress = heartbeatAddress ++ __vs)
    def withHeartbeatAddress(__v: _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]): NettyConfigProto = copy(heartbeatAddress = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => f
        case 2 => serverAddress
        case 3 => heartbeatAddress
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(f)
        case 2 => _root_.scalapb.descriptors.PRepeated(serverAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(heartbeatAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.vanillamencius.NettyConfigProto
}

object NettyConfigProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.vanillamencius.NettyConfigProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.vanillamencius.NettyConfigProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.vanillamencius.NettyConfigProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.vanillamencius.NettyConfigProto(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.vanillamencius.NettyConfigProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.vanillamencius.NettyConfigProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConfigProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConfigProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.vanillamencius.HostPortProto
      case 3 => __out = frankenpaxos.vanillamencius.HostPortProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.vanillamencius.NettyConfigProto(
    f = 0
  )
  implicit class NettyConfigProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.NettyConfigProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.vanillamencius.NettyConfigProto](_l) {
    def f: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.f)((c_, f_) => c_.copy(f = f_))
    def serverAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]] = field(_.serverAddress)((c_, f_) => c_.copy(serverAddress = f_))
    def heartbeatAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.vanillamencius.HostPortProto]] = field(_.heartbeatAddress)((c_, f_) => c_.copy(heartbeatAddress = f_))
  }
  final val F_FIELD_NUMBER = 1
  final val SERVER_ADDRESS_FIELD_NUMBER = 2
  final val HEARTBEAT_ADDRESS_FIELD_NUMBER = 3
}
