// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.vanillamencius

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class ServerInbound(
    request: frankenpaxos.vanillamencius.ServerInbound.Request = frankenpaxos.vanillamencius.ServerInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ServerInbound] with scalapb.lenses.Updatable[ServerInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.phase1A.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase1A.get.serializedSize) + request.phase1A.get.serializedSize }
      if (request.phase1B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase1B.get.serializedSize) + request.phase1B.get.serializedSize }
      if (request.phase2A.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2A.get.serializedSize) + request.phase2A.get.serializedSize }
      if (request.phase2B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2B.get.serializedSize) + request.phase2B.get.serializedSize }
      if (request.skip.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.skip.get.serializedSize) + request.skip.get.serializedSize }
      if (request.chosen.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.chosen.get.serializedSize) + request.chosen.get.serializedSize }
      if (request.phase1Nack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase1Nack.get.serializedSize) + request.phase1Nack.get.serializedSize }
      if (request.phase2Nack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2Nack.get.serializedSize) + request.phase2Nack.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.clientRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase1A.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase1B.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2A.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2B.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.skip.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.chosen.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase1Nack.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2Nack.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.vanillamencius.ServerInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.vanillamencius.ClientRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1A(_root_.scalapb.LiteParser.readMessage(_input__, request.phase1A.getOrElse(frankenpaxos.vanillamencius.Phase1a.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase1B.getOrElse(frankenpaxos.vanillamencius.Phase1b.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2A(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2A.getOrElse(frankenpaxos.vanillamencius.Phase2a.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2B.getOrElse(frankenpaxos.vanillamencius.Phase2b.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Skip(_root_.scalapb.LiteParser.readMessage(_input__, request.skip.getOrElse(frankenpaxos.vanillamencius.Skip.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Chosen(_root_.scalapb.LiteParser.readMessage(_input__, request.chosen.getOrElse(frankenpaxos.vanillamencius.Chosen.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1Nack(_root_.scalapb.LiteParser.readMessage(_input__, request.phase1Nack.getOrElse(frankenpaxos.vanillamencius.Phase1Nack.defaultInstance)))
          case 74 =>
            __request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2Nack(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2Nack.getOrElse(frankenpaxos.vanillamencius.Phase2Nack.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.vanillamencius.ServerInbound(
          request = __request
      )
    }
    def getClientRequest: frankenpaxos.vanillamencius.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.vanillamencius.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.vanillamencius.ClientRequest): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.ClientRequest(__v))
    def getPhase1A: frankenpaxos.vanillamencius.Phase1a = request.phase1A.getOrElse(frankenpaxos.vanillamencius.Phase1a.defaultInstance)
    def withPhase1A(__v: frankenpaxos.vanillamencius.Phase1a): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1A(__v))
    def getPhase1B: frankenpaxos.vanillamencius.Phase1b = request.phase1B.getOrElse(frankenpaxos.vanillamencius.Phase1b.defaultInstance)
    def withPhase1B(__v: frankenpaxos.vanillamencius.Phase1b): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1B(__v))
    def getPhase2A: frankenpaxos.vanillamencius.Phase2a = request.phase2A.getOrElse(frankenpaxos.vanillamencius.Phase2a.defaultInstance)
    def withPhase2A(__v: frankenpaxos.vanillamencius.Phase2a): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2A(__v))
    def getPhase2B: frankenpaxos.vanillamencius.Phase2b = request.phase2B.getOrElse(frankenpaxos.vanillamencius.Phase2b.defaultInstance)
    def withPhase2B(__v: frankenpaxos.vanillamencius.Phase2b): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2B(__v))
    def getSkip: frankenpaxos.vanillamencius.Skip = request.skip.getOrElse(frankenpaxos.vanillamencius.Skip.defaultInstance)
    def withSkip(__v: frankenpaxos.vanillamencius.Skip): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Skip(__v))
    def getChosen: frankenpaxos.vanillamencius.Chosen = request.chosen.getOrElse(frankenpaxos.vanillamencius.Chosen.defaultInstance)
    def withChosen(__v: frankenpaxos.vanillamencius.Chosen): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Chosen(__v))
    def getPhase1Nack: frankenpaxos.vanillamencius.Phase1Nack = request.phase1Nack.getOrElse(frankenpaxos.vanillamencius.Phase1Nack.defaultInstance)
    def withPhase1Nack(__v: frankenpaxos.vanillamencius.Phase1Nack): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1Nack(__v))
    def getPhase2Nack: frankenpaxos.vanillamencius.Phase2Nack = request.phase2Nack.getOrElse(frankenpaxos.vanillamencius.Phase2Nack.defaultInstance)
    def withPhase2Nack(__v: frankenpaxos.vanillamencius.Phase2Nack): ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2Nack(__v))
    def clearRequest: ServerInbound = copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.vanillamencius.ServerInbound.Request): ServerInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.orNull
        case 2 => request.phase1A.orNull
        case 3 => request.phase1B.orNull
        case 4 => request.phase2A.orNull
        case 5 => request.phase2B.orNull
        case 6 => request.skip.orNull
        case 7 => request.chosen.orNull
        case 8 => request.phase1Nack.orNull
        case 9 => request.phase2Nack.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.phase1A.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.phase1B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.phase2A.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.phase2B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.skip.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.chosen.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.phase1Nack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => request.phase2Nack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.vanillamencius.ServerInbound
}

object ServerInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.vanillamencius.ServerInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.vanillamencius.ServerInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.vanillamencius.ServerInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.vanillamencius.ServerInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.ClientRequest]].map(frankenpaxos.vanillamencius.ServerInbound.Request.ClientRequest)
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase1a]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1A))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase1b]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1B))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase2a]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2A))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase2b]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2B))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Skip]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Skip))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Chosen]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Chosen))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase1Nack]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1Nack))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[frankenpaxos.vanillamencius.Phase2Nack]].map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2Nack))
    .getOrElse(frankenpaxos.vanillamencius.ServerInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.vanillamencius.ServerInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.vanillamencius.ServerInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.ClientRequest]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.ClientRequest)
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase1a]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1A))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase1b]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1B))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase2a]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2A))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase2b]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2B))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Skip]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Skip))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Chosen]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Chosen))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase1Nack]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase1Nack))
    .orElse[frankenpaxos.vanillamencius.ServerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[frankenpaxos.vanillamencius.Phase2Nack]]).map(frankenpaxos.vanillamencius.ServerInbound.Request.Phase2Nack))
    .getOrElse(frankenpaxos.vanillamencius.ServerInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = VanillaMenciusProto.javaDescriptor.getMessageTypes.get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = VanillaMenciusProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.vanillamencius.ClientRequest
      case 2 => __out = frankenpaxos.vanillamencius.Phase1a
      case 3 => __out = frankenpaxos.vanillamencius.Phase1b
      case 4 => __out = frankenpaxos.vanillamencius.Phase2a
      case 5 => __out = frankenpaxos.vanillamencius.Phase2b
      case 6 => __out = frankenpaxos.vanillamencius.Skip
      case 7 => __out = frankenpaxos.vanillamencius.Chosen
      case 8 => __out = frankenpaxos.vanillamencius.Phase1Nack
      case 9 => __out = frankenpaxos.vanillamencius.Phase2Nack
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.vanillamencius.ServerInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isClientRequest: _root_.scala.Boolean = false
    def isPhase1A: _root_.scala.Boolean = false
    def isPhase1B: _root_.scala.Boolean = false
    def isPhase2A: _root_.scala.Boolean = false
    def isPhase2B: _root_.scala.Boolean = false
    def isSkip: _root_.scala.Boolean = false
    def isChosen: _root_.scala.Boolean = false
    def isPhase1Nack: _root_.scala.Boolean = false
    def isPhase2Nack: _root_.scala.Boolean = false
    def clientRequest: scala.Option[frankenpaxos.vanillamencius.ClientRequest] = None
    def phase1A: scala.Option[frankenpaxos.vanillamencius.Phase1a] = None
    def phase1B: scala.Option[frankenpaxos.vanillamencius.Phase1b] = None
    def phase2A: scala.Option[frankenpaxos.vanillamencius.Phase2a] = None
    def phase2B: scala.Option[frankenpaxos.vanillamencius.Phase2b] = None
    def skip: scala.Option[frankenpaxos.vanillamencius.Skip] = None
    def chosen: scala.Option[frankenpaxos.vanillamencius.Chosen] = None
    def phase1Nack: scala.Option[frankenpaxos.vanillamencius.Phase1Nack] = None
    def phase2Nack: scala.Option[frankenpaxos.vanillamencius.Phase2Nack] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.vanillamencius.ClientRequest) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.vanillamencius.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Phase1A(value: frankenpaxos.vanillamencius.Phase1a) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase1a
      override def isPhase1A: _root_.scala.Boolean = true
      override def phase1A: scala.Option[frankenpaxos.vanillamencius.Phase1a] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Phase1B(value: frankenpaxos.vanillamencius.Phase1b) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase1b
      override def isPhase1B: _root_.scala.Boolean = true
      override def phase1B: scala.Option[frankenpaxos.vanillamencius.Phase1b] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Phase2A(value: frankenpaxos.vanillamencius.Phase2a) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase2a
      override def isPhase2A: _root_.scala.Boolean = true
      override def phase2A: scala.Option[frankenpaxos.vanillamencius.Phase2a] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Phase2B(value: frankenpaxos.vanillamencius.Phase2b) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase2b
      override def isPhase2B: _root_.scala.Boolean = true
      override def phase2B: scala.Option[frankenpaxos.vanillamencius.Phase2b] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Skip(value: frankenpaxos.vanillamencius.Skip) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Skip
      override def isSkip: _root_.scala.Boolean = true
      override def skip: scala.Option[frankenpaxos.vanillamencius.Skip] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Chosen(value: frankenpaxos.vanillamencius.Chosen) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Chosen
      override def isChosen: _root_.scala.Boolean = true
      override def chosen: scala.Option[frankenpaxos.vanillamencius.Chosen] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Phase1Nack(value: frankenpaxos.vanillamencius.Phase1Nack) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase1Nack
      override def isPhase1Nack: _root_.scala.Boolean = true
      override def phase1Nack: scala.Option[frankenpaxos.vanillamencius.Phase1Nack] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Phase2Nack(value: frankenpaxos.vanillamencius.Phase2Nack) extends frankenpaxos.vanillamencius.ServerInbound.Request {
      type ValueType = frankenpaxos.vanillamencius.Phase2Nack
      override def isPhase2Nack: _root_.scala.Boolean = true
      override def phase2Nack: scala.Option[frankenpaxos.vanillamencius.Phase2Nack] = Some(value)
      override def number: _root_.scala.Int = 9
    }
  }
  implicit class ServerInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.ServerInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.vanillamencius.ServerInbound](_l) {
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.ClientRequest(f_)))
    def phase1A: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase1a] = field(_.getPhase1A)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1A(f_)))
    def phase1B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase1b] = field(_.getPhase1B)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1B(f_)))
    def phase2A: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase2a] = field(_.getPhase2A)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2A(f_)))
    def phase2B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase2b] = field(_.getPhase2B)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2B(f_)))
    def skip: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Skip] = field(_.getSkip)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Skip(f_)))
    def chosen: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Chosen] = field(_.getChosen)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Chosen(f_)))
    def phase1Nack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase1Nack] = field(_.getPhase1Nack)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase1Nack(f_)))
    def phase2Nack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.Phase2Nack] = field(_.getPhase2Nack)((c_, f_) => c_.copy(request = frankenpaxos.vanillamencius.ServerInbound.Request.Phase2Nack(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.vanillamencius.ServerInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val CLIENT_REQUEST_FIELD_NUMBER = 1
  final val PHASE1A_FIELD_NUMBER = 2
  final val PHASE1B_FIELD_NUMBER = 3
  final val PHASE2A_FIELD_NUMBER = 4
  final val PHASE2B_FIELD_NUMBER = 5
  final val SKIP_FIELD_NUMBER = 6
  final val CHOSEN_FIELD_NUMBER = 7
  final val PHASE1_NACK_FIELD_NUMBER = 8
  final val PHASE2_NACK_FIELD_NUMBER = 9
}
