// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.simplegcbpaxos

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class CommitSnapshot(
    id: _root_.scala.Int,
    watermark: frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto,
    stateMachine: _root_.com.google.protobuf.ByteString,
    clientTable: frankenpaxos.clienttable.ClientTableProto
    ) extends scalapb.GeneratedMessage with scalapb.Message[CommitSnapshot] with scalapb.lenses.Updatable[CommitSnapshot] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, id)
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(watermark.serializedSize) + watermark.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, stateMachine)
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(clientTable.serializedSize) + clientTable.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, id)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(watermark.serializedSize)
      watermark.writeTo(_output__)
      _output__.writeBytes(3, stateMachine)
      _output__.writeTag(4, 2)
      _output__.writeUInt32NoTag(clientTable.serializedSize)
      clientTable.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.simplegcbpaxos.CommitSnapshot = {
      var __id = this.id
      var __watermark = this.watermark
      var __stateMachine = this.stateMachine
      var __clientTable = this.clientTable
      var __requiredFields0: _root_.scala.Long = 0xfL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __watermark = _root_.scalapb.LiteParser.readMessage(_input__, __watermark)
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __stateMachine = _input__.readBytes()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __clientTable = _root_.scalapb.LiteParser.readMessage(_input__, __clientTable)
            __requiredFields0 &= 0xfffffffffffffff7L
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.simplegcbpaxos.CommitSnapshot(
          id = __id,
          watermark = __watermark,
          stateMachine = __stateMachine,
          clientTable = __clientTable
      )
    }
    def withId(__v: _root_.scala.Int): CommitSnapshot = copy(id = __v)
    def withWatermark(__v: frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto): CommitSnapshot = copy(watermark = __v)
    def withStateMachine(__v: _root_.com.google.protobuf.ByteString): CommitSnapshot = copy(stateMachine = __v)
    def withClientTable(__v: frankenpaxos.clienttable.ClientTableProto): CommitSnapshot = copy(clientTable = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => watermark
        case 3 => stateMachine
        case 4 => clientTable
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => watermark.toPMessage
        case 3 => _root_.scalapb.descriptors.PByteString(stateMachine)
        case 4 => clientTable.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.simplegcbpaxos.CommitSnapshot
}

object CommitSnapshot extends scalapb.GeneratedMessageCompanion[frankenpaxos.simplegcbpaxos.CommitSnapshot] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.simplegcbpaxos.CommitSnapshot] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.simplegcbpaxos.CommitSnapshot = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.simplegcbpaxos.CommitSnapshot(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap(__fields.get(3)).asInstanceOf[frankenpaxos.clienttable.ClientTableProto]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.simplegcbpaxos.CommitSnapshot] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.simplegcbpaxos.CommitSnapshot(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.com.google.protobuf.ByteString],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[frankenpaxos.clienttable.ClientTableProto]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SimpleGcBPaxosProto.javaDescriptor.getMessageTypes.get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SimpleGcBPaxosProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto
      case 4 => __out = frankenpaxos.clienttable.ClientTableProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.simplegcbpaxos.CommitSnapshot(
    id = 0,
    watermark = frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto.defaultInstance,
    stateMachine = _root_.com.google.protobuf.ByteString.EMPTY,
    clientTable = frankenpaxos.clienttable.ClientTableProto.defaultInstance
  )
  implicit class CommitSnapshotLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.CommitSnapshot]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.simplegcbpaxos.CommitSnapshot](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def watermark: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto] = field(_.watermark)((c_, f_) => c_.copy(watermark = f_))
    def stateMachine: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.stateMachine)((c_, f_) => c_.copy(stateMachine = f_))
    def clientTable: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.clienttable.ClientTableProto] = field(_.clientTable)((c_, f_) => c_.copy(clientTable = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val WATERMARK_FIELD_NUMBER = 2
  final val STATE_MACHINE_FIELD_NUMBER = 3
  final val CLIENT_TABLE_FIELD_NUMBER = 4
}
