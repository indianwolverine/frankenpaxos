// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.simplegcbpaxos

object SimpleGcBPaxosProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    frankenpaxos.clienttable.ClientTableProtoCompanion,
    frankenpaxos.compact.IntPrefixSetProtoCompanion,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    frankenpaxos.simplegcbpaxos.VertexId,
    frankenpaxos.simplegcbpaxos.Noop,
    frankenpaxos.simplegcbpaxos.Snapshot,
    frankenpaxos.simplegcbpaxos.Command,
    frankenpaxos.simplegcbpaxos.CommandOrSnapshot,
    frankenpaxos.simplegcbpaxos.Proposal,
    frankenpaxos.simplegcbpaxos.VertexIdPrefixSetProto,
    frankenpaxos.simplegcbpaxos.VoteValueProto,
    frankenpaxos.simplegcbpaxos.ClientRequest,
    frankenpaxos.simplegcbpaxos.SnapshotRequest,
    frankenpaxos.simplegcbpaxos.DependencyRequest,
    frankenpaxos.simplegcbpaxos.DependencyReply,
    frankenpaxos.simplegcbpaxos.Propose,
    frankenpaxos.simplegcbpaxos.Phase1a,
    frankenpaxos.simplegcbpaxos.Phase1b,
    frankenpaxos.simplegcbpaxos.Phase2a,
    frankenpaxos.simplegcbpaxos.Phase2b,
    frankenpaxos.simplegcbpaxos.Nack,
    frankenpaxos.simplegcbpaxos.Commit,
    frankenpaxos.simplegcbpaxos.ClientReply,
    frankenpaxos.simplegcbpaxos.Recover,
    frankenpaxos.simplegcbpaxos.CommitSnapshot,
    frankenpaxos.simplegcbpaxos.GarbageCollect,
    frankenpaxos.simplegcbpaxos.LeaderInbound,
    frankenpaxos.simplegcbpaxos.DepServiceNodeInbound,
    frankenpaxos.simplegcbpaxos.ProposerInbound,
    frankenpaxos.simplegcbpaxos.AcceptorInbound,
    frankenpaxos.simplegcbpaxos.ReplicaInbound,
    frankenpaxos.simplegcbpaxos.GarbageCollectorInbound,
    frankenpaxos.simplegcbpaxos.ClientInbound
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjBmcmFua2VucGF4b3Mvc2ltcGxlZ2NicGF4b3MvU2ltcGxlR2NCUGF4b3MucHJvdG8SG2ZyYW5rZW5wYXhvcy5zaW1wbGVnY
  2JwYXhvcxoqZnJhbmtlbnBheG9zL2NsaWVudHRhYmxlL0NsaWVudFRhYmxlLnByb3RvGidmcmFua2VucGF4b3MvY29tcGFjdC9Jb
  nRQcmVmaXhTZXQucHJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90byJsCghWZXJ0ZXhJZBIhCgxsZWFkZXJfaW5kZXgYASACKAVSC
  2xlYWRlckluZGV4Eg4KAmlkGAIgAigFUgJpZDot4j8qGihAc2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTRXhwb3J0QWxsI
  jUKBE5vb3A6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCI5CghTbmFwc2hvdDot4j8qGihAc
  2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTRXhwb3J0QWxsIsEBCgdDb21tYW5kEiUKDmNsaWVudF9hZGRyZXNzGAEgAigMU
  g1jbGllbnRBZGRyZXNzEikKEGNsaWVudF9wc2V1ZG9ueW0YAiACKAVSD2NsaWVudFBzZXVkb255bRIbCgljbGllbnRfaWQYAyACK
  AVSCGNsaWVudElkEhgKB2NvbW1hbmQYBCACKAxSB2NvbW1hbmQ6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU
  0V4cG9ydEFsbCLSAQoRQ29tbWFuZE9yU25hcHNob3QSQAoHY29tbWFuZBgBIAEoCzIkLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwY
  Xhvcy5Db21tYW5kSABSB2NvbW1hbmQSQwoIc25hcHNob3QYAiABKAsyJS5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuU25hc
  HNob3RIAFIIc25hcHNob3Q6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbEIHCgV2YWx1ZSKCA
  goIUHJvcG9zYWwSQAoHY29tbWFuZBgBIAEoCzIkLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Db21tYW5kSABSB2NvbW1hb
  mQSNwoEbm9vcBgCIAEoCzIhLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Ob29wSABSBG5vb3ASQwoIc25hcHNob3QYAyABK
  AsyJS5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuU25hcHNob3RIAFIIc25hcHNob3Q6LeI/KhooQHNjYWxhLnNjYWxhanMua
  nMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbEIHCgV2YWx1ZSK2AQoWVmVydGV4SWRQcmVmaXhTZXRQcm90bxIeCgpudW1MZWFkZXJzG
  AEgAigFUgpudW1MZWFkZXJzEk0KDmludF9wcmVmaXhfc2V0GAIgAygLMicuZnJhbmtlbnBheG9zLmNvbXBhY3QuSW50UHJlZml4U
  2V0UHJvdG9SDGludFByZWZpeFNldDot4j8qGihAc2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTRXhwb3J0QWxsItsBCg5Wb
  3RlVmFsdWVQcm90bxJBCghwcm9wb3NhbBgBIAIoCzIlLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Qcm9wb3NhbFIIcHJvc
  G9zYWwSVwoMZGVwZW5kZW5jaWVzGAIgAigLMjMuZnJhbmtlbnBheG9zLnNpbXBsZWdjYnBheG9zLlZlcnRleElkUHJlZml4U2V0U
  HJvdG9SDGRlcGVuZGVuY2llczot4j8qGihAc2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTRXhwb3J0QWxsIn4KDUNsaWVud
  FJlcXVlc3QSPgoHY29tbWFuZBgBIAIoCzIkLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Db21tYW5kUgdjb21tYW5kOi3iP
  yoaKEBzY2FsYS5zY2FsYWpzLmpzLmFubm90YXRpb24uSlNFeHBvcnRBbGwiQAoPU25hcHNob3RSZXF1ZXN0Oi3iPyoaKEBzY2FsY
  S5zY2FsYWpzLmpzLmFubm90YXRpb24uSlNFeHBvcnRBbGwi5gEKEURlcGVuZGVuY3lSZXF1ZXN0EkIKCXZlcnRleF9pZBgBIAIoC
  zIlLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFIIdmVydGV4SWQSXgoTY29tbWFuZF9vcl9zbmFwc2hvdBgCI
  AIoCzIuLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Db21tYW5kT3JTbmFwc2hvdFIRY29tbWFuZE9yU25hcHNob3Q6LeI/K
  hooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKSAgoPRGVwZW5kZW5jeVJlcGx5EkIKCXZlcnRleF9pZ
  BgBIAIoCzIlLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFIIdmVydGV4SWQSMwoWZGVwX3NlcnZpY2Vfbm9kZ
  V9pbmRleBgCIAIoBVITZGVwU2VydmljZU5vZGVJbmRleBJXCgxkZXBlbmRlbmNpZXMYAyACKAsyMy5mcmFua2VucGF4b3Muc2ltc
  GxlZ2NicGF4b3MuVmVydGV4SWRQcmVmaXhTZXRQcm90b1IMZGVwZW5kZW5jaWVzOi3iPyoaKEBzY2FsYS5zY2FsYWpzLmpzLmFub
  m90YXRpb24uSlNFeHBvcnRBbGwitQIKB1Byb3Bvc2USQgoJdmVydGV4X2lkGAEgAigLMiUuZnJhbmtlbnBheG9zLnNpbXBsZWdjY
  nBheG9zLlZlcnRleElkUgh2ZXJ0ZXhJZBJeChNjb21tYW5kX29yX3NuYXBzaG90GAIgAigLMi4uZnJhbmtlbnBheG9zLnNpbXBsZ
  WdjYnBheG9zLkNvbW1hbmRPclNuYXBzaG90UhFjb21tYW5kT3JTbmFwc2hvdBJXCgxkZXBlbmRlbmNpZXMYAyACKAsyMy5mcmFua
  2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuVmVydGV4SWRQcmVmaXhTZXRQcm90b1IMZGVwZW5kZW5jaWVzOi3iPyoaKEBzY2FsYS5zY
  2FsYWpzLmpzLmFubm90YXRpb24uSlNFeHBvcnRBbGwikgEKB1BoYXNlMWESQgoJdmVydGV4X2lkGAEgAigLMiUuZnJhbmtlbnBhe
  G9zLnNpbXBsZWdjYnBheG9zLlZlcnRleElkUgh2ZXJ0ZXhJZBIUCgVyb3VuZBgCIAIoBVIFcm91bmQ6LeI/KhooQHNjYWxhLnNjY
  WxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKeAgoHUGhhc2UxYhJCCgl2ZXJ0ZXhfaWQYASACKAsyJS5mcmFua2VucGF4b
  3Muc2ltcGxlZ2NicGF4b3MuVmVydGV4SWRSCHZlcnRleElkEh8KC2FjY2VwdG9yX2lkGAIgAigFUgphY2NlcHRvcklkEhQKBXJvd
  W5kGAMgAigFUgVyb3VuZBIdCgp2b3RlX3JvdW5kGAQgAigFUgl2b3RlUm91bmQSSgoKdm90ZV92YWx1ZRgFIAEoCzIrLmZyYW5rZ
  W5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Wb3RlVmFsdWVQcm90b1IJdm90ZVZhbHVlOi3iPyoaKEBzY2FsYS5zY2FsYWpzLmpzLmFub
  m90YXRpb24uSlNFeHBvcnRBbGwi3gEKB1BoYXNlMmESQgoJdmVydGV4X2lkGAEgAigLMiUuZnJhbmtlbnBheG9zLnNpbXBsZWdjY
  nBheG9zLlZlcnRleElkUgh2ZXJ0ZXhJZBIUCgVyb3VuZBgCIAIoBVIFcm91bmQSSgoKdm90ZV92YWx1ZRgDIAIoCzIrLmZyYW5rZ
  W5wYXhvcy5zaW1wbGVnY2JwYXhvcy5Wb3RlVmFsdWVQcm90b1IJdm90ZVZhbHVlOi3iPyoaKEBzY2FsYS5zY2FsYWpzLmpzLmFub
  m90YXRpb24uSlNFeHBvcnRBbGwiswEKB1BoYXNlMmISQgoJdmVydGV4X2lkGAEgAigLMiUuZnJhbmtlbnBheG9zLnNpbXBsZWdjY
  nBheG9zLlZlcnRleElkUgh2ZXJ0ZXhJZBIfCgthY2NlcHRvcl9pZBgCIAIoBVIKYWNjZXB0b3JJZBIUCgVyb3VuZBgDIAIoBVIFc
  m91bmQ6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKcAQoETmFjaxJCCgl2ZXJ0ZXhfaWQYA
  SACKAsyJS5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuVmVydGV4SWRSCHZlcnRleElkEiEKDGhpZ2hlcl9yb3VuZBgDIAIoB
  VILaGlnaGVyUm91bmQ6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKXAgoGQ29tbWl0EkIKC
  XZlcnRleF9pZBgBIAIoCzIlLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFIIdmVydGV4SWQSQQoIcHJvcG9zY
  WwYAiACKAsyJS5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuUHJvcG9zYWxSCHByb3Bvc2FsElcKDGRlcGVuZGVuY2llcxgDI
  AIoCzIzLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFByZWZpeFNldFByb3RvUgxkZXBlbmRlbmNpZXM6LeI/K
  hooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKcAQoLQ2xpZW50UmVwbHkSKQoQY2xpZW50X3BzZXVkb
  255bRgBIAIoBVIPY2xpZW50UHNldWRvbnltEhsKCWNsaWVudF9pZBgCIAIoBVIIY2xpZW50SWQSFgoGcmVzdWx0GAMgAigMUgZyZ
  XN1bHQ6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCJ8CgdSZWNvdmVyEkIKCXZlcnRleF9pZ
  BgBIAIoCzIlLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFIIdmVydGV4SWQ6LeI/KhooQHNjYWxhLnNjYWxha
  nMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbCKWAgoOQ29tbWl0U25hcHNob3QSDgoCaWQYASACKAVSAmlkElEKCXdhdGVybWFya
  xgCIAIoCzIzLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5WZXJ0ZXhJZFByZWZpeFNldFByb3RvUgl3YXRlcm1hcmsSIwoNc
  3RhdGVfbWFjaGluZRgDIAIoDFIMc3RhdGVNYWNoaW5lEk0KDGNsaWVudF90YWJsZRgEIAIoCzIqLmZyYW5rZW5wYXhvcy5jbGllb
  nR0YWJsZS5DbGllbnRUYWJsZVByb3RvUgtjbGllbnRUYWJsZTot4j8qGihAc2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTR
  Xhwb3J0QWxsIoABCg5HYXJiYWdlQ29sbGVjdBIjCg1yZXBsaWNhX2luZGV4GAEgAigFUgxyZXBsaWNhSW5kZXgSGgoIZnJvbnRpZ
  XIYAyADKAVSCGZyb250aWVyOi3iPyoaKEBzY2FsYS5zY2FsYWpzLmpzLmFubm90YXRpb24uSlNFeHBvcnRBbGwi1AIKDUxlYWRlc
  kluYm91bmQSUwoOY2xpZW50X3JlcXVlc3QYASABKAsyKi5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuQ2xpZW50UmVxdWVzd
  EgAUg1jbGllbnRSZXF1ZXN0ElkKEHNuYXBzaG90X3JlcXVlc3QYAiABKAsyLC5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuU
  25hcHNob3RSZXF1ZXN0SABSD3NuYXBzaG90UmVxdWVzdBJZChBkZXBlbmRlbmN5X3JlcGx5GAMgASgLMiwuZnJhbmtlbnBheG9zL
  nNpbXBsZWdjYnBheG9zLkRlcGVuZGVuY3lSZXBseUgAUg9kZXBlbmRlbmN5UmVwbHk6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuY
  W5ub3RhdGlvbi5KU0V4cG9ydEFsbEIJCgdyZXF1ZXN0IrIBChVEZXBTZXJ2aWNlTm9kZUluYm91bmQSXwoSZGVwZW5kZW5jeV9yZ
  XF1ZXN0GAEgASgLMi4uZnJhbmtlbnBheG9zLnNpbXBsZWdjYnBheG9zLkRlcGVuZGVuY3lSZXF1ZXN0SABSEWRlcGVuZGVuY3lSZ
  XF1ZXN0Oi3iPyoaKEBzY2FsYS5zY2FsYWpzLmpzLmFubm90YXRpb24uSlNFeHBvcnRBbGxCCQoHcmVxdWVzdCLkAwoPUHJvcG9zZ
  XJJbmJvdW5kEkAKB3Byb3Bvc2UYASABKAsyJC5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuUHJvcG9zZUgAUgdwcm9wb3NlE
  kAKB3BoYXNlMWIYAiABKAsyJC5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuUGhhc2UxYkgAUgdwaGFzZTFiEkAKB3BoYXNlM
  mIYAyABKAsyJC5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuUGhhc2UyYkgAUgdwaGFzZTJiEjcKBG5hY2sYBCABKAsyIS5mc
  mFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuTmFja0gAUgRuYWNrEkAKB3JlY292ZXIYBSABKAsyJC5mcmFua2VucGF4b3Muc2ltc
  GxlZ2NicGF4b3MuUmVjb3ZlckgAUgdyZWNvdmVyElYKD2dhcmJhZ2VfY29sbGVjdBgGIAEoCzIrLmZyYW5rZW5wYXhvcy5zaW1wb
  GVnY2JwYXhvcy5HYXJiYWdlQ29sbGVjdEgAUg5nYXJiYWdlQ29sbGVjdDot4j8qGihAc2NhbGEuc2NhbGFqcy5qcy5hbm5vdGF0a
  W9uLkpTRXhwb3J0QWxsQgkKB3JlcXVlc3QipwIKD0FjY2VwdG9ySW5ib3VuZBJACgdwaGFzZTFhGAEgASgLMiQuZnJhbmtlbnBhe
  G9zLnNpbXBsZWdjYnBheG9zLlBoYXNlMWFIAFIHcGhhc2UxYRJACgdwaGFzZTJhGAIgASgLMiQuZnJhbmtlbnBheG9zLnNpbXBsZ
  WdjYnBheG9zLlBoYXNlMmFIAFIHcGhhc2UyYRJWCg9nYXJiYWdlX2NvbGxlY3QYAyABKAsyKy5mcmFua2VucGF4b3Muc2ltcGxlZ
  2NicGF4b3MuR2FyYmFnZUNvbGxlY3RIAFIOZ2FyYmFnZUNvbGxlY3Q6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvb
  i5KU0V4cG9ydEFsbEIJCgdyZXF1ZXN0IqMCCg5SZXBsaWNhSW5ib3VuZBI9CgZjb21taXQYASABKAsyIy5mcmFua2VucGF4b3Muc
  2ltcGxlZ2NicGF4b3MuQ29tbWl0SABSBmNvbW1pdBJACgdyZWNvdmVyGAIgASgLMiQuZnJhbmtlbnBheG9zLnNpbXBsZWdjYnBhe
  G9zLlJlY292ZXJIAFIHcmVjb3ZlchJWCg9jb21taXRfc25hcHNob3QYAyABKAsyKy5mcmFua2VucGF4b3Muc2ltcGxlZ2NicGF4b
  3MuQ29tbWl0U25hcHNob3RIAFIOY29tbWl0U25hcHNob3Q6LeI/KhooQHNjYWxhLnNjYWxhanMuanMuYW5ub3RhdGlvbi5KU0V4c
  G9ydEFsbEIJCgdyZXF1ZXN0IqsBChdHYXJiYWdlQ29sbGVjdG9ySW5ib3VuZBJWCg9nYXJiYWdlX2NvbGxlY3QYASABKAsyKy5mc
  mFua2VucGF4b3Muc2ltcGxlZ2NicGF4b3MuR2FyYmFnZUNvbGxlY3RIAFIOZ2FyYmFnZUNvbGxlY3Q6LeI/KhooQHNjYWxhLnNjY
  WxhanMuanMuYW5ub3RhdGlvbi5KU0V4cG9ydEFsbEIJCgdyZXF1ZXN0IpgBCg1DbGllbnRJbmJvdW5kEk0KDGNsaWVudF9yZXBse
  RgBIAEoCzIoLmZyYW5rZW5wYXhvcy5zaW1wbGVnY2JwYXhvcy5DbGllbnRSZXBseUgAUgtjbGllbnRSZXBseTot4j8qGihAc2Nhb
  GEuc2NhbGFqcy5qcy5hbm5vdGF0aW9uLkpTRXhwb3J0QWxsQgkKB3JlcXVlc3RCIuI/HwobZnJhbmtlbnBheG9zLnNpbXBsZWdjY
  nBheG9zEAE="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      frankenpaxos.clienttable.ClientTableProtoCompanion.javaDescriptor,
      frankenpaxos.compact.IntPrefixSetProtoCompanion.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}