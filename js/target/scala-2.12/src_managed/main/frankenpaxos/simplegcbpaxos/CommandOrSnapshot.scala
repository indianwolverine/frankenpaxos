// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.simplegcbpaxos

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class CommandOrSnapshot(
    value: frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[CommandOrSnapshot] with scalapb.lenses.Updatable[CommandOrSnapshot] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (value.command.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.command.get.serializedSize) + value.command.get.serializedSize }
      if (value.snapshot.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.snapshot.get.serializedSize) + value.snapshot.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.command.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.snapshot.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.simplegcbpaxos.CommandOrSnapshot = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Command(_root_.scalapb.LiteParser.readMessage(_input__, value.command.getOrElse(frankenpaxos.simplegcbpaxos.Command.defaultInstance)))
          case 18 =>
            __value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Snapshot(_root_.scalapb.LiteParser.readMessage(_input__, value.snapshot.getOrElse(frankenpaxos.simplegcbpaxos.Snapshot.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.simplegcbpaxos.CommandOrSnapshot(
          value = __value
      )
    }
    def getCommand: frankenpaxos.simplegcbpaxos.Command = value.command.getOrElse(frankenpaxos.simplegcbpaxos.Command.defaultInstance)
    def withCommand(__v: frankenpaxos.simplegcbpaxos.Command): CommandOrSnapshot = copy(value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Command(__v))
    def getSnapshot: frankenpaxos.simplegcbpaxos.Snapshot = value.snapshot.getOrElse(frankenpaxos.simplegcbpaxos.Snapshot.defaultInstance)
    def withSnapshot(__v: frankenpaxos.simplegcbpaxos.Snapshot): CommandOrSnapshot = copy(value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Snapshot(__v))
    def clearValue: CommandOrSnapshot = copy(value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Empty)
    def withValue(__v: frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value): CommandOrSnapshot = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.command.orNull
        case 2 => value.snapshot.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.command.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.snapshot.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.simplegcbpaxos.CommandOrSnapshot
}

object CommandOrSnapshot extends scalapb.GeneratedMessageCompanion[frankenpaxos.simplegcbpaxos.CommandOrSnapshot] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.simplegcbpaxos.CommandOrSnapshot] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.simplegcbpaxos.CommandOrSnapshot = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.simplegcbpaxos.CommandOrSnapshot(
      value = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.simplegcbpaxos.Command]].map(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Command)
    .orElse[frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.simplegcbpaxos.Snapshot]].map(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Snapshot))
    .getOrElse(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.simplegcbpaxos.CommandOrSnapshot] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.simplegcbpaxos.CommandOrSnapshot(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.simplegcbpaxos.Command]]).map(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Command)
    .orElse[frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.simplegcbpaxos.Snapshot]]).map(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Snapshot))
    .getOrElse(frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SimpleGcBPaxosProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SimpleGcBPaxosProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.simplegcbpaxos.Command
      case 2 => __out = frankenpaxos.simplegcbpaxos.Snapshot
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.simplegcbpaxos.CommandOrSnapshot(
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isCommand: _root_.scala.Boolean = false
    def isSnapshot: _root_.scala.Boolean = false
    def command: scala.Option[frankenpaxos.simplegcbpaxos.Command] = None
    def snapshot: scala.Option[frankenpaxos.simplegcbpaxos.Snapshot] = None
  }
  object Value extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Command(value: frankenpaxos.simplegcbpaxos.Command) extends frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value {
      type ValueType = frankenpaxos.simplegcbpaxos.Command
      override def isCommand: _root_.scala.Boolean = true
      override def command: scala.Option[frankenpaxos.simplegcbpaxos.Command] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Snapshot(value: frankenpaxos.simplegcbpaxos.Snapshot) extends frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value {
      type ValueType = frankenpaxos.simplegcbpaxos.Snapshot
      override def isSnapshot: _root_.scala.Boolean = true
      override def snapshot: scala.Option[frankenpaxos.simplegcbpaxos.Snapshot] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class CommandOrSnapshotLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.CommandOrSnapshot]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.simplegcbpaxos.CommandOrSnapshot](_l) {
    def command: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.Command] = field(_.getCommand)((c_, f_) => c_.copy(value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Command(f_)))
    def snapshot: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.Snapshot] = field(_.getSnapshot)((c_, f_) => c_.copy(value = frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value.Snapshot(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.simplegcbpaxos.CommandOrSnapshot.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val COMMAND_FIELD_NUMBER = 1
  final val SNAPSHOT_FIELD_NUMBER = 2
}
