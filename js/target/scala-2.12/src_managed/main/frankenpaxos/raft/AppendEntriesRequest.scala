// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.raft

@SerialVersionUID(0L)
final case class AppendEntriesRequest(
    term: _root_.scala.Int,
    prevLogIndex: _root_.scala.Int,
    prevLogTerm: _root_.scala.Int,
    entries: _root_.scala.collection.Seq[frankenpaxos.raft.LogEntry] = _root_.scala.collection.Seq.empty,
    leaderCommit: _root_.scala.Int,
    uuid: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AppendEntriesRequest] with scalapb.lenses.Updatable[AppendEntriesRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, term)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, prevLogIndex)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, prevLogTerm)
      entries.foreach(entries => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(entries.serializedSize) + entries.serializedSize)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, leaderCommit)
      if (uuid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, uuid.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, term)
      _output__.writeInt32(2, prevLogIndex)
      _output__.writeInt32(3, prevLogTerm)
      entries.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      _output__.writeInt32(5, leaderCommit)
      uuid.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.raft.AppendEntriesRequest = {
      var __term = this.term
      var __prevLogIndex = this.prevLogIndex
      var __prevLogTerm = this.prevLogTerm
      val __entries = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.raft.LogEntry] ++= this.entries)
      var __leaderCommit = this.leaderCommit
      var __uuid = this.uuid
      var __requiredFields0: _root_.scala.Long = 0xfL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __term = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __prevLogIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __prevLogTerm = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __entries += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.raft.LogEntry.defaultInstance)
          case 40 =>
            __leaderCommit = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 48 =>
            __uuid = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.raft.AppendEntriesRequest(
          term = __term,
          prevLogIndex = __prevLogIndex,
          prevLogTerm = __prevLogTerm,
          entries = __entries.result(),
          leaderCommit = __leaderCommit,
          uuid = __uuid
      )
    }
    def withTerm(__v: _root_.scala.Int): AppendEntriesRequest = copy(term = __v)
    def withPrevLogIndex(__v: _root_.scala.Int): AppendEntriesRequest = copy(prevLogIndex = __v)
    def withPrevLogTerm(__v: _root_.scala.Int): AppendEntriesRequest = copy(prevLogTerm = __v)
    def clearEntries = copy(entries = _root_.scala.collection.Seq.empty)
    def addEntries(__vs: frankenpaxos.raft.LogEntry*): AppendEntriesRequest = addAllEntries(__vs)
    def addAllEntries(__vs: TraversableOnce[frankenpaxos.raft.LogEntry]): AppendEntriesRequest = copy(entries = entries ++ __vs)
    def withEntries(__v: _root_.scala.collection.Seq[frankenpaxos.raft.LogEntry]): AppendEntriesRequest = copy(entries = __v)
    def withLeaderCommit(__v: _root_.scala.Int): AppendEntriesRequest = copy(leaderCommit = __v)
    def getUuid: _root_.scala.Int = uuid.getOrElse(0)
    def clearUuid: AppendEntriesRequest = copy(uuid = None)
    def withUuid(__v: _root_.scala.Int): AppendEntriesRequest = copy(uuid = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => term
        case 2 => prevLogIndex
        case 3 => prevLogTerm
        case 4 => entries
        case 5 => leaderCommit
        case 6 => uuid.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(term)
        case 2 => _root_.scalapb.descriptors.PInt(prevLogIndex)
        case 3 => _root_.scalapb.descriptors.PInt(prevLogTerm)
        case 4 => _root_.scalapb.descriptors.PRepeated(entries.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PInt(leaderCommit)
        case 6 => uuid.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.raft.AppendEntriesRequest
}

object AppendEntriesRequest extends scalapb.GeneratedMessageCompanion[frankenpaxos.raft.AppendEntriesRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.raft.AppendEntriesRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.raft.AppendEntriesRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.raft.AppendEntriesRequest(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.raft.LogEntry]],
      __fieldsMap(__fields.get(4)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.raft.AppendEntriesRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.raft.AppendEntriesRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.raft.LogEntry]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = frankenpaxos.raft.LogEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.raft.AppendEntriesRequest(
    term = 0,
    prevLogIndex = 0,
    prevLogTerm = 0,
    leaderCommit = 0
  )
  implicit class AppendEntriesRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.AppendEntriesRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.raft.AppendEntriesRequest](_l) {
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def prevLogIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.prevLogIndex)((c_, f_) => c_.copy(prevLogIndex = f_))
    def prevLogTerm: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.prevLogTerm)((c_, f_) => c_.copy(prevLogTerm = f_))
    def entries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.raft.LogEntry]] = field(_.entries)((c_, f_) => c_.copy(entries = f_))
    def leaderCommit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.leaderCommit)((c_, f_) => c_.copy(leaderCommit = f_))
    def uuid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getUuid)((c_, f_) => c_.copy(uuid = Option(f_)))
    def optionalUuid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.uuid)((c_, f_) => c_.copy(uuid = f_))
  }
  final val TERM_FIELD_NUMBER = 1
  final val PREV_LOG_INDEX_FIELD_NUMBER = 2
  final val PREV_LOG_TERM_FIELD_NUMBER = 3
  final val ENTRIES_FIELD_NUMBER = 4
  final val LEADER_COMMIT_FIELD_NUMBER = 5
  final val UUID_FIELD_NUMBER = 6
}
