// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.raft

@SerialVersionUID(0L)
final case class AppendEntriesResponse(
    term: _root_.scala.Int,
    success: _root_.scala.Boolean,
    lastLogIndex: _root_.scala.Int,
    uuid: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AppendEntriesResponse] with scalapb.lenses.Updatable[AppendEntriesResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, term)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, success)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, lastLogIndex)
      if (uuid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, uuid.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, term)
      _output__.writeBool(2, success)
      _output__.writeInt32(3, lastLogIndex)
      uuid.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.raft.AppendEntriesResponse = {
      var __term = this.term
      var __success = this.success
      var __lastLogIndex = this.lastLogIndex
      var __uuid = this.uuid
      var __requiredFields0: _root_.scala.Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __term = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __success = _input__.readBool()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __lastLogIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __uuid = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.raft.AppendEntriesResponse(
          term = __term,
          success = __success,
          lastLogIndex = __lastLogIndex,
          uuid = __uuid
      )
    }
    def withTerm(__v: _root_.scala.Int): AppendEntriesResponse = copy(term = __v)
    def withSuccess(__v: _root_.scala.Boolean): AppendEntriesResponse = copy(success = __v)
    def withLastLogIndex(__v: _root_.scala.Int): AppendEntriesResponse = copy(lastLogIndex = __v)
    def getUuid: _root_.scala.Int = uuid.getOrElse(0)
    def clearUuid: AppendEntriesResponse = copy(uuid = None)
    def withUuid(__v: _root_.scala.Int): AppendEntriesResponse = copy(uuid = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => term
        case 2 => success
        case 3 => lastLogIndex
        case 4 => uuid.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(term)
        case 2 => _root_.scalapb.descriptors.PBoolean(success)
        case 3 => _root_.scalapb.descriptors.PInt(lastLogIndex)
        case 4 => uuid.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.raft.AppendEntriesResponse
}

object AppendEntriesResponse extends scalapb.GeneratedMessageCompanion[frankenpaxos.raft.AppendEntriesResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.raft.AppendEntriesResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.raft.AppendEntriesResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.raft.AppendEntriesResponse(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.raft.AppendEntriesResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.raft.AppendEntriesResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Boolean],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.raft.AppendEntriesResponse(
    term = 0,
    success = false,
    lastLogIndex = 0
  )
  implicit class AppendEntriesResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.AppendEntriesResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.raft.AppendEntriesResponse](_l) {
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def success: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.success)((c_, f_) => c_.copy(success = f_))
    def lastLogIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.lastLogIndex)((c_, f_) => c_.copy(lastLogIndex = f_))
    def uuid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getUuid)((c_, f_) => c_.copy(uuid = Option(f_)))
    def optionalUuid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.uuid)((c_, f_) => c_.copy(uuid = f_))
  }
  final val TERM_FIELD_NUMBER = 1
  final val SUCCESS_FIELD_NUMBER = 2
  final val LAST_LOG_INDEX_FIELD_NUMBER = 3
  final val UUID_FIELD_NUMBER = 4
}
