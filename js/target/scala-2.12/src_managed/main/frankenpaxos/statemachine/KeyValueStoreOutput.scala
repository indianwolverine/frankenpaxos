// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.statemachine

@SerialVersionUID(0L)
final case class KeyValueStoreOutput(
    reply: frankenpaxos.statemachine.KeyValueStoreOutput.Reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[KeyValueStoreOutput] with scalapb.lenses.Updatable[KeyValueStoreOutput] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (reply.getReply.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reply.getReply.get.serializedSize) + reply.getReply.get.serializedSize }
      if (reply.setReply.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reply.setReply.get.serializedSize) + reply.setReply.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      reply.getReply.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      reply.setReply.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.statemachine.KeyValueStoreOutput = {
      var __reply = this.reply
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.GetReply(_root_.scalapb.LiteParser.readMessage(_input__, reply.getReply.getOrElse(frankenpaxos.statemachine.GetReply.defaultInstance)))
          case 18 =>
            __reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.SetReply(_root_.scalapb.LiteParser.readMessage(_input__, reply.setReply.getOrElse(frankenpaxos.statemachine.SetReply.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.statemachine.KeyValueStoreOutput(
          reply = __reply
      )
    }
    def getGetReply: frankenpaxos.statemachine.GetReply = reply.getReply.getOrElse(frankenpaxos.statemachine.GetReply.defaultInstance)
    def withGetReply(__v: frankenpaxos.statemachine.GetReply): KeyValueStoreOutput = copy(reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.GetReply(__v))
    def getSetReply: frankenpaxos.statemachine.SetReply = reply.setReply.getOrElse(frankenpaxos.statemachine.SetReply.defaultInstance)
    def withSetReply(__v: frankenpaxos.statemachine.SetReply): KeyValueStoreOutput = copy(reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.SetReply(__v))
    def clearReply: KeyValueStoreOutput = copy(reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.Empty)
    def withReply(__v: frankenpaxos.statemachine.KeyValueStoreOutput.Reply): KeyValueStoreOutput = copy(reply = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => reply.getReply.orNull
        case 2 => reply.setReply.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => reply.getReply.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => reply.setReply.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.statemachine.KeyValueStoreOutput
}

object KeyValueStoreOutput extends scalapb.GeneratedMessageCompanion[frankenpaxos.statemachine.KeyValueStoreOutput] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.statemachine.KeyValueStoreOutput] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.statemachine.KeyValueStoreOutput = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.statemachine.KeyValueStoreOutput(
      reply = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.statemachine.GetReply]].map(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.GetReply)
    .orElse[frankenpaxos.statemachine.KeyValueStoreOutput.Reply](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.statemachine.SetReply]].map(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.SetReply))
    .getOrElse(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.statemachine.KeyValueStoreOutput] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.statemachine.KeyValueStoreOutput(
        reply = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.statemachine.GetReply]]).map(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.GetReply)
    .orElse[frankenpaxos.statemachine.KeyValueStoreOutput.Reply](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.statemachine.SetReply]]).map(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.SetReply))
    .getOrElse(frankenpaxos.statemachine.KeyValueStoreOutput.Reply.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = KeyValueStoreProtoCompanion.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = KeyValueStoreProtoCompanion.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.statemachine.GetReply
      case 2 => __out = frankenpaxos.statemachine.SetReply
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.statemachine.KeyValueStoreOutput(
  )
  sealed trait Reply extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isGetReply: _root_.scala.Boolean = false
    def isSetReply: _root_.scala.Boolean = false
    def getReply: scala.Option[frankenpaxos.statemachine.GetReply] = None
    def setReply: scala.Option[frankenpaxos.statemachine.SetReply] = None
  }
  object Reply extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.statemachine.KeyValueStoreOutput.Reply {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class GetReply(value: frankenpaxos.statemachine.GetReply) extends frankenpaxos.statemachine.KeyValueStoreOutput.Reply {
      type ValueType = frankenpaxos.statemachine.GetReply
      override def isGetReply: _root_.scala.Boolean = true
      override def getReply: scala.Option[frankenpaxos.statemachine.GetReply] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class SetReply(value: frankenpaxos.statemachine.SetReply) extends frankenpaxos.statemachine.KeyValueStoreOutput.Reply {
      type ValueType = frankenpaxos.statemachine.SetReply
      override def isSetReply: _root_.scala.Boolean = true
      override def setReply: scala.Option[frankenpaxos.statemachine.SetReply] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class KeyValueStoreOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.statemachine.KeyValueStoreOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.statemachine.KeyValueStoreOutput](_l) {
    def getReply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.statemachine.GetReply] = field(_.getGetReply)((c_, f_) => c_.copy(reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.GetReply(f_)))
    def setReply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.statemachine.SetReply] = field(_.getSetReply)((c_, f_) => c_.copy(reply = frankenpaxos.statemachine.KeyValueStoreOutput.Reply.SetReply(f_)))
    def reply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.statemachine.KeyValueStoreOutput.Reply] = field(_.reply)((c_, f_) => c_.copy(reply = f_))
  }
  final val GET_REPLY_FIELD_NUMBER = 1
  final val SET_REPLY_FIELD_NUMBER = 2
}
