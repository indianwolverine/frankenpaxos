// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.matchmakermultipaxos

@SerialVersionUID(0L)
final case class MatchmakerInbound(
    request: frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[MatchmakerInbound] with scalapb.lenses.Updatable[MatchmakerInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.matchRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchRequest.get.serializedSize) + request.matchRequest.get.serializedSize }
      if (request.garbageCollect.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.garbageCollect.get.serializedSize) + request.garbageCollect.get.serializedSize }
      if (request.stop.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.stop.get.serializedSize) + request.stop.get.serializedSize }
      if (request.bootstrap.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.bootstrap.get.serializedSize) + request.bootstrap.get.serializedSize }
      if (request.matchPhase1A.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchPhase1A.get.serializedSize) + request.matchPhase1A.get.serializedSize }
      if (request.matchPhase2A.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchPhase2A.get.serializedSize) + request.matchPhase2A.get.serializedSize }
      if (request.matchChosen.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchChosen.get.serializedSize) + request.matchChosen.get.serializedSize }
      if (request.die.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.die.get.serializedSize) + request.die.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.matchRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.garbageCollect.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.stop.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.bootstrap.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchPhase1A.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchPhase2A.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchChosen.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.die.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.matchmakermultipaxos.MatchmakerInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.matchRequest.getOrElse(frankenpaxos.matchmakermultipaxos.MatchRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.GarbageCollect(_root_.scalapb.LiteParser.readMessage(_input__, request.garbageCollect.getOrElse(frankenpaxos.matchmakermultipaxos.GarbageCollect.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Stop(_root_.scalapb.LiteParser.readMessage(_input__, request.stop.getOrElse(frankenpaxos.matchmakermultipaxos.Stop.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Bootstrap(_root_.scalapb.LiteParser.readMessage(_input__, request.bootstrap.getOrElse(frankenpaxos.matchmakermultipaxos.Bootstrap.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase1A(_root_.scalapb.LiteParser.readMessage(_input__, request.matchPhase1A.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase1a.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase2A(_root_.scalapb.LiteParser.readMessage(_input__, request.matchPhase2A.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase2a.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchChosen(_root_.scalapb.LiteParser.readMessage(_input__, request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Die(_root_.scalapb.LiteParser.readMessage(_input__, request.die.getOrElse(frankenpaxos.matchmakermultipaxos.Die.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.matchmakermultipaxos.MatchmakerInbound(
          request = __request
      )
    }
    def getMatchRequest: frankenpaxos.matchmakermultipaxos.MatchRequest = request.matchRequest.getOrElse(frankenpaxos.matchmakermultipaxos.MatchRequest.defaultInstance)
    def withMatchRequest(__v: frankenpaxos.matchmakermultipaxos.MatchRequest): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchRequest(__v))
    def getGarbageCollect: frankenpaxos.matchmakermultipaxos.GarbageCollect = request.garbageCollect.getOrElse(frankenpaxos.matchmakermultipaxos.GarbageCollect.defaultInstance)
    def withGarbageCollect(__v: frankenpaxos.matchmakermultipaxos.GarbageCollect): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.GarbageCollect(__v))
    def getStop: frankenpaxos.matchmakermultipaxos.Stop = request.stop.getOrElse(frankenpaxos.matchmakermultipaxos.Stop.defaultInstance)
    def withStop(__v: frankenpaxos.matchmakermultipaxos.Stop): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Stop(__v))
    def getBootstrap: frankenpaxos.matchmakermultipaxos.Bootstrap = request.bootstrap.getOrElse(frankenpaxos.matchmakermultipaxos.Bootstrap.defaultInstance)
    def withBootstrap(__v: frankenpaxos.matchmakermultipaxos.Bootstrap): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Bootstrap(__v))
    def getMatchPhase1A: frankenpaxos.matchmakermultipaxos.MatchPhase1a = request.matchPhase1A.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase1a.defaultInstance)
    def withMatchPhase1A(__v: frankenpaxos.matchmakermultipaxos.MatchPhase1a): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase1A(__v))
    def getMatchPhase2A: frankenpaxos.matchmakermultipaxos.MatchPhase2a = request.matchPhase2A.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase2a.defaultInstance)
    def withMatchPhase2A(__v: frankenpaxos.matchmakermultipaxos.MatchPhase2a): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase2A(__v))
    def getMatchChosen: frankenpaxos.matchmakermultipaxos.MatchChosen = request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)
    def withMatchChosen(__v: frankenpaxos.matchmakermultipaxos.MatchChosen): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchChosen(__v))
    def getDie: frankenpaxos.matchmakermultipaxos.Die = request.die.getOrElse(frankenpaxos.matchmakermultipaxos.Die.defaultInstance)
    def withDie(__v: frankenpaxos.matchmakermultipaxos.Die): MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Die(__v))
    def clearRequest: MatchmakerInbound = copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request): MatchmakerInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.matchRequest.orNull
        case 2 => request.garbageCollect.orNull
        case 3 => request.stop.orNull
        case 4 => request.bootstrap.orNull
        case 5 => request.matchPhase1A.orNull
        case 6 => request.matchPhase2A.orNull
        case 7 => request.matchChosen.orNull
        case 8 => request.die.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.matchRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.garbageCollect.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.stop.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.bootstrap.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.matchPhase1A.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.matchPhase2A.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.matchChosen.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.die.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.matchmakermultipaxos.MatchmakerInbound
}

object MatchmakerInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.MatchmakerInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.MatchmakerInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.matchmakermultipaxos.MatchmakerInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.matchmakermultipaxos.MatchmakerInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchRequest]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchRequest)
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollect]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.GarbageCollect))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Stop]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Stop))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Bootstrap]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Bootstrap))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1a]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase1A))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2a]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase2A))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Die]].map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Die))
    .getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.matchmakermultipaxos.MatchmakerInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.matchmakermultipaxos.MatchmakerInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchRequest]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchRequest)
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollect]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.GarbageCollect))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Stop]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Stop))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Bootstrap]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Bootstrap))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1a]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase1A))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2a]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase2A))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Die]]).map(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Die))
    .getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MatchmakerMultiPaxosProto.javaDescriptor.getMessageTypes.get(48)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MatchmakerMultiPaxosProto.scalaDescriptor.messages(48)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.matchmakermultipaxos.MatchRequest
      case 2 => __out = frankenpaxos.matchmakermultipaxos.GarbageCollect
      case 3 => __out = frankenpaxos.matchmakermultipaxos.Stop
      case 4 => __out = frankenpaxos.matchmakermultipaxos.Bootstrap
      case 5 => __out = frankenpaxos.matchmakermultipaxos.MatchPhase1a
      case 6 => __out = frankenpaxos.matchmakermultipaxos.MatchPhase2a
      case 7 => __out = frankenpaxos.matchmakermultipaxos.MatchChosen
      case 8 => __out = frankenpaxos.matchmakermultipaxos.Die
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.matchmakermultipaxos.MatchmakerInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isMatchRequest: _root_.scala.Boolean = false
    def isGarbageCollect: _root_.scala.Boolean = false
    def isStop: _root_.scala.Boolean = false
    def isBootstrap: _root_.scala.Boolean = false
    def isMatchPhase1A: _root_.scala.Boolean = false
    def isMatchPhase2A: _root_.scala.Boolean = false
    def isMatchChosen: _root_.scala.Boolean = false
    def isDie: _root_.scala.Boolean = false
    def matchRequest: scala.Option[frankenpaxos.matchmakermultipaxos.MatchRequest] = None
    def garbageCollect: scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollect] = None
    def stop: scala.Option[frankenpaxos.matchmakermultipaxos.Stop] = None
    def bootstrap: scala.Option[frankenpaxos.matchmakermultipaxos.Bootstrap] = None
    def matchPhase1A: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1a] = None
    def matchPhase2A: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2a] = None
    def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = None
    def die: scala.Option[frankenpaxos.matchmakermultipaxos.Die] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class MatchRequest(value: frankenpaxos.matchmakermultipaxos.MatchRequest) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchRequest
      override def isMatchRequest: _root_.scala.Boolean = true
      override def matchRequest: scala.Option[frankenpaxos.matchmakermultipaxos.MatchRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class GarbageCollect(value: frankenpaxos.matchmakermultipaxos.GarbageCollect) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.GarbageCollect
      override def isGarbageCollect: _root_.scala.Boolean = true
      override def garbageCollect: scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollect] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Stop(value: frankenpaxos.matchmakermultipaxos.Stop) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Stop
      override def isStop: _root_.scala.Boolean = true
      override def stop: scala.Option[frankenpaxos.matchmakermultipaxos.Stop] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Bootstrap(value: frankenpaxos.matchmakermultipaxos.Bootstrap) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Bootstrap
      override def isBootstrap: _root_.scala.Boolean = true
      override def bootstrap: scala.Option[frankenpaxos.matchmakermultipaxos.Bootstrap] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class MatchPhase1A(value: frankenpaxos.matchmakermultipaxos.MatchPhase1a) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchPhase1a
      override def isMatchPhase1A: _root_.scala.Boolean = true
      override def matchPhase1A: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1a] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class MatchPhase2A(value: frankenpaxos.matchmakermultipaxos.MatchPhase2a) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchPhase2a
      override def isMatchPhase2A: _root_.scala.Boolean = true
      override def matchPhase2A: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2a] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class MatchChosen(value: frankenpaxos.matchmakermultipaxos.MatchChosen) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchChosen
      override def isMatchChosen: _root_.scala.Boolean = true
      override def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Die(value: frankenpaxos.matchmakermultipaxos.Die) extends frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Die
      override def isDie: _root_.scala.Boolean = true
      override def die: scala.Option[frankenpaxos.matchmakermultipaxos.Die] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class MatchmakerInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerInbound](_l) {
    def matchRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchRequest] = field(_.getMatchRequest)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchRequest(f_)))
    def garbageCollect: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.GarbageCollect] = field(_.getGarbageCollect)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.GarbageCollect(f_)))
    def stop: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Stop] = field(_.getStop)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Stop(f_)))
    def bootstrap: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Bootstrap] = field(_.getBootstrap)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Bootstrap(f_)))
    def matchPhase1A: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchPhase1a] = field(_.getMatchPhase1A)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase1A(f_)))
    def matchPhase2A: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchPhase2a] = field(_.getMatchPhase2A)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchPhase2A(f_)))
    def matchChosen: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchChosen] = field(_.getMatchChosen)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.MatchChosen(f_)))
    def die: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Die] = field(_.getDie)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request.Die(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val MATCH_REQUEST_FIELD_NUMBER = 1
  final val GARBAGE_COLLECT_FIELD_NUMBER = 2
  final val STOP_FIELD_NUMBER = 3
  final val BOOTSTRAP_FIELD_NUMBER = 4
  final val MATCH_PHASE1A_FIELD_NUMBER = 5
  final val MATCH_PHASE2A_FIELD_NUMBER = 6
  final val MATCH_CHOSEN_FIELD_NUMBER = 7
  final val DIE_FIELD_NUMBER = 8
}
