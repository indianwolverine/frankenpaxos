// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.matchmakermultipaxos

@SerialVersionUID(0L)
final case class DriverWorkloadProto(
    value: frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[DriverWorkloadProto] with scalapb.lenses.Updatable[DriverWorkloadProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (value.doNothing.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.doNothing.get.serializedSize) + value.doNothing.get.serializedSize }
      if (value.repeatedLeaderReconfiguration.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.repeatedLeaderReconfiguration.get.serializedSize) + value.repeatedLeaderReconfiguration.get.serializedSize }
      if (value.leaderReconfiguration.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.leaderReconfiguration.get.serializedSize) + value.leaderReconfiguration.get.serializedSize }
      if (value.matchmakerReconfiguration.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.matchmakerReconfiguration.get.serializedSize) + value.matchmakerReconfiguration.get.serializedSize }
      if (value.leaderFailure.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.leaderFailure.get.serializedSize) + value.leaderFailure.get.serializedSize }
      if (value.chaos.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.chaos.get.serializedSize) + value.chaos.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.doNothing.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.repeatedLeaderReconfiguration.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.leaderReconfiguration.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.matchmakerReconfiguration.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.leaderFailure.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.chaos.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.matchmakermultipaxos.DriverWorkloadProto = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.DoNothing(_root_.scalapb.LiteParser.readMessage(_input__, value.doNothing.getOrElse(frankenpaxos.matchmakermultipaxos.DoNothingProto.defaultInstance)))
          case 18 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.RepeatedLeaderReconfiguration(_root_.scalapb.LiteParser.readMessage(_input__, value.repeatedLeaderReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto.defaultInstance)))
          case 26 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderReconfiguration(_root_.scalapb.LiteParser.readMessage(_input__, value.leaderReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto.defaultInstance)))
          case 34 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.MatchmakerReconfiguration(_root_.scalapb.LiteParser.readMessage(_input__, value.matchmakerReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto.defaultInstance)))
          case 42 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderFailure(_root_.scalapb.LiteParser.readMessage(_input__, value.leaderFailure.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderFailureProto.defaultInstance)))
          case 50 =>
            __value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Chaos(_root_.scalapb.LiteParser.readMessage(_input__, value.chaos.getOrElse(frankenpaxos.matchmakermultipaxos.ChaosProto.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.matchmakermultipaxos.DriverWorkloadProto(
          value = __value
      )
    }
    def getDoNothing: frankenpaxos.matchmakermultipaxos.DoNothingProto = value.doNothing.getOrElse(frankenpaxos.matchmakermultipaxos.DoNothingProto.defaultInstance)
    def withDoNothing(__v: frankenpaxos.matchmakermultipaxos.DoNothingProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.DoNothing(__v))
    def getRepeatedLeaderReconfiguration: frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto = value.repeatedLeaderReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto.defaultInstance)
    def withRepeatedLeaderReconfiguration(__v: frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.RepeatedLeaderReconfiguration(__v))
    def getLeaderReconfiguration: frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto = value.leaderReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto.defaultInstance)
    def withLeaderReconfiguration(__v: frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderReconfiguration(__v))
    def getMatchmakerReconfiguration: frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto = value.matchmakerReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto.defaultInstance)
    def withMatchmakerReconfiguration(__v: frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.MatchmakerReconfiguration(__v))
    def getLeaderFailure: frankenpaxos.matchmakermultipaxos.LeaderFailureProto = value.leaderFailure.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderFailureProto.defaultInstance)
    def withLeaderFailure(__v: frankenpaxos.matchmakermultipaxos.LeaderFailureProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderFailure(__v))
    def getChaos: frankenpaxos.matchmakermultipaxos.ChaosProto = value.chaos.getOrElse(frankenpaxos.matchmakermultipaxos.ChaosProto.defaultInstance)
    def withChaos(__v: frankenpaxos.matchmakermultipaxos.ChaosProto): DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Chaos(__v))
    def clearValue: DriverWorkloadProto = copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Empty)
    def withValue(__v: frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value): DriverWorkloadProto = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.doNothing.orNull
        case 2 => value.repeatedLeaderReconfiguration.orNull
        case 3 => value.leaderReconfiguration.orNull
        case 4 => value.matchmakerReconfiguration.orNull
        case 5 => value.leaderFailure.orNull
        case 6 => value.chaos.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.doNothing.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.repeatedLeaderReconfiguration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.leaderReconfiguration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => value.matchmakerReconfiguration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => value.leaderFailure.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => value.chaos.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto
}

object DriverWorkloadProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.matchmakermultipaxos.DriverWorkloadProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.matchmakermultipaxos.DriverWorkloadProto(
      value = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.DoNothingProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.DoNothing)
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.RepeatedLeaderReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.MatchmakerReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderFailureProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderFailure))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ChaosProto]].map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Chaos))
    .getOrElse(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.matchmakermultipaxos.DriverWorkloadProto(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.DoNothingProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.DoNothing)
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.RepeatedLeaderReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.MatchmakerReconfiguration))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderFailureProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderFailure))
    .orElse[frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ChaosProto]]).map(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Chaos))
    .getOrElse(frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DriverWorkloadProtoCompanion.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DriverWorkloadProtoCompanion.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.matchmakermultipaxos.DoNothingProto
      case 2 => __out = frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto
      case 3 => __out = frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto
      case 4 => __out = frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto
      case 5 => __out = frankenpaxos.matchmakermultipaxos.LeaderFailureProto
      case 6 => __out = frankenpaxos.matchmakermultipaxos.ChaosProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto(
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isDoNothing: _root_.scala.Boolean = false
    def isRepeatedLeaderReconfiguration: _root_.scala.Boolean = false
    def isLeaderReconfiguration: _root_.scala.Boolean = false
    def isMatchmakerReconfiguration: _root_.scala.Boolean = false
    def isLeaderFailure: _root_.scala.Boolean = false
    def isChaos: _root_.scala.Boolean = false
    def doNothing: scala.Option[frankenpaxos.matchmakermultipaxos.DoNothingProto] = None
    def repeatedLeaderReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto] = None
    def leaderReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto] = None
    def matchmakerReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto] = None
    def leaderFailure: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderFailureProto] = None
    def chaos: scala.Option[frankenpaxos.matchmakermultipaxos.ChaosProto] = None
  }
  object Value extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class DoNothing(value: frankenpaxos.matchmakermultipaxos.DoNothingProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.DoNothingProto
      override def isDoNothing: _root_.scala.Boolean = true
      override def doNothing: scala.Option[frankenpaxos.matchmakermultipaxos.DoNothingProto] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class RepeatedLeaderReconfiguration(value: frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto
      override def isRepeatedLeaderReconfiguration: _root_.scala.Boolean = true
      override def repeatedLeaderReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class LeaderReconfiguration(value: frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto
      override def isLeaderReconfiguration: _root_.scala.Boolean = true
      override def leaderReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class MatchmakerReconfiguration(value: frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto
      override def isMatchmakerReconfiguration: _root_.scala.Boolean = true
      override def matchmakerReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class LeaderFailure(value: frankenpaxos.matchmakermultipaxos.LeaderFailureProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.LeaderFailureProto
      override def isLeaderFailure: _root_.scala.Boolean = true
      override def leaderFailure: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderFailureProto] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Chaos(value: frankenpaxos.matchmakermultipaxos.ChaosProto) extends frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value {
      type ValueType = frankenpaxos.matchmakermultipaxos.ChaosProto
      override def isChaos: _root_.scala.Boolean = true
      override def chaos: scala.Option[frankenpaxos.matchmakermultipaxos.ChaosProto] = Some(value)
      override def number: _root_.scala.Int = 6
    }
  }
  implicit class DriverWorkloadProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.DriverWorkloadProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.matchmakermultipaxos.DriverWorkloadProto](_l) {
    def doNothing: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.DoNothingProto] = field(_.getDoNothing)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.DoNothing(f_)))
    def repeatedLeaderReconfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.RepeatedLeaderReconfigurationProto] = field(_.getRepeatedLeaderReconfiguration)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.RepeatedLeaderReconfiguration(f_)))
    def leaderReconfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderReconfigurationProto] = field(_.getLeaderReconfiguration)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderReconfiguration(f_)))
    def matchmakerReconfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerReconfigurationProto] = field(_.getMatchmakerReconfiguration)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.MatchmakerReconfiguration(f_)))
    def leaderFailure: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderFailureProto] = field(_.getLeaderFailure)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.LeaderFailure(f_)))
    def chaos: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ChaosProto] = field(_.getChaos)((c_, f_) => c_.copy(value = frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value.Chaos(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.DriverWorkloadProto.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val DO_NOTHING_FIELD_NUMBER = 1
  final val REPEATED_LEADER_RECONFIGURATION_FIELD_NUMBER = 2
  final val LEADER_RECONFIGURATION_FIELD_NUMBER = 3
  final val MATCHMAKER_RECONFIGURATION_FIELD_NUMBER = 4
  final val LEADER_FAILURE_FIELD_NUMBER = 5
  final val CHAOS_FIELD_NUMBER = 6
}
