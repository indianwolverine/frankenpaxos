// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.matchmakermultipaxos

@SerialVersionUID(0L)
final case class ReconfigurerInbound(
    request: frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ReconfigurerInbound] with scalapb.lenses.Updatable[ReconfigurerInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.reconfigure.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.reconfigure.get.serializedSize) + request.reconfigure.get.serializedSize }
      if (request.stopAck.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.stopAck.get.serializedSize) + request.stopAck.get.serializedSize }
      if (request.bootstrapAck.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.bootstrapAck.get.serializedSize) + request.bootstrapAck.get.serializedSize }
      if (request.matchPhase1B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchPhase1B.get.serializedSize) + request.matchPhase1B.get.serializedSize }
      if (request.matchPhase2B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchPhase2B.get.serializedSize) + request.matchPhase2B.get.serializedSize }
      if (request.matchChosen.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchChosen.get.serializedSize) + request.matchChosen.get.serializedSize }
      if (request.matchNack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchNack.get.serializedSize) + request.matchNack.get.serializedSize }
      if (request.forceMatchmakerReconfiguration.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.forceMatchmakerReconfiguration.get.serializedSize) + request.forceMatchmakerReconfiguration.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.reconfigure.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.stopAck.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.bootstrapAck.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchPhase1B.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchPhase2B.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchChosen.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchNack.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.forceMatchmakerReconfiguration.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.matchmakermultipaxos.ReconfigurerInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Reconfigure(_root_.scalapb.LiteParser.readMessage(_input__, request.reconfigure.getOrElse(frankenpaxos.matchmakermultipaxos.Reconfigure.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.StopAck(_root_.scalapb.LiteParser.readMessage(_input__, request.stopAck.getOrElse(frankenpaxos.matchmakermultipaxos.StopAck.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.BootstrapAck(_root_.scalapb.LiteParser.readMessage(_input__, request.bootstrapAck.getOrElse(frankenpaxos.matchmakermultipaxos.BootstrapAck.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase1B(_root_.scalapb.LiteParser.readMessage(_input__, request.matchPhase1B.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase1b.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase2B(_root_.scalapb.LiteParser.readMessage(_input__, request.matchPhase2B.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase2b.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchChosen(_root_.scalapb.LiteParser.readMessage(_input__, request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchNack(_root_.scalapb.LiteParser.readMessage(_input__, request.matchNack.getOrElse(frankenpaxos.matchmakermultipaxos.MatchNack.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.ForceMatchmakerReconfiguration(_root_.scalapb.LiteParser.readMessage(_input__, request.forceMatchmakerReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.matchmakermultipaxos.ReconfigurerInbound(
          request = __request
      )
    }
    def getReconfigure: frankenpaxos.matchmakermultipaxos.Reconfigure = request.reconfigure.getOrElse(frankenpaxos.matchmakermultipaxos.Reconfigure.defaultInstance)
    def withReconfigure(__v: frankenpaxos.matchmakermultipaxos.Reconfigure): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Reconfigure(__v))
    def getStopAck: frankenpaxos.matchmakermultipaxos.StopAck = request.stopAck.getOrElse(frankenpaxos.matchmakermultipaxos.StopAck.defaultInstance)
    def withStopAck(__v: frankenpaxos.matchmakermultipaxos.StopAck): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.StopAck(__v))
    def getBootstrapAck: frankenpaxos.matchmakermultipaxos.BootstrapAck = request.bootstrapAck.getOrElse(frankenpaxos.matchmakermultipaxos.BootstrapAck.defaultInstance)
    def withBootstrapAck(__v: frankenpaxos.matchmakermultipaxos.BootstrapAck): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.BootstrapAck(__v))
    def getMatchPhase1B: frankenpaxos.matchmakermultipaxos.MatchPhase1b = request.matchPhase1B.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase1b.defaultInstance)
    def withMatchPhase1B(__v: frankenpaxos.matchmakermultipaxos.MatchPhase1b): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase1B(__v))
    def getMatchPhase2B: frankenpaxos.matchmakermultipaxos.MatchPhase2b = request.matchPhase2B.getOrElse(frankenpaxos.matchmakermultipaxos.MatchPhase2b.defaultInstance)
    def withMatchPhase2B(__v: frankenpaxos.matchmakermultipaxos.MatchPhase2b): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase2B(__v))
    def getMatchChosen: frankenpaxos.matchmakermultipaxos.MatchChosen = request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)
    def withMatchChosen(__v: frankenpaxos.matchmakermultipaxos.MatchChosen): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchChosen(__v))
    def getMatchNack: frankenpaxos.matchmakermultipaxos.MatchNack = request.matchNack.getOrElse(frankenpaxos.matchmakermultipaxos.MatchNack.defaultInstance)
    def withMatchNack(__v: frankenpaxos.matchmakermultipaxos.MatchNack): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchNack(__v))
    def getForceMatchmakerReconfiguration: frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration = request.forceMatchmakerReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration.defaultInstance)
    def withForceMatchmakerReconfiguration(__v: frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration): ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.ForceMatchmakerReconfiguration(__v))
    def clearRequest: ReconfigurerInbound = copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request): ReconfigurerInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.reconfigure.orNull
        case 2 => request.stopAck.orNull
        case 3 => request.bootstrapAck.orNull
        case 4 => request.matchPhase1B.orNull
        case 5 => request.matchPhase2B.orNull
        case 6 => request.matchChosen.orNull
        case 7 => request.matchNack.orNull
        case 8 => request.forceMatchmakerReconfiguration.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.reconfigure.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.stopAck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.bootstrapAck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.matchPhase1B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.matchPhase2B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.matchChosen.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.matchNack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.forceMatchmakerReconfiguration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound
}

object ReconfigurerInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.matchmakermultipaxos.ReconfigurerInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.matchmakermultipaxos.ReconfigurerInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Reconfigure]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Reconfigure)
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.StopAck]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.StopAck))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.BootstrapAck]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.BootstrapAck))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1b]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase1B))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2b]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase2B))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchNack]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchNack))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration]].map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.ForceMatchmakerReconfiguration))
    .getOrElse(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.matchmakermultipaxos.ReconfigurerInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Reconfigure]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Reconfigure)
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.StopAck]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.StopAck))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.BootstrapAck]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.BootstrapAck))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1b]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase1B))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2b]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase2B))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchNack]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchNack))
    .orElse[frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration]]).map(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.ForceMatchmakerReconfiguration))
    .getOrElse(frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MatchmakerMultiPaxosProto.javaDescriptor.getMessageTypes.get(47)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MatchmakerMultiPaxosProto.scalaDescriptor.messages(47)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.matchmakermultipaxos.Reconfigure
      case 2 => __out = frankenpaxos.matchmakermultipaxos.StopAck
      case 3 => __out = frankenpaxos.matchmakermultipaxos.BootstrapAck
      case 4 => __out = frankenpaxos.matchmakermultipaxos.MatchPhase1b
      case 5 => __out = frankenpaxos.matchmakermultipaxos.MatchPhase2b
      case 6 => __out = frankenpaxos.matchmakermultipaxos.MatchChosen
      case 7 => __out = frankenpaxos.matchmakermultipaxos.MatchNack
      case 8 => __out = frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isReconfigure: _root_.scala.Boolean = false
    def isStopAck: _root_.scala.Boolean = false
    def isBootstrapAck: _root_.scala.Boolean = false
    def isMatchPhase1B: _root_.scala.Boolean = false
    def isMatchPhase2B: _root_.scala.Boolean = false
    def isMatchChosen: _root_.scala.Boolean = false
    def isMatchNack: _root_.scala.Boolean = false
    def isForceMatchmakerReconfiguration: _root_.scala.Boolean = false
    def reconfigure: scala.Option[frankenpaxos.matchmakermultipaxos.Reconfigure] = None
    def stopAck: scala.Option[frankenpaxos.matchmakermultipaxos.StopAck] = None
    def bootstrapAck: scala.Option[frankenpaxos.matchmakermultipaxos.BootstrapAck] = None
    def matchPhase1B: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1b] = None
    def matchPhase2B: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2b] = None
    def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = None
    def matchNack: scala.Option[frankenpaxos.matchmakermultipaxos.MatchNack] = None
    def forceMatchmakerReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Reconfigure(value: frankenpaxos.matchmakermultipaxos.Reconfigure) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Reconfigure
      override def isReconfigure: _root_.scala.Boolean = true
      override def reconfigure: scala.Option[frankenpaxos.matchmakermultipaxos.Reconfigure] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class StopAck(value: frankenpaxos.matchmakermultipaxos.StopAck) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.StopAck
      override def isStopAck: _root_.scala.Boolean = true
      override def stopAck: scala.Option[frankenpaxos.matchmakermultipaxos.StopAck] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class BootstrapAck(value: frankenpaxos.matchmakermultipaxos.BootstrapAck) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.BootstrapAck
      override def isBootstrapAck: _root_.scala.Boolean = true
      override def bootstrapAck: scala.Option[frankenpaxos.matchmakermultipaxos.BootstrapAck] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class MatchPhase1B(value: frankenpaxos.matchmakermultipaxos.MatchPhase1b) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchPhase1b
      override def isMatchPhase1B: _root_.scala.Boolean = true
      override def matchPhase1B: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase1b] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class MatchPhase2B(value: frankenpaxos.matchmakermultipaxos.MatchPhase2b) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchPhase2b
      override def isMatchPhase2B: _root_.scala.Boolean = true
      override def matchPhase2B: scala.Option[frankenpaxos.matchmakermultipaxos.MatchPhase2b] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class MatchChosen(value: frankenpaxos.matchmakermultipaxos.MatchChosen) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchChosen
      override def isMatchChosen: _root_.scala.Boolean = true
      override def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class MatchNack(value: frankenpaxos.matchmakermultipaxos.MatchNack) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchNack
      override def isMatchNack: _root_.scala.Boolean = true
      override def matchNack: scala.Option[frankenpaxos.matchmakermultipaxos.MatchNack] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class ForceMatchmakerReconfiguration(value: frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration) extends frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration
      override def isForceMatchmakerReconfiguration: _root_.scala.Boolean = true
      override def forceMatchmakerReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class ReconfigurerInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ReconfigurerInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.matchmakermultipaxos.ReconfigurerInbound](_l) {
    def reconfigure: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Reconfigure] = field(_.getReconfigure)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.Reconfigure(f_)))
    def stopAck: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.StopAck] = field(_.getStopAck)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.StopAck(f_)))
    def bootstrapAck: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.BootstrapAck] = field(_.getBootstrapAck)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.BootstrapAck(f_)))
    def matchPhase1B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchPhase1b] = field(_.getMatchPhase1B)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase1B(f_)))
    def matchPhase2B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchPhase2b] = field(_.getMatchPhase2B)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchPhase2B(f_)))
    def matchChosen: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchChosen] = field(_.getMatchChosen)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchChosen(f_)))
    def matchNack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchNack] = field(_.getMatchNack)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.MatchNack(f_)))
    def forceMatchmakerReconfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ForceMatchmakerReconfiguration] = field(_.getForceMatchmakerReconfiguration)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request.ForceMatchmakerReconfiguration(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ReconfigurerInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val RECONFIGURE_FIELD_NUMBER = 1
  final val STOP_ACK_FIELD_NUMBER = 2
  final val BOOTSTRAP_ACK_FIELD_NUMBER = 3
  final val MATCH_PHASE1B_FIELD_NUMBER = 4
  final val MATCH_PHASE2B_FIELD_NUMBER = 5
  final val MATCH_CHOSEN_FIELD_NUMBER = 6
  final val MATCH_NACK_FIELD_NUMBER = 7
  final val FORCE_MATCHMAKER_RECONFIGURATION_FIELD_NUMBER = 8
}
