// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.matchmakermultipaxos

/** Normal case operations. /////////////////////////////////////////////////////
  */
@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class MatchRequest(
    matchmakerConfiguration: frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration,
    configuration: frankenpaxos.matchmakermultipaxos.Configuration
    ) extends scalapb.GeneratedMessage with scalapb.Message[MatchRequest] with scalapb.lenses.Updatable[MatchRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(matchmakerConfiguration.serializedSize) + matchmakerConfiguration.serializedSize
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(configuration.serializedSize) + configuration.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(matchmakerConfiguration.serializedSize)
      matchmakerConfiguration.writeTo(_output__)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(configuration.serializedSize)
      configuration.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.matchmakermultipaxos.MatchRequest = {
      var __matchmakerConfiguration = this.matchmakerConfiguration
      var __configuration = this.configuration
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __matchmakerConfiguration = _root_.scalapb.LiteParser.readMessage(_input__, __matchmakerConfiguration)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __configuration = _root_.scalapb.LiteParser.readMessage(_input__, __configuration)
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.matchmakermultipaxos.MatchRequest(
          matchmakerConfiguration = __matchmakerConfiguration,
          configuration = __configuration
      )
    }
    def withMatchmakerConfiguration(__v: frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration): MatchRequest = copy(matchmakerConfiguration = __v)
    def withConfiguration(__v: frankenpaxos.matchmakermultipaxos.Configuration): MatchRequest = copy(configuration = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => matchmakerConfiguration
        case 2 => configuration
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => matchmakerConfiguration.toPMessage
        case 2 => configuration.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.matchmakermultipaxos.MatchRequest
}

object MatchRequest extends scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.MatchRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.MatchRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.matchmakermultipaxos.MatchRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.matchmakermultipaxos.MatchRequest(
      __fieldsMap(__fields.get(0)).asInstanceOf[frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration],
      __fieldsMap(__fields.get(1)).asInstanceOf[frankenpaxos.matchmakermultipaxos.Configuration]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.matchmakermultipaxos.MatchRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.matchmakermultipaxos.MatchRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[frankenpaxos.matchmakermultipaxos.Configuration]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MatchmakerMultiPaxosProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MatchmakerMultiPaxosProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration
      case 2 => __out = frankenpaxos.matchmakermultipaxos.Configuration
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.matchmakermultipaxos.MatchRequest(
    matchmakerConfiguration = frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration.defaultInstance,
    configuration = frankenpaxos.matchmakermultipaxos.Configuration.defaultInstance
  )
  implicit class MatchRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchRequest](_l) {
    def matchmakerConfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerConfiguration] = field(_.matchmakerConfiguration)((c_, f_) => c_.copy(matchmakerConfiguration = f_))
    def configuration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Configuration] = field(_.configuration)((c_, f_) => c_.copy(configuration = f_))
  }
  final val MATCHMAKER_CONFIGURATION_FIELD_NUMBER = 1
  final val CONFIGURATION_FIELD_NUMBER = 2
}
