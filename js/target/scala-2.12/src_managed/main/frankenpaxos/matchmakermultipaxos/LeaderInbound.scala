// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.matchmakermultipaxos

@SerialVersionUID(0L)
final case class LeaderInbound(
    request: frankenpaxos.matchmakermultipaxos.LeaderInbound.Request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[LeaderInbound] with scalapb.lenses.Updatable[LeaderInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.matchReply.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchReply.get.serializedSize) + request.matchReply.get.serializedSize }
      if (request.phase1B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase1B.get.serializedSize) + request.phase1B.get.serializedSize }
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.phase2B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2B.get.serializedSize) + request.phase2B.get.serializedSize }
      if (request.leaderInfoRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.leaderInfoRequest.get.serializedSize) + request.leaderInfoRequest.get.serializedSize }
      if (request.chosenWatermark.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.chosenWatermark.get.serializedSize) + request.chosenWatermark.get.serializedSize }
      if (request.matchmakerNack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchmakerNack.get.serializedSize) + request.matchmakerNack.get.serializedSize }
      if (request.acceptorNack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.acceptorNack.get.serializedSize) + request.acceptorNack.get.serializedSize }
      if (request.recover.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.recover.get.serializedSize) + request.recover.get.serializedSize }
      if (request.executedWatermarkReply.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.executedWatermarkReply.get.serializedSize) + request.executedWatermarkReply.get.serializedSize }
      if (request.persistedAck.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.persistedAck.get.serializedSize) + request.persistedAck.get.serializedSize }
      if (request.garbageCollectAck.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.garbageCollectAck.get.serializedSize) + request.garbageCollectAck.get.serializedSize }
      if (request.stopped.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.stopped.get.serializedSize) + request.stopped.get.serializedSize }
      if (request.matchChosen.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.matchChosen.get.serializedSize) + request.matchChosen.get.serializedSize }
      if (request.die.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.die.get.serializedSize) + request.die.get.serializedSize }
      if (request.forceReconfiguration.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.forceReconfiguration.get.serializedSize) + request.forceReconfiguration.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.matchReply.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase1B.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.clientRequest.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2B.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.leaderInfoRequest.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.chosenWatermark.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchmakerNack.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.acceptorNack.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.recover.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.executedWatermarkReply.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.persistedAck.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.garbageCollectAck.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.stopped.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.matchChosen.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.die.foreach { __v =>
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.forceReconfiguration.foreach { __v =>
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.matchmakermultipaxos.LeaderInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchReply(_root_.scalapb.LiteParser.readMessage(_input__, request.matchReply.getOrElse(frankenpaxos.matchmakermultipaxos.MatchReply.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase1B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase1B.getOrElse(frankenpaxos.matchmakermultipaxos.Phase1b.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.matchmakermultipaxos.ClientRequest.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase2B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2B.getOrElse(frankenpaxos.matchmakermultipaxos.Phase2b.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.LeaderInfoRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.leaderInfoRequest.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderInfoRequest.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ChosenWatermark(_root_.scalapb.LiteParser.readMessage(_input__, request.chosenWatermark.getOrElse(frankenpaxos.matchmakermultipaxos.ChosenWatermark.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchmakerNack(_root_.scalapb.LiteParser.readMessage(_input__, request.matchmakerNack.getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerNack.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.AcceptorNack(_root_.scalapb.LiteParser.readMessage(_input__, request.acceptorNack.getOrElse(frankenpaxos.matchmakermultipaxos.AcceptorNack.defaultInstance)))
          case 74 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Recover(_root_.scalapb.LiteParser.readMessage(_input__, request.recover.getOrElse(frankenpaxos.matchmakermultipaxos.Recover.defaultInstance)))
          case 82 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ExecutedWatermarkReply(_root_.scalapb.LiteParser.readMessage(_input__, request.executedWatermarkReply.getOrElse(frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply.defaultInstance)))
          case 90 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.PersistedAck(_root_.scalapb.LiteParser.readMessage(_input__, request.persistedAck.getOrElse(frankenpaxos.matchmakermultipaxos.PersistedAck.defaultInstance)))
          case 98 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.GarbageCollectAck(_root_.scalapb.LiteParser.readMessage(_input__, request.garbageCollectAck.getOrElse(frankenpaxos.matchmakermultipaxos.GarbageCollectAck.defaultInstance)))
          case 106 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Stopped(_root_.scalapb.LiteParser.readMessage(_input__, request.stopped.getOrElse(frankenpaxos.matchmakermultipaxos.Stopped.defaultInstance)))
          case 114 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchChosen(_root_.scalapb.LiteParser.readMessage(_input__, request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)))
          case 122 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Die(_root_.scalapb.LiteParser.readMessage(_input__, request.die.getOrElse(frankenpaxos.matchmakermultipaxos.Die.defaultInstance)))
          case 130 =>
            __request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ForceReconfiguration(_root_.scalapb.LiteParser.readMessage(_input__, request.forceReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.ForceReconfiguration.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.matchmakermultipaxos.LeaderInbound(
          request = __request
      )
    }
    def getMatchReply: frankenpaxos.matchmakermultipaxos.MatchReply = request.matchReply.getOrElse(frankenpaxos.matchmakermultipaxos.MatchReply.defaultInstance)
    def withMatchReply(__v: frankenpaxos.matchmakermultipaxos.MatchReply): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchReply(__v))
    def getPhase1B: frankenpaxos.matchmakermultipaxos.Phase1b = request.phase1B.getOrElse(frankenpaxos.matchmakermultipaxos.Phase1b.defaultInstance)
    def withPhase1B(__v: frankenpaxos.matchmakermultipaxos.Phase1b): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase1B(__v))
    def getClientRequest: frankenpaxos.matchmakermultipaxos.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.matchmakermultipaxos.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.matchmakermultipaxos.ClientRequest): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ClientRequest(__v))
    def getPhase2B: frankenpaxos.matchmakermultipaxos.Phase2b = request.phase2B.getOrElse(frankenpaxos.matchmakermultipaxos.Phase2b.defaultInstance)
    def withPhase2B(__v: frankenpaxos.matchmakermultipaxos.Phase2b): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase2B(__v))
    def getLeaderInfoRequest: frankenpaxos.matchmakermultipaxos.LeaderInfoRequest = request.leaderInfoRequest.getOrElse(frankenpaxos.matchmakermultipaxos.LeaderInfoRequest.defaultInstance)
    def withLeaderInfoRequest(__v: frankenpaxos.matchmakermultipaxos.LeaderInfoRequest): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.LeaderInfoRequest(__v))
    def getChosenWatermark: frankenpaxos.matchmakermultipaxos.ChosenWatermark = request.chosenWatermark.getOrElse(frankenpaxos.matchmakermultipaxos.ChosenWatermark.defaultInstance)
    def withChosenWatermark(__v: frankenpaxos.matchmakermultipaxos.ChosenWatermark): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ChosenWatermark(__v))
    def getMatchmakerNack: frankenpaxos.matchmakermultipaxos.MatchmakerNack = request.matchmakerNack.getOrElse(frankenpaxos.matchmakermultipaxos.MatchmakerNack.defaultInstance)
    def withMatchmakerNack(__v: frankenpaxos.matchmakermultipaxos.MatchmakerNack): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchmakerNack(__v))
    def getAcceptorNack: frankenpaxos.matchmakermultipaxos.AcceptorNack = request.acceptorNack.getOrElse(frankenpaxos.matchmakermultipaxos.AcceptorNack.defaultInstance)
    def withAcceptorNack(__v: frankenpaxos.matchmakermultipaxos.AcceptorNack): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.AcceptorNack(__v))
    def getRecover: frankenpaxos.matchmakermultipaxos.Recover = request.recover.getOrElse(frankenpaxos.matchmakermultipaxos.Recover.defaultInstance)
    def withRecover(__v: frankenpaxos.matchmakermultipaxos.Recover): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Recover(__v))
    def getExecutedWatermarkReply: frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply = request.executedWatermarkReply.getOrElse(frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply.defaultInstance)
    def withExecutedWatermarkReply(__v: frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ExecutedWatermarkReply(__v))
    def getPersistedAck: frankenpaxos.matchmakermultipaxos.PersistedAck = request.persistedAck.getOrElse(frankenpaxos.matchmakermultipaxos.PersistedAck.defaultInstance)
    def withPersistedAck(__v: frankenpaxos.matchmakermultipaxos.PersistedAck): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.PersistedAck(__v))
    def getGarbageCollectAck: frankenpaxos.matchmakermultipaxos.GarbageCollectAck = request.garbageCollectAck.getOrElse(frankenpaxos.matchmakermultipaxos.GarbageCollectAck.defaultInstance)
    def withGarbageCollectAck(__v: frankenpaxos.matchmakermultipaxos.GarbageCollectAck): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.GarbageCollectAck(__v))
    def getStopped: frankenpaxos.matchmakermultipaxos.Stopped = request.stopped.getOrElse(frankenpaxos.matchmakermultipaxos.Stopped.defaultInstance)
    def withStopped(__v: frankenpaxos.matchmakermultipaxos.Stopped): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Stopped(__v))
    def getMatchChosen: frankenpaxos.matchmakermultipaxos.MatchChosen = request.matchChosen.getOrElse(frankenpaxos.matchmakermultipaxos.MatchChosen.defaultInstance)
    def withMatchChosen(__v: frankenpaxos.matchmakermultipaxos.MatchChosen): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchChosen(__v))
    def getDie: frankenpaxos.matchmakermultipaxos.Die = request.die.getOrElse(frankenpaxos.matchmakermultipaxos.Die.defaultInstance)
    def withDie(__v: frankenpaxos.matchmakermultipaxos.Die): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Die(__v))
    def getForceReconfiguration: frankenpaxos.matchmakermultipaxos.ForceReconfiguration = request.forceReconfiguration.getOrElse(frankenpaxos.matchmakermultipaxos.ForceReconfiguration.defaultInstance)
    def withForceReconfiguration(__v: frankenpaxos.matchmakermultipaxos.ForceReconfiguration): LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ForceReconfiguration(__v))
    def clearRequest: LeaderInbound = copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.matchmakermultipaxos.LeaderInbound.Request): LeaderInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.matchReply.orNull
        case 2 => request.phase1B.orNull
        case 3 => request.clientRequest.orNull
        case 4 => request.phase2B.orNull
        case 5 => request.leaderInfoRequest.orNull
        case 6 => request.chosenWatermark.orNull
        case 7 => request.matchmakerNack.orNull
        case 8 => request.acceptorNack.orNull
        case 9 => request.recover.orNull
        case 10 => request.executedWatermarkReply.orNull
        case 11 => request.persistedAck.orNull
        case 12 => request.garbageCollectAck.orNull
        case 13 => request.stopped.orNull
        case 14 => request.matchChosen.orNull
        case 15 => request.die.orNull
        case 16 => request.forceReconfiguration.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.matchReply.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.phase1B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.phase2B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.leaderInfoRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.chosenWatermark.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.matchmakerNack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.acceptorNack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => request.recover.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => request.executedWatermarkReply.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => request.persistedAck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => request.garbageCollectAck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => request.stopped.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => request.matchChosen.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => request.die.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => request.forceReconfiguration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.matchmakermultipaxos.LeaderInbound
}

object LeaderInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.LeaderInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.matchmakermultipaxos.LeaderInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.matchmakermultipaxos.LeaderInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.matchmakermultipaxos.LeaderInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchReply]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchReply)
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Phase1b]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase1B))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ClientRequest]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ClientRequest))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Phase2b]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase2B))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderInfoRequest]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.LeaderInfoRequest))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ChosenWatermark]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ChosenWatermark))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerNack]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchmakerNack))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.AcceptorNack]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.AcceptorNack))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Recover]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Recover))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ExecutedWatermarkReply))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.PersistedAck]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.PersistedAck))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollectAck]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.GarbageCollectAck))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Stopped]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Stopped))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.Die]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Die))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[frankenpaxos.matchmakermultipaxos.ForceReconfiguration]].map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ForceReconfiguration))
    .getOrElse(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.matchmakermultipaxos.LeaderInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.matchmakermultipaxos.LeaderInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchReply]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchReply)
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Phase1b]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase1B))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ClientRequest]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ClientRequest))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Phase2b]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase2B))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.LeaderInfoRequest]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.LeaderInfoRequest))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ChosenWatermark]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ChosenWatermark))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerNack]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchmakerNack))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.AcceptorNack]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.AcceptorNack))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Recover]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Recover))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ExecutedWatermarkReply))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.PersistedAck]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.PersistedAck))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollectAck]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.GarbageCollectAck))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Stopped]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Stopped))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchChosen))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.Die]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Die))
    .orElse[frankenpaxos.matchmakermultipaxos.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[frankenpaxos.matchmakermultipaxos.ForceReconfiguration]]).map(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ForceReconfiguration))
    .getOrElse(frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MatchmakerMultiPaxosProto.javaDescriptor.getMessageTypes.get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MatchmakerMultiPaxosProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.matchmakermultipaxos.MatchReply
      case 2 => __out = frankenpaxos.matchmakermultipaxos.Phase1b
      case 3 => __out = frankenpaxos.matchmakermultipaxos.ClientRequest
      case 4 => __out = frankenpaxos.matchmakermultipaxos.Phase2b
      case 5 => __out = frankenpaxos.matchmakermultipaxos.LeaderInfoRequest
      case 6 => __out = frankenpaxos.matchmakermultipaxos.ChosenWatermark
      case 7 => __out = frankenpaxos.matchmakermultipaxos.MatchmakerNack
      case 8 => __out = frankenpaxos.matchmakermultipaxos.AcceptorNack
      case 9 => __out = frankenpaxos.matchmakermultipaxos.Recover
      case 10 => __out = frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply
      case 11 => __out = frankenpaxos.matchmakermultipaxos.PersistedAck
      case 12 => __out = frankenpaxos.matchmakermultipaxos.GarbageCollectAck
      case 13 => __out = frankenpaxos.matchmakermultipaxos.Stopped
      case 14 => __out = frankenpaxos.matchmakermultipaxos.MatchChosen
      case 15 => __out = frankenpaxos.matchmakermultipaxos.Die
      case 16 => __out = frankenpaxos.matchmakermultipaxos.ForceReconfiguration
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.matchmakermultipaxos.LeaderInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isMatchReply: _root_.scala.Boolean = false
    def isPhase1B: _root_.scala.Boolean = false
    def isClientRequest: _root_.scala.Boolean = false
    def isPhase2B: _root_.scala.Boolean = false
    def isLeaderInfoRequest: _root_.scala.Boolean = false
    def isChosenWatermark: _root_.scala.Boolean = false
    def isMatchmakerNack: _root_.scala.Boolean = false
    def isAcceptorNack: _root_.scala.Boolean = false
    def isRecover: _root_.scala.Boolean = false
    def isExecutedWatermarkReply: _root_.scala.Boolean = false
    def isPersistedAck: _root_.scala.Boolean = false
    def isGarbageCollectAck: _root_.scala.Boolean = false
    def isStopped: _root_.scala.Boolean = false
    def isMatchChosen: _root_.scala.Boolean = false
    def isDie: _root_.scala.Boolean = false
    def isForceReconfiguration: _root_.scala.Boolean = false
    def matchReply: scala.Option[frankenpaxos.matchmakermultipaxos.MatchReply] = None
    def phase1B: scala.Option[frankenpaxos.matchmakermultipaxos.Phase1b] = None
    def clientRequest: scala.Option[frankenpaxos.matchmakermultipaxos.ClientRequest] = None
    def phase2B: scala.Option[frankenpaxos.matchmakermultipaxos.Phase2b] = None
    def leaderInfoRequest: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderInfoRequest] = None
    def chosenWatermark: scala.Option[frankenpaxos.matchmakermultipaxos.ChosenWatermark] = None
    def matchmakerNack: scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerNack] = None
    def acceptorNack: scala.Option[frankenpaxos.matchmakermultipaxos.AcceptorNack] = None
    def recover: scala.Option[frankenpaxos.matchmakermultipaxos.Recover] = None
    def executedWatermarkReply: scala.Option[frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply] = None
    def persistedAck: scala.Option[frankenpaxos.matchmakermultipaxos.PersistedAck] = None
    def garbageCollectAck: scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollectAck] = None
    def stopped: scala.Option[frankenpaxos.matchmakermultipaxos.Stopped] = None
    def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = None
    def die: scala.Option[frankenpaxos.matchmakermultipaxos.Die] = None
    def forceReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.ForceReconfiguration] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class MatchReply(value: frankenpaxos.matchmakermultipaxos.MatchReply) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchReply
      override def isMatchReply: _root_.scala.Boolean = true
      override def matchReply: scala.Option[frankenpaxos.matchmakermultipaxos.MatchReply] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Phase1B(value: frankenpaxos.matchmakermultipaxos.Phase1b) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Phase1b
      override def isPhase1B: _root_.scala.Boolean = true
      override def phase1B: scala.Option[frankenpaxos.matchmakermultipaxos.Phase1b] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.matchmakermultipaxos.ClientRequest) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.matchmakermultipaxos.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Phase2B(value: frankenpaxos.matchmakermultipaxos.Phase2b) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Phase2b
      override def isPhase2B: _root_.scala.Boolean = true
      override def phase2B: scala.Option[frankenpaxos.matchmakermultipaxos.Phase2b] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class LeaderInfoRequest(value: frankenpaxos.matchmakermultipaxos.LeaderInfoRequest) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.LeaderInfoRequest
      override def isLeaderInfoRequest: _root_.scala.Boolean = true
      override def leaderInfoRequest: scala.Option[frankenpaxos.matchmakermultipaxos.LeaderInfoRequest] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class ChosenWatermark(value: frankenpaxos.matchmakermultipaxos.ChosenWatermark) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.ChosenWatermark
      override def isChosenWatermark: _root_.scala.Boolean = true
      override def chosenWatermark: scala.Option[frankenpaxos.matchmakermultipaxos.ChosenWatermark] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class MatchmakerNack(value: frankenpaxos.matchmakermultipaxos.MatchmakerNack) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchmakerNack
      override def isMatchmakerNack: _root_.scala.Boolean = true
      override def matchmakerNack: scala.Option[frankenpaxos.matchmakermultipaxos.MatchmakerNack] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class AcceptorNack(value: frankenpaxos.matchmakermultipaxos.AcceptorNack) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.AcceptorNack
      override def isAcceptorNack: _root_.scala.Boolean = true
      override def acceptorNack: scala.Option[frankenpaxos.matchmakermultipaxos.AcceptorNack] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Recover(value: frankenpaxos.matchmakermultipaxos.Recover) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Recover
      override def isRecover: _root_.scala.Boolean = true
      override def recover: scala.Option[frankenpaxos.matchmakermultipaxos.Recover] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class ExecutedWatermarkReply(value: frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply
      override def isExecutedWatermarkReply: _root_.scala.Boolean = true
      override def executedWatermarkReply: scala.Option[frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class PersistedAck(value: frankenpaxos.matchmakermultipaxos.PersistedAck) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.PersistedAck
      override def isPersistedAck: _root_.scala.Boolean = true
      override def persistedAck: scala.Option[frankenpaxos.matchmakermultipaxos.PersistedAck] = Some(value)
      override def number: _root_.scala.Int = 11
    }
    @SerialVersionUID(0L)
    final case class GarbageCollectAck(value: frankenpaxos.matchmakermultipaxos.GarbageCollectAck) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.GarbageCollectAck
      override def isGarbageCollectAck: _root_.scala.Boolean = true
      override def garbageCollectAck: scala.Option[frankenpaxos.matchmakermultipaxos.GarbageCollectAck] = Some(value)
      override def number: _root_.scala.Int = 12
    }
    @SerialVersionUID(0L)
    final case class Stopped(value: frankenpaxos.matchmakermultipaxos.Stopped) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Stopped
      override def isStopped: _root_.scala.Boolean = true
      override def stopped: scala.Option[frankenpaxos.matchmakermultipaxos.Stopped] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class MatchChosen(value: frankenpaxos.matchmakermultipaxos.MatchChosen) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.MatchChosen
      override def isMatchChosen: _root_.scala.Boolean = true
      override def matchChosen: scala.Option[frankenpaxos.matchmakermultipaxos.MatchChosen] = Some(value)
      override def number: _root_.scala.Int = 14
    }
    @SerialVersionUID(0L)
    final case class Die(value: frankenpaxos.matchmakermultipaxos.Die) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.Die
      override def isDie: _root_.scala.Boolean = true
      override def die: scala.Option[frankenpaxos.matchmakermultipaxos.Die] = Some(value)
      override def number: _root_.scala.Int = 15
    }
    @SerialVersionUID(0L)
    final case class ForceReconfiguration(value: frankenpaxos.matchmakermultipaxos.ForceReconfiguration) extends frankenpaxos.matchmakermultipaxos.LeaderInbound.Request {
      type ValueType = frankenpaxos.matchmakermultipaxos.ForceReconfiguration
      override def isForceReconfiguration: _root_.scala.Boolean = true
      override def forceReconfiguration: scala.Option[frankenpaxos.matchmakermultipaxos.ForceReconfiguration] = Some(value)
      override def number: _root_.scala.Int = 16
    }
  }
  implicit class LeaderInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderInbound](_l) {
    def matchReply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchReply] = field(_.getMatchReply)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchReply(f_)))
    def phase1B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Phase1b] = field(_.getPhase1B)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase1B(f_)))
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ClientRequest(f_)))
    def phase2B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Phase2b] = field(_.getPhase2B)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Phase2B(f_)))
    def leaderInfoRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderInfoRequest] = field(_.getLeaderInfoRequest)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.LeaderInfoRequest(f_)))
    def chosenWatermark: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ChosenWatermark] = field(_.getChosenWatermark)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ChosenWatermark(f_)))
    def matchmakerNack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchmakerNack] = field(_.getMatchmakerNack)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchmakerNack(f_)))
    def acceptorNack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.AcceptorNack] = field(_.getAcceptorNack)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.AcceptorNack(f_)))
    def recover: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Recover] = field(_.getRecover)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Recover(f_)))
    def executedWatermarkReply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ExecutedWatermarkReply] = field(_.getExecutedWatermarkReply)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ExecutedWatermarkReply(f_)))
    def persistedAck: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.PersistedAck] = field(_.getPersistedAck)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.PersistedAck(f_)))
    def garbageCollectAck: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.GarbageCollectAck] = field(_.getGarbageCollectAck)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.GarbageCollectAck(f_)))
    def stopped: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Stopped] = field(_.getStopped)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Stopped(f_)))
    def matchChosen: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.MatchChosen] = field(_.getMatchChosen)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.MatchChosen(f_)))
    def die: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.Die] = field(_.getDie)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.Die(f_)))
    def forceReconfiguration: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.ForceReconfiguration] = field(_.getForceReconfiguration)((c_, f_) => c_.copy(request = frankenpaxos.matchmakermultipaxos.LeaderInbound.Request.ForceReconfiguration(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.matchmakermultipaxos.LeaderInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val MATCH_REPLY_FIELD_NUMBER = 1
  final val PHASE1B_FIELD_NUMBER = 2
  final val CLIENT_REQUEST_FIELD_NUMBER = 3
  final val PHASE2B_FIELD_NUMBER = 4
  final val LEADER_INFO_REQUEST_FIELD_NUMBER = 5
  final val CHOSEN_WATERMARK_FIELD_NUMBER = 6
  final val MATCHMAKER_NACK_FIELD_NUMBER = 7
  final val ACCEPTOR_NACK_FIELD_NUMBER = 8
  final val RECOVER_FIELD_NUMBER = 9
  final val EXECUTED_WATERMARK_REPLY_FIELD_NUMBER = 10
  final val PERSISTED_ACK_FIELD_NUMBER = 11
  final val GARBAGE_COLLECT_ACK_FIELD_NUMBER = 12
  final val STOPPED_FIELD_NUMBER = 13
  final val MATCH_CHOSEN_FIELD_NUMBER = 14
  final val DIE_FIELD_NUMBER = 15
  final val FORCE_RECONFIGURATION_FIELD_NUMBER = 16
}
