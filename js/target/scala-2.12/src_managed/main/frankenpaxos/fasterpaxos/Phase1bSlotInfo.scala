// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.fasterpaxos

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class Phase1bSlotInfo(
    slot: _root_.scala.Int,
    info: frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phase1bSlotInfo] with scalapb.lenses.Updatable[Phase1bSlotInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, slot)
      if (info.pendingSlotInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(info.pendingSlotInfo.get.serializedSize) + info.pendingSlotInfo.get.serializedSize }
      if (info.chosenSlotInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(info.chosenSlotInfo.get.serializedSize) + info.chosenSlotInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, slot)
      info.pendingSlotInfo.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      info.chosenSlotInfo.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.fasterpaxos.Phase1bSlotInfo = {
      var __slot = this.slot
      var __requiredFields0: _root_.scala.Long = 0x1L
      var __info = this.info
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __slot = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.PendingSlotInfo(_root_.scalapb.LiteParser.readMessage(_input__, info.pendingSlotInfo.getOrElse(frankenpaxos.fasterpaxos.PendingSlotInfo.defaultInstance)))
          case 26 =>
            __info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.ChosenSlotInfo(_root_.scalapb.LiteParser.readMessage(_input__, info.chosenSlotInfo.getOrElse(frankenpaxos.fasterpaxos.ChosenSlotInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.fasterpaxos.Phase1bSlotInfo(
          slot = __slot,
          info = __info
      )
    }
    def withSlot(__v: _root_.scala.Int): Phase1bSlotInfo = copy(slot = __v)
    def getPendingSlotInfo: frankenpaxos.fasterpaxos.PendingSlotInfo = info.pendingSlotInfo.getOrElse(frankenpaxos.fasterpaxos.PendingSlotInfo.defaultInstance)
    def withPendingSlotInfo(__v: frankenpaxos.fasterpaxos.PendingSlotInfo): Phase1bSlotInfo = copy(info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.PendingSlotInfo(__v))
    def getChosenSlotInfo: frankenpaxos.fasterpaxos.ChosenSlotInfo = info.chosenSlotInfo.getOrElse(frankenpaxos.fasterpaxos.ChosenSlotInfo.defaultInstance)
    def withChosenSlotInfo(__v: frankenpaxos.fasterpaxos.ChosenSlotInfo): Phase1bSlotInfo = copy(info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.ChosenSlotInfo(__v))
    def clearInfo: Phase1bSlotInfo = copy(info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.Empty)
    def withInfo(__v: frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info): Phase1bSlotInfo = copy(info = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => slot
        case 2 => info.pendingSlotInfo.orNull
        case 3 => info.chosenSlotInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(slot)
        case 2 => info.pendingSlotInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => info.chosenSlotInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.fasterpaxos.Phase1bSlotInfo
}

object Phase1bSlotInfo extends scalapb.GeneratedMessageCompanion[frankenpaxos.fasterpaxos.Phase1bSlotInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.fasterpaxos.Phase1bSlotInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.fasterpaxos.Phase1bSlotInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.fasterpaxos.Phase1bSlotInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      info = __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.fasterpaxos.PendingSlotInfo]].map(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.PendingSlotInfo)
    .orElse[frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.fasterpaxos.ChosenSlotInfo]].map(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.ChosenSlotInfo))
    .getOrElse(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.fasterpaxos.Phase1bSlotInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.fasterpaxos.Phase1bSlotInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        info = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.fasterpaxos.PendingSlotInfo]]).map(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.PendingSlotInfo)
    .orElse[frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.fasterpaxos.ChosenSlotInfo]]).map(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.ChosenSlotInfo))
    .getOrElse(frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FasterPaxosProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FasterPaxosProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.fasterpaxos.PendingSlotInfo
      case 3 => __out = frankenpaxos.fasterpaxos.ChosenSlotInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.fasterpaxos.Phase1bSlotInfo(
    slot = 0
  )
  sealed trait Info extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isPendingSlotInfo: _root_.scala.Boolean = false
    def isChosenSlotInfo: _root_.scala.Boolean = false
    def pendingSlotInfo: scala.Option[frankenpaxos.fasterpaxos.PendingSlotInfo] = None
    def chosenSlotInfo: scala.Option[frankenpaxos.fasterpaxos.ChosenSlotInfo] = None
  }
  object Info extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class PendingSlotInfo(value: frankenpaxos.fasterpaxos.PendingSlotInfo) extends frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info {
      type ValueType = frankenpaxos.fasterpaxos.PendingSlotInfo
      override def isPendingSlotInfo: _root_.scala.Boolean = true
      override def pendingSlotInfo: scala.Option[frankenpaxos.fasterpaxos.PendingSlotInfo] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ChosenSlotInfo(value: frankenpaxos.fasterpaxos.ChosenSlotInfo) extends frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info {
      type ValueType = frankenpaxos.fasterpaxos.ChosenSlotInfo
      override def isChosenSlotInfo: _root_.scala.Boolean = true
      override def chosenSlotInfo: scala.Option[frankenpaxos.fasterpaxos.ChosenSlotInfo] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class Phase1bSlotInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fasterpaxos.Phase1bSlotInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.fasterpaxos.Phase1bSlotInfo](_l) {
    def slot: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.slot)((c_, f_) => c_.copy(slot = f_))
    def pendingSlotInfo: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fasterpaxos.PendingSlotInfo] = field(_.getPendingSlotInfo)((c_, f_) => c_.copy(info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.PendingSlotInfo(f_)))
    def chosenSlotInfo: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fasterpaxos.ChosenSlotInfo] = field(_.getChosenSlotInfo)((c_, f_) => c_.copy(info = frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info.ChosenSlotInfo(f_)))
    def info: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fasterpaxos.Phase1bSlotInfo.Info] = field(_.info)((c_, f_) => c_.copy(info = f_))
  }
  final val SLOT_FIELD_NUMBER = 1
  final val PENDING_SLOT_INFO_FIELD_NUMBER = 2
  final val CHOSEN_SLOT_INFO_FIELD_NUMBER = 3
}
