// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.fasterpaxos

/** @param anyWatermark
  *   A delegate can propose a value in any log entry any_watermark or larger.
  *   These are the log entries for which the leader determined that no value
  *   has been or will be chosen in any round less than `round`.
  */
@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class Phase2aAny(
    round: _root_.scala.Int,
    delegate: _root_.scala.collection.Seq[_root_.scala.Int] = _root_.scala.collection.Seq.empty,
    anyWatermark: _root_.scala.Int
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phase2aAny] with scalapb.lenses.Updatable[Phase2aAny] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, round)
      delegate.foreach(delegate => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, delegate))
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, anyWatermark)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, round)
      delegate.foreach { __v =>
        _output__.writeInt32(2, __v)
      };
      _output__.writeInt32(3, anyWatermark)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.fasterpaxos.Phase2aAny = {
      var __round = this.round
      val __delegate = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.delegate)
      var __anyWatermark = this.anyWatermark
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __round = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __delegate += _input__.readInt32()
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __delegate += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 24 =>
            __anyWatermark = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.fasterpaxos.Phase2aAny(
          round = __round,
          delegate = __delegate.result(),
          anyWatermark = __anyWatermark
      )
    }
    def withRound(__v: _root_.scala.Int): Phase2aAny = copy(round = __v)
    def clearDelegate = copy(delegate = _root_.scala.collection.Seq.empty)
    def addDelegate(__vs: _root_.scala.Int*): Phase2aAny = addAllDelegate(__vs)
    def addAllDelegate(__vs: TraversableOnce[_root_.scala.Int]): Phase2aAny = copy(delegate = delegate ++ __vs)
    def withDelegate(__v: _root_.scala.collection.Seq[_root_.scala.Int]): Phase2aAny = copy(delegate = __v)
    def withAnyWatermark(__v: _root_.scala.Int): Phase2aAny = copy(anyWatermark = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => round
        case 2 => delegate
        case 3 => anyWatermark
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(round)
        case 2 => _root_.scalapb.descriptors.PRepeated(delegate.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PInt(anyWatermark)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.fasterpaxos.Phase2aAny
}

object Phase2aAny extends scalapb.GeneratedMessageCompanion[frankenpaxos.fasterpaxos.Phase2aAny] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.fasterpaxos.Phase2aAny] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.fasterpaxos.Phase2aAny = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.fasterpaxos.Phase2aAny(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Int]],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.fasterpaxos.Phase2aAny] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.fasterpaxos.Phase2aAny(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FasterPaxosProto.javaDescriptor.getMessageTypes.get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FasterPaxosProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.fasterpaxos.Phase2aAny(
    round = 0,
    anyWatermark = 0
  )
  implicit class Phase2aAnyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fasterpaxos.Phase2aAny]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.fasterpaxos.Phase2aAny](_l) {
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
    def delegate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Int]] = field(_.delegate)((c_, f_) => c_.copy(delegate = f_))
    def anyWatermark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.anyWatermark)((c_, f_) => c_.copy(anyWatermark = f_))
  }
  final val ROUND_FIELD_NUMBER = 1
  final val DELEGATE_FIELD_NUMBER = 2
  final val ANY_WATERMARK_FIELD_NUMBER = 3
}
