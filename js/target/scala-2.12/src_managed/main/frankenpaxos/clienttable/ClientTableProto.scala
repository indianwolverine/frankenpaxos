// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.clienttable

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class ClientTableProto(
    kv: _root_.scala.collection.Seq[frankenpaxos.clienttable.ClientTableProto.KeyValue] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ClientTableProto] with scalapb.lenses.Updatable[ClientTableProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      kv.foreach(kv => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(kv.serializedSize) + kv.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      kv.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.clienttable.ClientTableProto = {
      val __kv = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.clienttable.ClientTableProto.KeyValue] ++= this.kv)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __kv += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.clienttable.ClientTableProto.KeyValue.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.clienttable.ClientTableProto(
          kv = __kv.result()
      )
    }
    def clearKv = copy(kv = _root_.scala.collection.Seq.empty)
    def addKv(__vs: frankenpaxos.clienttable.ClientTableProto.KeyValue*): ClientTableProto = addAllKv(__vs)
    def addAllKv(__vs: TraversableOnce[frankenpaxos.clienttable.ClientTableProto.KeyValue]): ClientTableProto = copy(kv = kv ++ __vs)
    def withKv(__v: _root_.scala.collection.Seq[frankenpaxos.clienttable.ClientTableProto.KeyValue]): ClientTableProto = copy(kv = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => kv
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(kv.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.clienttable.ClientTableProto
}

object ClientTableProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.clienttable.ClientTableProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.clienttable.ClientTableProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.clienttable.ClientTableProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.clienttable.ClientTableProto(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.clienttable.ClientTableProto.KeyValue]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.clienttable.ClientTableProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.clienttable.ClientTableProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.clienttable.ClientTableProto.KeyValue]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ClientTableProtoCompanion.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ClientTableProtoCompanion.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.clienttable.ClientTableProto.KeyValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.frankenpaxos.clienttable.ClientTableProto.KeyValue
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.clienttable.ClientTableProto(
  )
  @SerialVersionUID(0L)
  final case class KeyValue(
      clientAddress: _root_.com.google.protobuf.ByteString,
      clientState: frankenpaxos.clienttable.ClientStateProto
      ) extends scalapb.GeneratedMessage with scalapb.Message[KeyValue] with scalapb.lenses.Updatable[KeyValue] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, clientAddress)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(clientState.serializedSize) + clientState.serializedSize
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        _output__.writeBytes(1, clientAddress)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(clientState.serializedSize)
        clientState.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.clienttable.ClientTableProto.KeyValue = {
        var __clientAddress = this.clientAddress
        var __clientState = this.clientState
        var __requiredFields0: _root_.scala.Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __clientAddress = _input__.readBytes()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __clientState = _root_.scalapb.LiteParser.readMessage(_input__, __clientState)
              __requiredFields0 &= 0xfffffffffffffffdL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        frankenpaxos.clienttable.ClientTableProto.KeyValue(
            clientAddress = __clientAddress,
            clientState = __clientState
        )
      }
      def withClientAddress(__v: _root_.com.google.protobuf.ByteString): KeyValue = copy(clientAddress = __v)
      def withClientState(__v: frankenpaxos.clienttable.ClientStateProto): KeyValue = copy(clientState = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => clientAddress
          case 2 => clientState
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(clientAddress)
          case 2 => clientState.toPMessage
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = frankenpaxos.clienttable.ClientTableProto.KeyValue
  }
  
  object KeyValue extends scalapb.GeneratedMessageCompanion[frankenpaxos.clienttable.ClientTableProto.KeyValue] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.clienttable.ClientTableProto.KeyValue] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.clienttable.ClientTableProto.KeyValue = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      frankenpaxos.clienttable.ClientTableProto.KeyValue(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap(__fields.get(1)).asInstanceOf[frankenpaxos.clienttable.ClientStateProto]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.clienttable.ClientTableProto.KeyValue] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        frankenpaxos.clienttable.ClientTableProto.KeyValue(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.com.google.protobuf.ByteString],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[frankenpaxos.clienttable.ClientStateProto]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = frankenpaxos.clienttable.ClientTableProto.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = frankenpaxos.clienttable.ClientTableProto.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = frankenpaxos.clienttable.ClientStateProto
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = frankenpaxos.clienttable.ClientTableProto.KeyValue(
      clientAddress = _root_.com.google.protobuf.ByteString.EMPTY,
      clientState = frankenpaxos.clienttable.ClientStateProto.defaultInstance
    )
    implicit class KeyValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.clienttable.ClientTableProto.KeyValue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.clienttable.ClientTableProto.KeyValue](_l) {
      def clientAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.clientAddress)((c_, f_) => c_.copy(clientAddress = f_))
      def clientState: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.clienttable.ClientStateProto] = field(_.clientState)((c_, f_) => c_.copy(clientState = f_))
    }
    final val CLIENT_ADDRESS_FIELD_NUMBER = 1
    final val CLIENT_STATE_FIELD_NUMBER = 2
  }
  
  implicit class ClientTableProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.clienttable.ClientTableProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.clienttable.ClientTableProto](_l) {
    def kv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.clienttable.ClientTableProto.KeyValue]] = field(_.kv)((c_, f_) => c_.copy(kv = f_))
  }
  final val KV_FIELD_NUMBER = 1
}
