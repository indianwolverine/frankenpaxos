// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.mencius

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class LeaderInbound(
    request: frankenpaxos.mencius.LeaderInbound.Request = frankenpaxos.mencius.LeaderInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[LeaderInbound] with scalapb.lenses.Updatable[LeaderInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.phase1B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase1B.get.serializedSize) + request.phase1B.get.serializedSize }
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.clientRequestBatch.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequestBatch.get.serializedSize) + request.clientRequestBatch.get.serializedSize }
      if (request.highWatermark.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.highWatermark.get.serializedSize) + request.highWatermark.get.serializedSize }
      if (request.leaderInfoRequestClient.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.leaderInfoRequestClient.get.serializedSize) + request.leaderInfoRequestClient.get.serializedSize }
      if (request.leaderInfoRequestBatcher.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.leaderInfoRequestBatcher.get.serializedSize) + request.leaderInfoRequestBatcher.get.serializedSize }
      if (request.nack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.nack.get.serializedSize) + request.nack.get.serializedSize }
      if (request.chosenWatermark.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.chosenWatermark.get.serializedSize) + request.chosenWatermark.get.serializedSize }
      if (request.recover.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.recover.get.serializedSize) + request.recover.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.phase1B.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.clientRequest.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.clientRequestBatch.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.highWatermark.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.leaderInfoRequestClient.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.leaderInfoRequestBatcher.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.nack.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.chosenWatermark.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.recover.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.mencius.LeaderInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.Phase1B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase1B.getOrElse(frankenpaxos.mencius.Phase1b.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.mencius.ClientRequest.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequestBatch(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequestBatch.getOrElse(frankenpaxos.mencius.ClientRequestBatch.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.HighWatermark(_root_.scalapb.LiteParser.readMessage(_input__, request.highWatermark.getOrElse(frankenpaxos.mencius.HighWatermark.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestClient(_root_.scalapb.LiteParser.readMessage(_input__, request.leaderInfoRequestClient.getOrElse(frankenpaxos.mencius.LeaderInfoRequestClient.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestBatcher(_root_.scalapb.LiteParser.readMessage(_input__, request.leaderInfoRequestBatcher.getOrElse(frankenpaxos.mencius.LeaderInfoRequestBatcher.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.Nack(_root_.scalapb.LiteParser.readMessage(_input__, request.nack.getOrElse(frankenpaxos.mencius.Nack.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.ChosenWatermark(_root_.scalapb.LiteParser.readMessage(_input__, request.chosenWatermark.getOrElse(frankenpaxos.mencius.ChosenWatermark.defaultInstance)))
          case 74 =>
            __request = frankenpaxos.mencius.LeaderInbound.Request.Recover(_root_.scalapb.LiteParser.readMessage(_input__, request.recover.getOrElse(frankenpaxos.mencius.Recover.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.mencius.LeaderInbound(
          request = __request
      )
    }
    def getPhase1B: frankenpaxos.mencius.Phase1b = request.phase1B.getOrElse(frankenpaxos.mencius.Phase1b.defaultInstance)
    def withPhase1B(__v: frankenpaxos.mencius.Phase1b): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.Phase1B(__v))
    def getClientRequest: frankenpaxos.mencius.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.mencius.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.mencius.ClientRequest): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequest(__v))
    def getClientRequestBatch: frankenpaxos.mencius.ClientRequestBatch = request.clientRequestBatch.getOrElse(frankenpaxos.mencius.ClientRequestBatch.defaultInstance)
    def withClientRequestBatch(__v: frankenpaxos.mencius.ClientRequestBatch): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequestBatch(__v))
    def getHighWatermark: frankenpaxos.mencius.HighWatermark = request.highWatermark.getOrElse(frankenpaxos.mencius.HighWatermark.defaultInstance)
    def withHighWatermark(__v: frankenpaxos.mencius.HighWatermark): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.HighWatermark(__v))
    def getLeaderInfoRequestClient: frankenpaxos.mencius.LeaderInfoRequestClient = request.leaderInfoRequestClient.getOrElse(frankenpaxos.mencius.LeaderInfoRequestClient.defaultInstance)
    def withLeaderInfoRequestClient(__v: frankenpaxos.mencius.LeaderInfoRequestClient): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestClient(__v))
    def getLeaderInfoRequestBatcher: frankenpaxos.mencius.LeaderInfoRequestBatcher = request.leaderInfoRequestBatcher.getOrElse(frankenpaxos.mencius.LeaderInfoRequestBatcher.defaultInstance)
    def withLeaderInfoRequestBatcher(__v: frankenpaxos.mencius.LeaderInfoRequestBatcher): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestBatcher(__v))
    def getNack: frankenpaxos.mencius.Nack = request.nack.getOrElse(frankenpaxos.mencius.Nack.defaultInstance)
    def withNack(__v: frankenpaxos.mencius.Nack): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.Nack(__v))
    def getChosenWatermark: frankenpaxos.mencius.ChosenWatermark = request.chosenWatermark.getOrElse(frankenpaxos.mencius.ChosenWatermark.defaultInstance)
    def withChosenWatermark(__v: frankenpaxos.mencius.ChosenWatermark): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.ChosenWatermark(__v))
    def getRecover: frankenpaxos.mencius.Recover = request.recover.getOrElse(frankenpaxos.mencius.Recover.defaultInstance)
    def withRecover(__v: frankenpaxos.mencius.Recover): LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.Recover(__v))
    def clearRequest: LeaderInbound = copy(request = frankenpaxos.mencius.LeaderInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.mencius.LeaderInbound.Request): LeaderInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.phase1B.orNull
        case 2 => request.clientRequest.orNull
        case 3 => request.clientRequestBatch.orNull
        case 4 => request.highWatermark.orNull
        case 5 => request.leaderInfoRequestClient.orNull
        case 6 => request.leaderInfoRequestBatcher.orNull
        case 7 => request.nack.orNull
        case 8 => request.chosenWatermark.orNull
        case 9 => request.recover.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.phase1B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.clientRequestBatch.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.highWatermark.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.leaderInfoRequestClient.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.leaderInfoRequestBatcher.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.nack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.chosenWatermark.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => request.recover.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.mencius.LeaderInbound
}

object LeaderInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.LeaderInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.LeaderInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.mencius.LeaderInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.mencius.LeaderInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.mencius.Phase1b]].map(frankenpaxos.mencius.LeaderInbound.Request.Phase1B)
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.mencius.ClientRequest]].map(frankenpaxos.mencius.LeaderInbound.Request.ClientRequest))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.mencius.ClientRequestBatch]].map(frankenpaxos.mencius.LeaderInbound.Request.ClientRequestBatch))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.mencius.HighWatermark]].map(frankenpaxos.mencius.LeaderInbound.Request.HighWatermark))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.mencius.LeaderInfoRequestClient]].map(frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestClient))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.mencius.LeaderInfoRequestBatcher]].map(frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestBatcher))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.mencius.Nack]].map(frankenpaxos.mencius.LeaderInbound.Request.Nack))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.mencius.ChosenWatermark]].map(frankenpaxos.mencius.LeaderInbound.Request.ChosenWatermark))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[frankenpaxos.mencius.Recover]].map(frankenpaxos.mencius.LeaderInbound.Request.Recover))
    .getOrElse(frankenpaxos.mencius.LeaderInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.mencius.LeaderInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.mencius.LeaderInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Phase1b]]).map(frankenpaxos.mencius.LeaderInbound.Request.Phase1B)
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.ClientRequest]]).map(frankenpaxos.mencius.LeaderInbound.Request.ClientRequest))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.ClientRequestBatch]]).map(frankenpaxos.mencius.LeaderInbound.Request.ClientRequestBatch))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.HighWatermark]]).map(frankenpaxos.mencius.LeaderInbound.Request.HighWatermark))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.LeaderInfoRequestClient]]).map(frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestClient))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.LeaderInfoRequestBatcher]]).map(frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestBatcher))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Nack]]).map(frankenpaxos.mencius.LeaderInbound.Request.Nack))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.ChosenWatermark]]).map(frankenpaxos.mencius.LeaderInbound.Request.ChosenWatermark))
    .orElse[frankenpaxos.mencius.LeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Recover]]).map(frankenpaxos.mencius.LeaderInbound.Request.Recover))
    .getOrElse(frankenpaxos.mencius.LeaderInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MenciusProto.javaDescriptor.getMessageTypes.get(30)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MenciusProto.scalaDescriptor.messages(30)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.mencius.Phase1b
      case 2 => __out = frankenpaxos.mencius.ClientRequest
      case 3 => __out = frankenpaxos.mencius.ClientRequestBatch
      case 4 => __out = frankenpaxos.mencius.HighWatermark
      case 5 => __out = frankenpaxos.mencius.LeaderInfoRequestClient
      case 6 => __out = frankenpaxos.mencius.LeaderInfoRequestBatcher
      case 7 => __out = frankenpaxos.mencius.Nack
      case 8 => __out = frankenpaxos.mencius.ChosenWatermark
      case 9 => __out = frankenpaxos.mencius.Recover
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.mencius.LeaderInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isPhase1B: _root_.scala.Boolean = false
    def isClientRequest: _root_.scala.Boolean = false
    def isClientRequestBatch: _root_.scala.Boolean = false
    def isHighWatermark: _root_.scala.Boolean = false
    def isLeaderInfoRequestClient: _root_.scala.Boolean = false
    def isLeaderInfoRequestBatcher: _root_.scala.Boolean = false
    def isNack: _root_.scala.Boolean = false
    def isChosenWatermark: _root_.scala.Boolean = false
    def isRecover: _root_.scala.Boolean = false
    def phase1B: scala.Option[frankenpaxos.mencius.Phase1b] = None
    def clientRequest: scala.Option[frankenpaxos.mencius.ClientRequest] = None
    def clientRequestBatch: scala.Option[frankenpaxos.mencius.ClientRequestBatch] = None
    def highWatermark: scala.Option[frankenpaxos.mencius.HighWatermark] = None
    def leaderInfoRequestClient: scala.Option[frankenpaxos.mencius.LeaderInfoRequestClient] = None
    def leaderInfoRequestBatcher: scala.Option[frankenpaxos.mencius.LeaderInfoRequestBatcher] = None
    def nack: scala.Option[frankenpaxos.mencius.Nack] = None
    def chosenWatermark: scala.Option[frankenpaxos.mencius.ChosenWatermark] = None
    def recover: scala.Option[frankenpaxos.mencius.Recover] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Phase1B(value: frankenpaxos.mencius.Phase1b) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Phase1b
      override def isPhase1B: _root_.scala.Boolean = true
      override def phase1B: scala.Option[frankenpaxos.mencius.Phase1b] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.mencius.ClientRequest) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.mencius.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ClientRequestBatch(value: frankenpaxos.mencius.ClientRequestBatch) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.ClientRequestBatch
      override def isClientRequestBatch: _root_.scala.Boolean = true
      override def clientRequestBatch: scala.Option[frankenpaxos.mencius.ClientRequestBatch] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class HighWatermark(value: frankenpaxos.mencius.HighWatermark) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.HighWatermark
      override def isHighWatermark: _root_.scala.Boolean = true
      override def highWatermark: scala.Option[frankenpaxos.mencius.HighWatermark] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class LeaderInfoRequestClient(value: frankenpaxos.mencius.LeaderInfoRequestClient) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.LeaderInfoRequestClient
      override def isLeaderInfoRequestClient: _root_.scala.Boolean = true
      override def leaderInfoRequestClient: scala.Option[frankenpaxos.mencius.LeaderInfoRequestClient] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class LeaderInfoRequestBatcher(value: frankenpaxos.mencius.LeaderInfoRequestBatcher) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.LeaderInfoRequestBatcher
      override def isLeaderInfoRequestBatcher: _root_.scala.Boolean = true
      override def leaderInfoRequestBatcher: scala.Option[frankenpaxos.mencius.LeaderInfoRequestBatcher] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Nack(value: frankenpaxos.mencius.Nack) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Nack
      override def isNack: _root_.scala.Boolean = true
      override def nack: scala.Option[frankenpaxos.mencius.Nack] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class ChosenWatermark(value: frankenpaxos.mencius.ChosenWatermark) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.ChosenWatermark
      override def isChosenWatermark: _root_.scala.Boolean = true
      override def chosenWatermark: scala.Option[frankenpaxos.mencius.ChosenWatermark] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Recover(value: frankenpaxos.mencius.Recover) extends frankenpaxos.mencius.LeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Recover
      override def isRecover: _root_.scala.Boolean = true
      override def recover: scala.Option[frankenpaxos.mencius.Recover] = Some(value)
      override def number: _root_.scala.Int = 9
    }
  }
  implicit class LeaderInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.LeaderInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.mencius.LeaderInbound](_l) {
    def phase1B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase1b] = field(_.getPhase1B)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.Phase1B(f_)))
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequest(f_)))
    def clientRequestBatch: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ClientRequestBatch] = field(_.getClientRequestBatch)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.ClientRequestBatch(f_)))
    def highWatermark: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.HighWatermark] = field(_.getHighWatermark)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.HighWatermark(f_)))
    def leaderInfoRequestClient: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.LeaderInfoRequestClient] = field(_.getLeaderInfoRequestClient)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestClient(f_)))
    def leaderInfoRequestBatcher: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.LeaderInfoRequestBatcher] = field(_.getLeaderInfoRequestBatcher)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.LeaderInfoRequestBatcher(f_)))
    def nack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Nack] = field(_.getNack)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.Nack(f_)))
    def chosenWatermark: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ChosenWatermark] = field(_.getChosenWatermark)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.ChosenWatermark(f_)))
    def recover: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Recover] = field(_.getRecover)((c_, f_) => c_.copy(request = frankenpaxos.mencius.LeaderInbound.Request.Recover(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.LeaderInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val PHASE1B_FIELD_NUMBER = 1
  final val CLIENT_REQUEST_FIELD_NUMBER = 2
  final val CLIENT_REQUEST_BATCH_FIELD_NUMBER = 3
  final val HIGH_WATERMARK_FIELD_NUMBER = 4
  final val LEADER_INFO_REQUEST_CLIENT_FIELD_NUMBER = 5
  final val LEADER_INFO_REQUEST_BATCHER_FIELD_NUMBER = 6
  final val NACK_FIELD_NUMBER = 7
  final val CHOSEN_WATERMARK_FIELD_NUMBER = 8
  final val RECOVER_FIELD_NUMBER = 9
}
