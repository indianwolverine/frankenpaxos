// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.mencius

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class ProxyLeaderInbound(
    request: frankenpaxos.mencius.ProxyLeaderInbound.Request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ProxyLeaderInbound] with scalapb.lenses.Updatable[ProxyLeaderInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.highWatermark.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.highWatermark.get.serializedSize) + request.highWatermark.get.serializedSize }
      if (request.phase2A.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2A.get.serializedSize) + request.phase2A.get.serializedSize }
      if (request.phase2ANoopRange.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2ANoopRange.get.serializedSize) + request.phase2ANoopRange.get.serializedSize }
      if (request.phase2B.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2B.get.serializedSize) + request.phase2B.get.serializedSize }
      if (request.phase2BNoopRange.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.phase2BNoopRange.get.serializedSize) + request.phase2BNoopRange.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.highWatermark.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2A.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2ANoopRange.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2B.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.phase2BNoopRange.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.mencius.ProxyLeaderInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.mencius.ProxyLeaderInbound.Request.HighWatermark(_root_.scalapb.LiteParser.readMessage(_input__, request.highWatermark.getOrElse(frankenpaxos.mencius.HighWatermark.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2A(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2A.getOrElse(frankenpaxos.mencius.Phase2a.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2ANoopRange(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2ANoopRange.getOrElse(frankenpaxos.mencius.Phase2aNoopRange.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2B(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2B.getOrElse(frankenpaxos.mencius.Phase2b.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2BNoopRange(_root_.scalapb.LiteParser.readMessage(_input__, request.phase2BNoopRange.getOrElse(frankenpaxos.mencius.Phase2bNoopRange.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.mencius.ProxyLeaderInbound(
          request = __request
      )
    }
    def getHighWatermark: frankenpaxos.mencius.HighWatermark = request.highWatermark.getOrElse(frankenpaxos.mencius.HighWatermark.defaultInstance)
    def withHighWatermark(__v: frankenpaxos.mencius.HighWatermark): ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.HighWatermark(__v))
    def getPhase2A: frankenpaxos.mencius.Phase2a = request.phase2A.getOrElse(frankenpaxos.mencius.Phase2a.defaultInstance)
    def withPhase2A(__v: frankenpaxos.mencius.Phase2a): ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2A(__v))
    def getPhase2ANoopRange: frankenpaxos.mencius.Phase2aNoopRange = request.phase2ANoopRange.getOrElse(frankenpaxos.mencius.Phase2aNoopRange.defaultInstance)
    def withPhase2ANoopRange(__v: frankenpaxos.mencius.Phase2aNoopRange): ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2ANoopRange(__v))
    def getPhase2B: frankenpaxos.mencius.Phase2b = request.phase2B.getOrElse(frankenpaxos.mencius.Phase2b.defaultInstance)
    def withPhase2B(__v: frankenpaxos.mencius.Phase2b): ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2B(__v))
    def getPhase2BNoopRange: frankenpaxos.mencius.Phase2bNoopRange = request.phase2BNoopRange.getOrElse(frankenpaxos.mencius.Phase2bNoopRange.defaultInstance)
    def withPhase2BNoopRange(__v: frankenpaxos.mencius.Phase2bNoopRange): ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2BNoopRange(__v))
    def clearRequest: ProxyLeaderInbound = copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.mencius.ProxyLeaderInbound.Request): ProxyLeaderInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.highWatermark.orNull
        case 2 => request.phase2A.orNull
        case 3 => request.phase2ANoopRange.orNull
        case 4 => request.phase2B.orNull
        case 5 => request.phase2BNoopRange.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.highWatermark.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.phase2A.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.phase2ANoopRange.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.phase2B.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.phase2BNoopRange.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.mencius.ProxyLeaderInbound
}

object ProxyLeaderInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.ProxyLeaderInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.ProxyLeaderInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.mencius.ProxyLeaderInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.mencius.ProxyLeaderInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.mencius.HighWatermark]].map(frankenpaxos.mencius.ProxyLeaderInbound.Request.HighWatermark)
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.mencius.Phase2a]].map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2A))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.mencius.Phase2aNoopRange]].map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2ANoopRange))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.mencius.Phase2b]].map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2B))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.mencius.Phase2bNoopRange]].map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2BNoopRange))
    .getOrElse(frankenpaxos.mencius.ProxyLeaderInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.mencius.ProxyLeaderInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.mencius.ProxyLeaderInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.HighWatermark]]).map(frankenpaxos.mencius.ProxyLeaderInbound.Request.HighWatermark)
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Phase2a]]).map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2A))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Phase2aNoopRange]]).map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2ANoopRange))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Phase2b]]).map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2B))
    .orElse[frankenpaxos.mencius.ProxyLeaderInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.mencius.Phase2bNoopRange]]).map(frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2BNoopRange))
    .getOrElse(frankenpaxos.mencius.ProxyLeaderInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MenciusProto.javaDescriptor.getMessageTypes.get(31)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MenciusProto.scalaDescriptor.messages(31)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.mencius.HighWatermark
      case 2 => __out = frankenpaxos.mencius.Phase2a
      case 3 => __out = frankenpaxos.mencius.Phase2aNoopRange
      case 4 => __out = frankenpaxos.mencius.Phase2b
      case 5 => __out = frankenpaxos.mencius.Phase2bNoopRange
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.mencius.ProxyLeaderInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isHighWatermark: _root_.scala.Boolean = false
    def isPhase2A: _root_.scala.Boolean = false
    def isPhase2ANoopRange: _root_.scala.Boolean = false
    def isPhase2B: _root_.scala.Boolean = false
    def isPhase2BNoopRange: _root_.scala.Boolean = false
    def highWatermark: scala.Option[frankenpaxos.mencius.HighWatermark] = None
    def phase2A: scala.Option[frankenpaxos.mencius.Phase2a] = None
    def phase2ANoopRange: scala.Option[frankenpaxos.mencius.Phase2aNoopRange] = None
    def phase2B: scala.Option[frankenpaxos.mencius.Phase2b] = None
    def phase2BNoopRange: scala.Option[frankenpaxos.mencius.Phase2bNoopRange] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class HighWatermark(value: frankenpaxos.mencius.HighWatermark) extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.HighWatermark
      override def isHighWatermark: _root_.scala.Boolean = true
      override def highWatermark: scala.Option[frankenpaxos.mencius.HighWatermark] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Phase2A(value: frankenpaxos.mencius.Phase2a) extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Phase2a
      override def isPhase2A: _root_.scala.Boolean = true
      override def phase2A: scala.Option[frankenpaxos.mencius.Phase2a] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Phase2ANoopRange(value: frankenpaxos.mencius.Phase2aNoopRange) extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Phase2aNoopRange
      override def isPhase2ANoopRange: _root_.scala.Boolean = true
      override def phase2ANoopRange: scala.Option[frankenpaxos.mencius.Phase2aNoopRange] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Phase2B(value: frankenpaxos.mencius.Phase2b) extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Phase2b
      override def isPhase2B: _root_.scala.Boolean = true
      override def phase2B: scala.Option[frankenpaxos.mencius.Phase2b] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Phase2BNoopRange(value: frankenpaxos.mencius.Phase2bNoopRange) extends frankenpaxos.mencius.ProxyLeaderInbound.Request {
      type ValueType = frankenpaxos.mencius.Phase2bNoopRange
      override def isPhase2BNoopRange: _root_.scala.Boolean = true
      override def phase2BNoopRange: scala.Option[frankenpaxos.mencius.Phase2bNoopRange] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  implicit class ProxyLeaderInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ProxyLeaderInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.mencius.ProxyLeaderInbound](_l) {
    def highWatermark: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.HighWatermark] = field(_.getHighWatermark)((c_, f_) => c_.copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.HighWatermark(f_)))
    def phase2A: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase2a] = field(_.getPhase2A)((c_, f_) => c_.copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2A(f_)))
    def phase2ANoopRange: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase2aNoopRange] = field(_.getPhase2ANoopRange)((c_, f_) => c_.copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2ANoopRange(f_)))
    def phase2B: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase2b] = field(_.getPhase2B)((c_, f_) => c_.copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2B(f_)))
    def phase2BNoopRange: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase2bNoopRange] = field(_.getPhase2BNoopRange)((c_, f_) => c_.copy(request = frankenpaxos.mencius.ProxyLeaderInbound.Request.Phase2BNoopRange(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ProxyLeaderInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val HIGH_WATERMARK_FIELD_NUMBER = 1
  final val PHASE2A_FIELD_NUMBER = 2
  final val PHASE2A_NOOP_RANGE_FIELD_NUMBER = 3
  final val PHASE2B_FIELD_NUMBER = 4
  final val PHASE2B_NOOP_RANGE_FIELD_NUMBER = 5
}
