// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.mencius

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class NotLeaderBatcher(
    leaderGroupIndex: _root_.scala.Int,
    clientRequestBatch: frankenpaxos.mencius.ClientRequestBatch
    ) extends scalapb.GeneratedMessage with scalapb.Message[NotLeaderBatcher] with scalapb.lenses.Updatable[NotLeaderBatcher] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, leaderGroupIndex)
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(clientRequestBatch.serializedSize) + clientRequestBatch.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, leaderGroupIndex)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(clientRequestBatch.serializedSize)
      clientRequestBatch.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.mencius.NotLeaderBatcher = {
      var __leaderGroupIndex = this.leaderGroupIndex
      var __clientRequestBatch = this.clientRequestBatch
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __leaderGroupIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __clientRequestBatch = _root_.scalapb.LiteParser.readMessage(_input__, __clientRequestBatch)
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.mencius.NotLeaderBatcher(
          leaderGroupIndex = __leaderGroupIndex,
          clientRequestBatch = __clientRequestBatch
      )
    }
    def withLeaderGroupIndex(__v: _root_.scala.Int): NotLeaderBatcher = copy(leaderGroupIndex = __v)
    def withClientRequestBatch(__v: frankenpaxos.mencius.ClientRequestBatch): NotLeaderBatcher = copy(clientRequestBatch = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => leaderGroupIndex
        case 2 => clientRequestBatch
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(leaderGroupIndex)
        case 2 => clientRequestBatch.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.mencius.NotLeaderBatcher
}

object NotLeaderBatcher extends scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.NotLeaderBatcher] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.NotLeaderBatcher] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.mencius.NotLeaderBatcher = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.mencius.NotLeaderBatcher(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[frankenpaxos.mencius.ClientRequestBatch]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.mencius.NotLeaderBatcher] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.mencius.NotLeaderBatcher(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[frankenpaxos.mencius.ClientRequestBatch]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MenciusProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MenciusProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.mencius.ClientRequestBatch
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.mencius.NotLeaderBatcher(
    leaderGroupIndex = 0,
    clientRequestBatch = frankenpaxos.mencius.ClientRequestBatch.defaultInstance
  )
  implicit class NotLeaderBatcherLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.NotLeaderBatcher]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.mencius.NotLeaderBatcher](_l) {
    def leaderGroupIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.leaderGroupIndex)((c_, f_) => c_.copy(leaderGroupIndex = f_))
    def clientRequestBatch: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.ClientRequestBatch] = field(_.clientRequestBatch)((c_, f_) => c_.copy(clientRequestBatch = f_))
  }
  final val LEADER_GROUP_INDEX_FIELD_NUMBER = 1
  final val CLIENT_REQUEST_BATCH_FIELD_NUMBER = 2
}
