// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.mencius

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class Phase2bNoopRange(
    acceptorGroupIndex: _root_.scala.Int,
    acceptorIndex: _root_.scala.Int,
    slotStartInclusive: _root_.scala.Int,
    slotEndExclusive: _root_.scala.Int,
    round: _root_.scala.Int
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phase2bNoopRange] with scalapb.lenses.Updatable[Phase2bNoopRange] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, acceptorGroupIndex)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, acceptorIndex)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, slotStartInclusive)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, slotEndExclusive)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, round)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, acceptorGroupIndex)
      _output__.writeInt32(2, acceptorIndex)
      _output__.writeInt32(3, slotStartInclusive)
      _output__.writeInt32(4, slotEndExclusive)
      _output__.writeInt32(5, round)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.mencius.Phase2bNoopRange = {
      var __acceptorGroupIndex = this.acceptorGroupIndex
      var __acceptorIndex = this.acceptorIndex
      var __slotStartInclusive = this.slotStartInclusive
      var __slotEndExclusive = this.slotEndExclusive
      var __round = this.round
      var __requiredFields0: _root_.scala.Long = 0x1fL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __acceptorGroupIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __acceptorIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __slotStartInclusive = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __slotEndExclusive = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __round = _input__.readInt32()
            __requiredFields0 &= 0xffffffffffffffefL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.mencius.Phase2bNoopRange(
          acceptorGroupIndex = __acceptorGroupIndex,
          acceptorIndex = __acceptorIndex,
          slotStartInclusive = __slotStartInclusive,
          slotEndExclusive = __slotEndExclusive,
          round = __round
      )
    }
    def withAcceptorGroupIndex(__v: _root_.scala.Int): Phase2bNoopRange = copy(acceptorGroupIndex = __v)
    def withAcceptorIndex(__v: _root_.scala.Int): Phase2bNoopRange = copy(acceptorIndex = __v)
    def withSlotStartInclusive(__v: _root_.scala.Int): Phase2bNoopRange = copy(slotStartInclusive = __v)
    def withSlotEndExclusive(__v: _root_.scala.Int): Phase2bNoopRange = copy(slotEndExclusive = __v)
    def withRound(__v: _root_.scala.Int): Phase2bNoopRange = copy(round = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => acceptorGroupIndex
        case 2 => acceptorIndex
        case 3 => slotStartInclusive
        case 4 => slotEndExclusive
        case 5 => round
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(acceptorGroupIndex)
        case 2 => _root_.scalapb.descriptors.PInt(acceptorIndex)
        case 3 => _root_.scalapb.descriptors.PInt(slotStartInclusive)
        case 4 => _root_.scalapb.descriptors.PInt(slotEndExclusive)
        case 5 => _root_.scalapb.descriptors.PInt(round)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.mencius.Phase2bNoopRange
}

object Phase2bNoopRange extends scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.Phase2bNoopRange] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.mencius.Phase2bNoopRange] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.mencius.Phase2bNoopRange = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.mencius.Phase2bNoopRange(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(3)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(4)).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.mencius.Phase2bNoopRange] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.mencius.Phase2bNoopRange(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MenciusProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MenciusProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.mencius.Phase2bNoopRange(
    acceptorGroupIndex = 0,
    acceptorIndex = 0,
    slotStartInclusive = 0,
    slotEndExclusive = 0,
    round = 0
  )
  implicit class Phase2bNoopRangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.mencius.Phase2bNoopRange]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.mencius.Phase2bNoopRange](_l) {
    def acceptorGroupIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.acceptorGroupIndex)((c_, f_) => c_.copy(acceptorGroupIndex = f_))
    def acceptorIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.acceptorIndex)((c_, f_) => c_.copy(acceptorIndex = f_))
    def slotStartInclusive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.slotStartInclusive)((c_, f_) => c_.copy(slotStartInclusive = f_))
    def slotEndExclusive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.slotEndExclusive)((c_, f_) => c_.copy(slotEndExclusive = f_))
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
  }
  final val ACCEPTOR_GROUP_INDEX_FIELD_NUMBER = 1
  final val ACCEPTOR_INDEX_FIELD_NUMBER = 2
  final val SLOT_START_INCLUSIVE_FIELD_NUMBER = 3
  final val SLOT_END_EXCLUSIVE_FIELD_NUMBER = 4
  final val ROUND_FIELD_NUMBER = 5
}
