// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.epaxos

/** @param voteBallot
  *   When a replica receives a Prepare message for instance I, there are two
  *   scenarios to consider:
  *  
  *     Case 1. The replica has no command log entry for instance I. In this
  *             case, vote_ballot is set to the null ballot, Ballot(-1, -1),
  *             status is set to NotSeen, and the triple is left empty.
  *  
  *     Case 2. The replica has a command log entry for instance I. In this
  *             case, vote_ballot is not the null ballot, status is not NotSeen,
  *             and the triple is not empty.
  */
@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class PrepareOk(
    ballot: frankenpaxos.epaxos.Ballot,
    instance: frankenpaxos.epaxos.Instance,
    replicaIndex: _root_.scala.Int,
    voteBallot: frankenpaxos.epaxos.Ballot,
    status: frankenpaxos.epaxos.CommandStatus,
    commandOrNoop: scala.Option[frankenpaxos.epaxos.CommandOrNoop] = None,
    sequenceNumber: scala.Option[_root_.scala.Int] = None,
    dependencies: scala.Option[frankenpaxos.epaxos.InstancePrefixSetProto] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PrepareOk] with scalapb.lenses.Updatable[PrepareOk] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ballot.serializedSize) + ballot.serializedSize
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(instance.serializedSize) + instance.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, replicaIndex)
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(voteBallot.serializedSize) + voteBallot.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, status.value)
      if (commandOrNoop.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(commandOrNoop.get.serializedSize) + commandOrNoop.get.serializedSize }
      if (sequenceNumber.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, sequenceNumber.get) }
      if (dependencies.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dependencies.get.serializedSize) + dependencies.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(ballot.serializedSize)
      ballot.writeTo(_output__)
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(instance.serializedSize)
      instance.writeTo(_output__)
      _output__.writeInt32(3, replicaIndex)
      _output__.writeTag(4, 2)
      _output__.writeUInt32NoTag(voteBallot.serializedSize)
      voteBallot.writeTo(_output__)
      _output__.writeEnum(5, status.value)
      commandOrNoop.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sequenceNumber.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      dependencies.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.epaxos.PrepareOk = {
      var __ballot = this.ballot
      var __instance = this.instance
      var __replicaIndex = this.replicaIndex
      var __voteBallot = this.voteBallot
      var __status = this.status
      var __commandOrNoop = this.commandOrNoop
      var __sequenceNumber = this.sequenceNumber
      var __dependencies = this.dependencies
      var __requiredFields0: _root_.scala.Long = 0x1fL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ballot = _root_.scalapb.LiteParser.readMessage(_input__, __ballot)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __instance = _root_.scalapb.LiteParser.readMessage(_input__, __instance)
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __replicaIndex = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __voteBallot = _root_.scalapb.LiteParser.readMessage(_input__, __voteBallot)
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __status = frankenpaxos.epaxos.CommandStatus.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xffffffffffffffefL
          case 50 =>
            __commandOrNoop = Option(_root_.scalapb.LiteParser.readMessage(_input__, __commandOrNoop.getOrElse(frankenpaxos.epaxos.CommandOrNoop.defaultInstance)))
          case 56 =>
            __sequenceNumber = Option(_input__.readInt32())
          case 66 =>
            __dependencies = Option(_root_.scalapb.LiteParser.readMessage(_input__, __dependencies.getOrElse(frankenpaxos.epaxos.InstancePrefixSetProto.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.epaxos.PrepareOk(
          ballot = __ballot,
          instance = __instance,
          replicaIndex = __replicaIndex,
          voteBallot = __voteBallot,
          status = __status,
          commandOrNoop = __commandOrNoop,
          sequenceNumber = __sequenceNumber,
          dependencies = __dependencies
      )
    }
    def withBallot(__v: frankenpaxos.epaxos.Ballot): PrepareOk = copy(ballot = __v)
    def withInstance(__v: frankenpaxos.epaxos.Instance): PrepareOk = copy(instance = __v)
    def withReplicaIndex(__v: _root_.scala.Int): PrepareOk = copy(replicaIndex = __v)
    def withVoteBallot(__v: frankenpaxos.epaxos.Ballot): PrepareOk = copy(voteBallot = __v)
    def withStatus(__v: frankenpaxos.epaxos.CommandStatus): PrepareOk = copy(status = __v)
    def getCommandOrNoop: frankenpaxos.epaxos.CommandOrNoop = commandOrNoop.getOrElse(frankenpaxos.epaxos.CommandOrNoop.defaultInstance)
    def clearCommandOrNoop: PrepareOk = copy(commandOrNoop = None)
    def withCommandOrNoop(__v: frankenpaxos.epaxos.CommandOrNoop): PrepareOk = copy(commandOrNoop = Option(__v))
    def getSequenceNumber: _root_.scala.Int = sequenceNumber.getOrElse(0)
    def clearSequenceNumber: PrepareOk = copy(sequenceNumber = None)
    def withSequenceNumber(__v: _root_.scala.Int): PrepareOk = copy(sequenceNumber = Option(__v))
    def getDependencies: frankenpaxos.epaxos.InstancePrefixSetProto = dependencies.getOrElse(frankenpaxos.epaxos.InstancePrefixSetProto.defaultInstance)
    def clearDependencies: PrepareOk = copy(dependencies = None)
    def withDependencies(__v: frankenpaxos.epaxos.InstancePrefixSetProto): PrepareOk = copy(dependencies = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ballot
        case 2 => instance
        case 3 => replicaIndex
        case 4 => voteBallot
        case 5 => status.javaValueDescriptor
        case 6 => commandOrNoop.orNull
        case 7 => sequenceNumber.orNull
        case 8 => dependencies.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ballot.toPMessage
        case 2 => instance.toPMessage
        case 3 => _root_.scalapb.descriptors.PInt(replicaIndex)
        case 4 => voteBallot.toPMessage
        case 5 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
        case 6 => commandOrNoop.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => sequenceNumber.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => dependencies.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.epaxos.PrepareOk
}

object PrepareOk extends scalapb.GeneratedMessageCompanion[frankenpaxos.epaxos.PrepareOk] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.epaxos.PrepareOk] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.epaxos.PrepareOk = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.epaxos.PrepareOk(
      __fieldsMap(__fields.get(0)).asInstanceOf[frankenpaxos.epaxos.Ballot],
      __fieldsMap(__fields.get(1)).asInstanceOf[frankenpaxos.epaxos.Instance],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(3)).asInstanceOf[frankenpaxos.epaxos.Ballot],
      frankenpaxos.epaxos.CommandStatus.fromValue(__fieldsMap(__fields.get(4)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.epaxos.CommandOrNoop]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.epaxos.InstancePrefixSetProto]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.epaxos.PrepareOk] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.epaxos.PrepareOk(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[frankenpaxos.epaxos.Ballot],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[frankenpaxos.epaxos.Instance],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[frankenpaxos.epaxos.Ballot],
        frankenpaxos.epaxos.CommandStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.CommandOrNoop]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.InstancePrefixSetProto]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EPaxosProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EPaxosProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.epaxos.Ballot
      case 2 => __out = frankenpaxos.epaxos.Instance
      case 4 => __out = frankenpaxos.epaxos.Ballot
      case 6 => __out = frankenpaxos.epaxos.CommandOrNoop
      case 8 => __out = frankenpaxos.epaxos.InstancePrefixSetProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => frankenpaxos.epaxos.CommandStatus
    }
  }
  lazy val defaultInstance = frankenpaxos.epaxos.PrepareOk(
    ballot = frankenpaxos.epaxos.Ballot.defaultInstance,
    instance = frankenpaxos.epaxos.Instance.defaultInstance,
    replicaIndex = 0,
    voteBallot = frankenpaxos.epaxos.Ballot.defaultInstance,
    status = frankenpaxos.epaxos.CommandStatus.NotSeen
  )
  implicit class PrepareOkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.PrepareOk]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.epaxos.PrepareOk](_l) {
    def ballot: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Ballot] = field(_.ballot)((c_, f_) => c_.copy(ballot = f_))
    def instance: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Instance] = field(_.instance)((c_, f_) => c_.copy(instance = f_))
    def replicaIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.replicaIndex)((c_, f_) => c_.copy(replicaIndex = f_))
    def voteBallot: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Ballot] = field(_.voteBallot)((c_, f_) => c_.copy(voteBallot = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.CommandStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def commandOrNoop: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.CommandOrNoop] = field(_.getCommandOrNoop)((c_, f_) => c_.copy(commandOrNoop = Option(f_)))
    def optionalCommandOrNoop: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[frankenpaxos.epaxos.CommandOrNoop]] = field(_.commandOrNoop)((c_, f_) => c_.copy(commandOrNoop = f_))
    def sequenceNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getSequenceNumber)((c_, f_) => c_.copy(sequenceNumber = Option(f_)))
    def optionalSequenceNumber: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.sequenceNumber)((c_, f_) => c_.copy(sequenceNumber = f_))
    def dependencies: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.InstancePrefixSetProto] = field(_.getDependencies)((c_, f_) => c_.copy(dependencies = Option(f_)))
    def optionalDependencies: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[frankenpaxos.epaxos.InstancePrefixSetProto]] = field(_.dependencies)((c_, f_) => c_.copy(dependencies = f_))
  }
  final val BALLOT_FIELD_NUMBER = 1
  final val INSTANCE_FIELD_NUMBER = 2
  final val REPLICA_INDEX_FIELD_NUMBER = 3
  final val VOTE_BALLOT_FIELD_NUMBER = 4
  final val STATUS_FIELD_NUMBER = 5
  final val COMMAND_OR_NOOP_FIELD_NUMBER = 6
  final val SEQUENCE_NUMBER_FIELD_NUMBER = 7
  final val DEPENDENCIES_FIELD_NUMBER = 8
}
