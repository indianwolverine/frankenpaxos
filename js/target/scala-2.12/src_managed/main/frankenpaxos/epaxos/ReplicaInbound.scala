// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.epaxos

/** Inbound messages. ///////////////////////////////////////////////////////////
  */
@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class ReplicaInbound(
    request: frankenpaxos.epaxos.ReplicaInbound.Request = frankenpaxos.epaxos.ReplicaInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ReplicaInbound] with scalapb.lenses.Updatable[ReplicaInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.preAccept.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.preAccept.get.serializedSize) + request.preAccept.get.serializedSize }
      if (request.preAcceptOk.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.preAcceptOk.get.serializedSize) + request.preAcceptOk.get.serializedSize }
      if (request.accept.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.accept.get.serializedSize) + request.accept.get.serializedSize }
      if (request.acceptOk.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.acceptOk.get.serializedSize) + request.acceptOk.get.serializedSize }
      if (request.commit.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.commit.get.serializedSize) + request.commit.get.serializedSize }
      if (request.prepare.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.prepare.get.serializedSize) + request.prepare.get.serializedSize }
      if (request.prepareOk.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.prepareOk.get.serializedSize) + request.prepareOk.get.serializedSize }
      if (request.nack.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.nack.get.serializedSize) + request.nack.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.clientRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.preAccept.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.preAcceptOk.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.accept.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.acceptOk.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.commit.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.prepare.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.prepareOk.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.nack.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.epaxos.ReplicaInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.epaxos.ClientRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAccept(_root_.scalapb.LiteParser.readMessage(_input__, request.preAccept.getOrElse(frankenpaxos.epaxos.PreAccept.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAcceptOk(_root_.scalapb.LiteParser.readMessage(_input__, request.preAcceptOk.getOrElse(frankenpaxos.epaxos.PreAcceptOk.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.Accept(_root_.scalapb.LiteParser.readMessage(_input__, request.accept.getOrElse(frankenpaxos.epaxos.Accept.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.AcceptOk(_root_.scalapb.LiteParser.readMessage(_input__, request.acceptOk.getOrElse(frankenpaxos.epaxos.AcceptOk.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.Commit(_root_.scalapb.LiteParser.readMessage(_input__, request.commit.getOrElse(frankenpaxos.epaxos.Commit.defaultInstance)))
          case 58 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.Prepare(_root_.scalapb.LiteParser.readMessage(_input__, request.prepare.getOrElse(frankenpaxos.epaxos.Prepare.defaultInstance)))
          case 66 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.PrepareOk(_root_.scalapb.LiteParser.readMessage(_input__, request.prepareOk.getOrElse(frankenpaxos.epaxos.PrepareOk.defaultInstance)))
          case 74 =>
            __request = frankenpaxos.epaxos.ReplicaInbound.Request.Nack(_root_.scalapb.LiteParser.readMessage(_input__, request.nack.getOrElse(frankenpaxos.epaxos.Nack.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.epaxos.ReplicaInbound(
          request = __request
      )
    }
    def getClientRequest: frankenpaxos.epaxos.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.epaxos.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.epaxos.ClientRequest): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.ClientRequest(__v))
    def getPreAccept: frankenpaxos.epaxos.PreAccept = request.preAccept.getOrElse(frankenpaxos.epaxos.PreAccept.defaultInstance)
    def withPreAccept(__v: frankenpaxos.epaxos.PreAccept): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAccept(__v))
    def getPreAcceptOk: frankenpaxos.epaxos.PreAcceptOk = request.preAcceptOk.getOrElse(frankenpaxos.epaxos.PreAcceptOk.defaultInstance)
    def withPreAcceptOk(__v: frankenpaxos.epaxos.PreAcceptOk): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAcceptOk(__v))
    def getAccept: frankenpaxos.epaxos.Accept = request.accept.getOrElse(frankenpaxos.epaxos.Accept.defaultInstance)
    def withAccept(__v: frankenpaxos.epaxos.Accept): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Accept(__v))
    def getAcceptOk: frankenpaxos.epaxos.AcceptOk = request.acceptOk.getOrElse(frankenpaxos.epaxos.AcceptOk.defaultInstance)
    def withAcceptOk(__v: frankenpaxos.epaxos.AcceptOk): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.AcceptOk(__v))
    def getCommit: frankenpaxos.epaxos.Commit = request.commit.getOrElse(frankenpaxos.epaxos.Commit.defaultInstance)
    def withCommit(__v: frankenpaxos.epaxos.Commit): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Commit(__v))
    def getPrepare: frankenpaxos.epaxos.Prepare = request.prepare.getOrElse(frankenpaxos.epaxos.Prepare.defaultInstance)
    def withPrepare(__v: frankenpaxos.epaxos.Prepare): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Prepare(__v))
    def getPrepareOk: frankenpaxos.epaxos.PrepareOk = request.prepareOk.getOrElse(frankenpaxos.epaxos.PrepareOk.defaultInstance)
    def withPrepareOk(__v: frankenpaxos.epaxos.PrepareOk): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PrepareOk(__v))
    def getNack: frankenpaxos.epaxos.Nack = request.nack.getOrElse(frankenpaxos.epaxos.Nack.defaultInstance)
    def withNack(__v: frankenpaxos.epaxos.Nack): ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Nack(__v))
    def clearRequest: ReplicaInbound = copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.epaxos.ReplicaInbound.Request): ReplicaInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.orNull
        case 2 => request.preAccept.orNull
        case 3 => request.preAcceptOk.orNull
        case 4 => request.accept.orNull
        case 5 => request.acceptOk.orNull
        case 6 => request.commit.orNull
        case 7 => request.prepare.orNull
        case 8 => request.prepareOk.orNull
        case 9 => request.nack.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.preAccept.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.preAcceptOk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.accept.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.acceptOk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.commit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => request.prepare.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => request.prepareOk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => request.nack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.epaxos.ReplicaInbound
}

object ReplicaInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.epaxos.ReplicaInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.epaxos.ReplicaInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.epaxos.ReplicaInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.epaxos.ReplicaInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.epaxos.ClientRequest]].map(frankenpaxos.epaxos.ReplicaInbound.Request.ClientRequest)
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.epaxos.PreAccept]].map(frankenpaxos.epaxos.ReplicaInbound.Request.PreAccept))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.epaxos.PreAcceptOk]].map(frankenpaxos.epaxos.ReplicaInbound.Request.PreAcceptOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.epaxos.Accept]].map(frankenpaxos.epaxos.ReplicaInbound.Request.Accept))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.epaxos.AcceptOk]].map(frankenpaxos.epaxos.ReplicaInbound.Request.AcceptOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.epaxos.Commit]].map(frankenpaxos.epaxos.ReplicaInbound.Request.Commit))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[frankenpaxos.epaxos.Prepare]].map(frankenpaxos.epaxos.ReplicaInbound.Request.Prepare))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[frankenpaxos.epaxos.PrepareOk]].map(frankenpaxos.epaxos.ReplicaInbound.Request.PrepareOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[frankenpaxos.epaxos.Nack]].map(frankenpaxos.epaxos.ReplicaInbound.Request.Nack))
    .getOrElse(frankenpaxos.epaxos.ReplicaInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.epaxos.ReplicaInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.epaxos.ReplicaInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.ClientRequest]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.ClientRequest)
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.PreAccept]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.PreAccept))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.PreAcceptOk]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.PreAcceptOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.Accept]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.Accept))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.AcceptOk]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.AcceptOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.Commit]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.Commit))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.Prepare]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.Prepare))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.PrepareOk]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.PrepareOk))
    .orElse[frankenpaxos.epaxos.ReplicaInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[frankenpaxos.epaxos.Nack]]).map(frankenpaxos.epaxos.ReplicaInbound.Request.Nack))
    .getOrElse(frankenpaxos.epaxos.ReplicaInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EPaxosProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EPaxosProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.epaxos.ClientRequest
      case 2 => __out = frankenpaxos.epaxos.PreAccept
      case 3 => __out = frankenpaxos.epaxos.PreAcceptOk
      case 4 => __out = frankenpaxos.epaxos.Accept
      case 5 => __out = frankenpaxos.epaxos.AcceptOk
      case 6 => __out = frankenpaxos.epaxos.Commit
      case 7 => __out = frankenpaxos.epaxos.Prepare
      case 8 => __out = frankenpaxos.epaxos.PrepareOk
      case 9 => __out = frankenpaxos.epaxos.Nack
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.epaxos.ReplicaInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isClientRequest: _root_.scala.Boolean = false
    def isPreAccept: _root_.scala.Boolean = false
    def isPreAcceptOk: _root_.scala.Boolean = false
    def isAccept: _root_.scala.Boolean = false
    def isAcceptOk: _root_.scala.Boolean = false
    def isCommit: _root_.scala.Boolean = false
    def isPrepare: _root_.scala.Boolean = false
    def isPrepareOk: _root_.scala.Boolean = false
    def isNack: _root_.scala.Boolean = false
    def clientRequest: scala.Option[frankenpaxos.epaxos.ClientRequest] = None
    def preAccept: scala.Option[frankenpaxos.epaxos.PreAccept] = None
    def preAcceptOk: scala.Option[frankenpaxos.epaxos.PreAcceptOk] = None
    def accept: scala.Option[frankenpaxos.epaxos.Accept] = None
    def acceptOk: scala.Option[frankenpaxos.epaxos.AcceptOk] = None
    def commit: scala.Option[frankenpaxos.epaxos.Commit] = None
    def prepare: scala.Option[frankenpaxos.epaxos.Prepare] = None
    def prepareOk: scala.Option[frankenpaxos.epaxos.PrepareOk] = None
    def nack: scala.Option[frankenpaxos.epaxos.Nack] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.epaxos.ClientRequest) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.epaxos.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class PreAccept(value: frankenpaxos.epaxos.PreAccept) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.PreAccept
      override def isPreAccept: _root_.scala.Boolean = true
      override def preAccept: scala.Option[frankenpaxos.epaxos.PreAccept] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class PreAcceptOk(value: frankenpaxos.epaxos.PreAcceptOk) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.PreAcceptOk
      override def isPreAcceptOk: _root_.scala.Boolean = true
      override def preAcceptOk: scala.Option[frankenpaxos.epaxos.PreAcceptOk] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Accept(value: frankenpaxos.epaxos.Accept) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.Accept
      override def isAccept: _root_.scala.Boolean = true
      override def accept: scala.Option[frankenpaxos.epaxos.Accept] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class AcceptOk(value: frankenpaxos.epaxos.AcceptOk) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.AcceptOk
      override def isAcceptOk: _root_.scala.Boolean = true
      override def acceptOk: scala.Option[frankenpaxos.epaxos.AcceptOk] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Commit(value: frankenpaxos.epaxos.Commit) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.Commit
      override def isCommit: _root_.scala.Boolean = true
      override def commit: scala.Option[frankenpaxos.epaxos.Commit] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Prepare(value: frankenpaxos.epaxos.Prepare) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.Prepare
      override def isPrepare: _root_.scala.Boolean = true
      override def prepare: scala.Option[frankenpaxos.epaxos.Prepare] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class PrepareOk(value: frankenpaxos.epaxos.PrepareOk) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.PrepareOk
      override def isPrepareOk: _root_.scala.Boolean = true
      override def prepareOk: scala.Option[frankenpaxos.epaxos.PrepareOk] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Nack(value: frankenpaxos.epaxos.Nack) extends frankenpaxos.epaxos.ReplicaInbound.Request {
      type ValueType = frankenpaxos.epaxos.Nack
      override def isNack: _root_.scala.Boolean = true
      override def nack: scala.Option[frankenpaxos.epaxos.Nack] = Some(value)
      override def number: _root_.scala.Int = 9
    }
  }
  implicit class ReplicaInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.ReplicaInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.epaxos.ReplicaInbound](_l) {
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.ClientRequest(f_)))
    def preAccept: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.PreAccept] = field(_.getPreAccept)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAccept(f_)))
    def preAcceptOk: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.PreAcceptOk] = field(_.getPreAcceptOk)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PreAcceptOk(f_)))
    def accept: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Accept] = field(_.getAccept)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Accept(f_)))
    def acceptOk: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.AcceptOk] = field(_.getAcceptOk)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.AcceptOk(f_)))
    def commit: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Commit] = field(_.getCommit)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Commit(f_)))
    def prepare: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Prepare] = field(_.getPrepare)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Prepare(f_)))
    def prepareOk: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.PrepareOk] = field(_.getPrepareOk)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.PrepareOk(f_)))
    def nack: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.Nack] = field(_.getNack)((c_, f_) => c_.copy(request = frankenpaxos.epaxos.ReplicaInbound.Request.Nack(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.epaxos.ReplicaInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val CLIENT_REQUEST_FIELD_NUMBER = 1
  final val PRE_ACCEPT_FIELD_NUMBER = 2
  final val PRE_ACCEPT_OK_FIELD_NUMBER = 3
  final val ACCEPT_FIELD_NUMBER = 4
  final val ACCEPT_OK_FIELD_NUMBER = 5
  final val COMMIT_FIELD_NUMBER = 6
  final val PREPARE_FIELD_NUMBER = 7
  final val PREPARE_OK_FIELD_NUMBER = 8
  final val NACK_FIELD_NUMBER = 9
}
