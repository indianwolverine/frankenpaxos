// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos

@SerialVersionUID(0L)
final case class UniformSingleKeyWorkloadProto(
    numKeys: _root_.scala.Int,
    sizeMean: _root_.scala.Int,
    sizeStd: _root_.scala.Int
    ) extends scalapb.GeneratedMessage with scalapb.Message[UniformSingleKeyWorkloadProto] with scalapb.lenses.Updatable[UniformSingleKeyWorkloadProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, numKeys)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, sizeMean)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, sizeStd)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, numKeys)
      _output__.writeInt32(2, sizeMean)
      _output__.writeInt32(3, sizeStd)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.UniformSingleKeyWorkloadProto = {
      var __numKeys = this.numKeys
      var __sizeMean = this.sizeMean
      var __sizeStd = this.sizeStd
      var __requiredFields0: _root_.scala.Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __numKeys = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __sizeMean = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __sizeStd = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.UniformSingleKeyWorkloadProto(
          numKeys = __numKeys,
          sizeMean = __sizeMean,
          sizeStd = __sizeStd
      )
    }
    def withNumKeys(__v: _root_.scala.Int): UniformSingleKeyWorkloadProto = copy(numKeys = __v)
    def withSizeMean(__v: _root_.scala.Int): UniformSingleKeyWorkloadProto = copy(sizeMean = __v)
    def withSizeStd(__v: _root_.scala.Int): UniformSingleKeyWorkloadProto = copy(sizeStd = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => numKeys
        case 2 => sizeMean
        case 3 => sizeStd
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(numKeys)
        case 2 => _root_.scalapb.descriptors.PInt(sizeMean)
        case 3 => _root_.scalapb.descriptors.PInt(sizeStd)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.UniformSingleKeyWorkloadProto
}

object UniformSingleKeyWorkloadProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.UniformSingleKeyWorkloadProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.UniformSingleKeyWorkloadProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.UniformSingleKeyWorkloadProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.UniformSingleKeyWorkloadProto(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.UniformSingleKeyWorkloadProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.UniformSingleKeyWorkloadProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WorkloadProtoCompanion.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WorkloadProtoCompanion.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.UniformSingleKeyWorkloadProto(
    numKeys = 0,
    sizeMean = 0,
    sizeStd = 0
  )
  implicit class UniformSingleKeyWorkloadProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.UniformSingleKeyWorkloadProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.UniformSingleKeyWorkloadProto](_l) {
    def numKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numKeys)((c_, f_) => c_.copy(numKeys = f_))
    def sizeMean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.sizeMean)((c_, f_) => c_.copy(sizeMean = f_))
    def sizeStd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.sizeStd)((c_, f_) => c_.copy(sizeStd = f_))
  }
  final val NUM_KEYS_FIELD_NUMBER = 1
  final val SIZE_MEAN_FIELD_NUMBER = 2
  final val SIZE_STD_FIELD_NUMBER = 3
}
