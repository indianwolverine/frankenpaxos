// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.election.basic

@SerialVersionUID(0L)
final case class ParticipantInbound(
    request: frankenpaxos.election.basic.ParticipantInbound.Request = frankenpaxos.election.basic.ParticipantInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ParticipantInbound] with scalapb.lenses.Updatable[ParticipantInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.ping.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.ping.get.serializedSize) + request.ping.get.serializedSize }
      if (request.forceNoPing.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.forceNoPing.get.serializedSize) + request.forceNoPing.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.ping.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.forceNoPing.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.election.basic.ParticipantInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.election.basic.ParticipantInbound.Request.Ping(_root_.scalapb.LiteParser.readMessage(_input__, request.ping.getOrElse(frankenpaxos.election.basic.Ping.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.election.basic.ParticipantInbound.Request.ForceNoPing(_root_.scalapb.LiteParser.readMessage(_input__, request.forceNoPing.getOrElse(frankenpaxos.election.basic.ForceNoPing.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.election.basic.ParticipantInbound(
          request = __request
      )
    }
    def getPing: frankenpaxos.election.basic.Ping = request.ping.getOrElse(frankenpaxos.election.basic.Ping.defaultInstance)
    def withPing(__v: frankenpaxos.election.basic.Ping): ParticipantInbound = copy(request = frankenpaxos.election.basic.ParticipantInbound.Request.Ping(__v))
    def getForceNoPing: frankenpaxos.election.basic.ForceNoPing = request.forceNoPing.getOrElse(frankenpaxos.election.basic.ForceNoPing.defaultInstance)
    def withForceNoPing(__v: frankenpaxos.election.basic.ForceNoPing): ParticipantInbound = copy(request = frankenpaxos.election.basic.ParticipantInbound.Request.ForceNoPing(__v))
    def clearRequest: ParticipantInbound = copy(request = frankenpaxos.election.basic.ParticipantInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.election.basic.ParticipantInbound.Request): ParticipantInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.ping.orNull
        case 2 => request.forceNoPing.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.ping.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.forceNoPing.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.election.basic.ParticipantInbound
}

object ParticipantInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.election.basic.ParticipantInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.election.basic.ParticipantInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.election.basic.ParticipantInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.election.basic.ParticipantInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.election.basic.Ping]].map(frankenpaxos.election.basic.ParticipantInbound.Request.Ping)
    .orElse[frankenpaxos.election.basic.ParticipantInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.election.basic.ForceNoPing]].map(frankenpaxos.election.basic.ParticipantInbound.Request.ForceNoPing))
    .getOrElse(frankenpaxos.election.basic.ParticipantInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.election.basic.ParticipantInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.election.basic.ParticipantInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.election.basic.Ping]]).map(frankenpaxos.election.basic.ParticipantInbound.Request.Ping)
    .orElse[frankenpaxos.election.basic.ParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.election.basic.ForceNoPing]]).map(frankenpaxos.election.basic.ParticipantInbound.Request.ForceNoPing))
    .getOrElse(frankenpaxos.election.basic.ParticipantInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ElectionProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ElectionProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.election.basic.Ping
      case 2 => __out = frankenpaxos.election.basic.ForceNoPing
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.election.basic.ParticipantInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isPing: _root_.scala.Boolean = false
    def isForceNoPing: _root_.scala.Boolean = false
    def ping: scala.Option[frankenpaxos.election.basic.Ping] = None
    def forceNoPing: scala.Option[frankenpaxos.election.basic.ForceNoPing] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.election.basic.ParticipantInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Ping(value: frankenpaxos.election.basic.Ping) extends frankenpaxos.election.basic.ParticipantInbound.Request {
      type ValueType = frankenpaxos.election.basic.Ping
      override def isPing: _root_.scala.Boolean = true
      override def ping: scala.Option[frankenpaxos.election.basic.Ping] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ForceNoPing(value: frankenpaxos.election.basic.ForceNoPing) extends frankenpaxos.election.basic.ParticipantInbound.Request {
      type ValueType = frankenpaxos.election.basic.ForceNoPing
      override def isForceNoPing: _root_.scala.Boolean = true
      override def forceNoPing: scala.Option[frankenpaxos.election.basic.ForceNoPing] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class ParticipantInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.election.basic.ParticipantInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.election.basic.ParticipantInbound](_l) {
    def ping: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.election.basic.Ping] = field(_.getPing)((c_, f_) => c_.copy(request = frankenpaxos.election.basic.ParticipantInbound.Request.Ping(f_)))
    def forceNoPing: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.election.basic.ForceNoPing] = field(_.getForceNoPing)((c_, f_) => c_.copy(request = frankenpaxos.election.basic.ParticipantInbound.Request.ForceNoPing(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.election.basic.ParticipantInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val PING_FIELD_NUMBER = 1
  final val FORCE_NO_PING_FIELD_NUMBER = 2
}
