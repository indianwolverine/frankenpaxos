// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos

@SerialVersionUID(0L)
final case class WorkloadProto(
    value: frankenpaxos.WorkloadProto.Value = frankenpaxos.WorkloadProto.Value.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[WorkloadProto] with scalapb.lenses.Updatable[WorkloadProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (value.stringWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.stringWorkload.get.serializedSize) + value.stringWorkload.get.serializedSize }
      if (value.uniformSingleKeyWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.uniformSingleKeyWorkload.get.serializedSize) + value.uniformSingleKeyWorkload.get.serializedSize }
      if (value.bernoulliSingleKeyWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.bernoulliSingleKeyWorkload.get.serializedSize) + value.bernoulliSingleKeyWorkload.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.stringWorkload.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.uniformSingleKeyWorkload.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.bernoulliSingleKeyWorkload.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.WorkloadProto = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = frankenpaxos.WorkloadProto.Value.StringWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.stringWorkload.getOrElse(frankenpaxos.StringWorkloadProto.defaultInstance)))
          case 18 =>
            __value = frankenpaxos.WorkloadProto.Value.UniformSingleKeyWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.uniformSingleKeyWorkload.getOrElse(frankenpaxos.UniformSingleKeyWorkloadProto.defaultInstance)))
          case 26 =>
            __value = frankenpaxos.WorkloadProto.Value.BernoulliSingleKeyWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.bernoulliSingleKeyWorkload.getOrElse(frankenpaxos.BernoulliSingleKeyWorkloadProto.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.WorkloadProto(
          value = __value
      )
    }
    def getStringWorkload: frankenpaxos.StringWorkloadProto = value.stringWorkload.getOrElse(frankenpaxos.StringWorkloadProto.defaultInstance)
    def withStringWorkload(__v: frankenpaxos.StringWorkloadProto): WorkloadProto = copy(value = frankenpaxos.WorkloadProto.Value.StringWorkload(__v))
    def getUniformSingleKeyWorkload: frankenpaxos.UniformSingleKeyWorkloadProto = value.uniformSingleKeyWorkload.getOrElse(frankenpaxos.UniformSingleKeyWorkloadProto.defaultInstance)
    def withUniformSingleKeyWorkload(__v: frankenpaxos.UniformSingleKeyWorkloadProto): WorkloadProto = copy(value = frankenpaxos.WorkloadProto.Value.UniformSingleKeyWorkload(__v))
    def getBernoulliSingleKeyWorkload: frankenpaxos.BernoulliSingleKeyWorkloadProto = value.bernoulliSingleKeyWorkload.getOrElse(frankenpaxos.BernoulliSingleKeyWorkloadProto.defaultInstance)
    def withBernoulliSingleKeyWorkload(__v: frankenpaxos.BernoulliSingleKeyWorkloadProto): WorkloadProto = copy(value = frankenpaxos.WorkloadProto.Value.BernoulliSingleKeyWorkload(__v))
    def clearValue: WorkloadProto = copy(value = frankenpaxos.WorkloadProto.Value.Empty)
    def withValue(__v: frankenpaxos.WorkloadProto.Value): WorkloadProto = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.stringWorkload.orNull
        case 2 => value.uniformSingleKeyWorkload.orNull
        case 3 => value.bernoulliSingleKeyWorkload.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.stringWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.uniformSingleKeyWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.bernoulliSingleKeyWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.WorkloadProto
}

object WorkloadProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.WorkloadProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.WorkloadProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.WorkloadProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.WorkloadProto(
      value = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.StringWorkloadProto]].map(frankenpaxos.WorkloadProto.Value.StringWorkload)
    .orElse[frankenpaxos.WorkloadProto.Value](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.UniformSingleKeyWorkloadProto]].map(frankenpaxos.WorkloadProto.Value.UniformSingleKeyWorkload))
    .orElse[frankenpaxos.WorkloadProto.Value](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.BernoulliSingleKeyWorkloadProto]].map(frankenpaxos.WorkloadProto.Value.BernoulliSingleKeyWorkload))
    .getOrElse(frankenpaxos.WorkloadProto.Value.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.WorkloadProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.WorkloadProto(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.StringWorkloadProto]]).map(frankenpaxos.WorkloadProto.Value.StringWorkload)
    .orElse[frankenpaxos.WorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.UniformSingleKeyWorkloadProto]]).map(frankenpaxos.WorkloadProto.Value.UniformSingleKeyWorkload))
    .orElse[frankenpaxos.WorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.BernoulliSingleKeyWorkloadProto]]).map(frankenpaxos.WorkloadProto.Value.BernoulliSingleKeyWorkload))
    .getOrElse(frankenpaxos.WorkloadProto.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WorkloadProtoCompanion.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WorkloadProtoCompanion.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.StringWorkloadProto
      case 2 => __out = frankenpaxos.UniformSingleKeyWorkloadProto
      case 3 => __out = frankenpaxos.BernoulliSingleKeyWorkloadProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.WorkloadProto(
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isStringWorkload: _root_.scala.Boolean = false
    def isUniformSingleKeyWorkload: _root_.scala.Boolean = false
    def isBernoulliSingleKeyWorkload: _root_.scala.Boolean = false
    def stringWorkload: scala.Option[frankenpaxos.StringWorkloadProto] = None
    def uniformSingleKeyWorkload: scala.Option[frankenpaxos.UniformSingleKeyWorkloadProto] = None
    def bernoulliSingleKeyWorkload: scala.Option[frankenpaxos.BernoulliSingleKeyWorkloadProto] = None
  }
  object Value extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.WorkloadProto.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class StringWorkload(value: frankenpaxos.StringWorkloadProto) extends frankenpaxos.WorkloadProto.Value {
      type ValueType = frankenpaxos.StringWorkloadProto
      override def isStringWorkload: _root_.scala.Boolean = true
      override def stringWorkload: scala.Option[frankenpaxos.StringWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class UniformSingleKeyWorkload(value: frankenpaxos.UniformSingleKeyWorkloadProto) extends frankenpaxos.WorkloadProto.Value {
      type ValueType = frankenpaxos.UniformSingleKeyWorkloadProto
      override def isUniformSingleKeyWorkload: _root_.scala.Boolean = true
      override def uniformSingleKeyWorkload: scala.Option[frankenpaxos.UniformSingleKeyWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class BernoulliSingleKeyWorkload(value: frankenpaxos.BernoulliSingleKeyWorkloadProto) extends frankenpaxos.WorkloadProto.Value {
      type ValueType = frankenpaxos.BernoulliSingleKeyWorkloadProto
      override def isBernoulliSingleKeyWorkload: _root_.scala.Boolean = true
      override def bernoulliSingleKeyWorkload: scala.Option[frankenpaxos.BernoulliSingleKeyWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class WorkloadProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.WorkloadProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.WorkloadProto](_l) {
    def stringWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.StringWorkloadProto] = field(_.getStringWorkload)((c_, f_) => c_.copy(value = frankenpaxos.WorkloadProto.Value.StringWorkload(f_)))
    def uniformSingleKeyWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.UniformSingleKeyWorkloadProto] = field(_.getUniformSingleKeyWorkload)((c_, f_) => c_.copy(value = frankenpaxos.WorkloadProto.Value.UniformSingleKeyWorkload(f_)))
    def bernoulliSingleKeyWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.BernoulliSingleKeyWorkloadProto] = field(_.getBernoulliSingleKeyWorkload)((c_, f_) => c_.copy(value = frankenpaxos.WorkloadProto.Value.BernoulliSingleKeyWorkload(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.WorkloadProto.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val STRING_WORKLOAD_FIELD_NUMBER = 1
  final val UNIFORM_SINGLE_KEY_WORKLOAD_FIELD_NUMBER = 2
  final val BERNOULLI_SINGLE_KEY_WORKLOAD_FIELD_NUMBER = 3
}
