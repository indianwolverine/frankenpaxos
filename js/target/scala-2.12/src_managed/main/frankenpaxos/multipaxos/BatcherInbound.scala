// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.multipaxos

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class BatcherInbound(
    request: frankenpaxos.multipaxos.BatcherInbound.Request = frankenpaxos.multipaxos.BatcherInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[BatcherInbound] with scalapb.lenses.Updatable[BatcherInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.notLeaderBatcher.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.notLeaderBatcher.get.serializedSize) + request.notLeaderBatcher.get.serializedSize }
      if (request.leaderInfoReplyBatcher.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.leaderInfoReplyBatcher.get.serializedSize) + request.leaderInfoReplyBatcher.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.clientRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.notLeaderBatcher.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.leaderInfoReplyBatcher.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.multipaxos.BatcherInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.multipaxos.BatcherInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.multipaxos.ClientRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.multipaxos.BatcherInbound.Request.NotLeaderBatcher(_root_.scalapb.LiteParser.readMessage(_input__, request.notLeaderBatcher.getOrElse(frankenpaxos.multipaxos.NotLeaderBatcher.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.multipaxos.BatcherInbound.Request.LeaderInfoReplyBatcher(_root_.scalapb.LiteParser.readMessage(_input__, request.leaderInfoReplyBatcher.getOrElse(frankenpaxos.multipaxos.LeaderInfoReplyBatcher.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.multipaxos.BatcherInbound(
          request = __request
      )
    }
    def getClientRequest: frankenpaxos.multipaxos.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.multipaxos.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.multipaxos.ClientRequest): BatcherInbound = copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.ClientRequest(__v))
    def getNotLeaderBatcher: frankenpaxos.multipaxos.NotLeaderBatcher = request.notLeaderBatcher.getOrElse(frankenpaxos.multipaxos.NotLeaderBatcher.defaultInstance)
    def withNotLeaderBatcher(__v: frankenpaxos.multipaxos.NotLeaderBatcher): BatcherInbound = copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.NotLeaderBatcher(__v))
    def getLeaderInfoReplyBatcher: frankenpaxos.multipaxos.LeaderInfoReplyBatcher = request.leaderInfoReplyBatcher.getOrElse(frankenpaxos.multipaxos.LeaderInfoReplyBatcher.defaultInstance)
    def withLeaderInfoReplyBatcher(__v: frankenpaxos.multipaxos.LeaderInfoReplyBatcher): BatcherInbound = copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.LeaderInfoReplyBatcher(__v))
    def clearRequest: BatcherInbound = copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.multipaxos.BatcherInbound.Request): BatcherInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.orNull
        case 2 => request.notLeaderBatcher.orNull
        case 3 => request.leaderInfoReplyBatcher.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.notLeaderBatcher.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.leaderInfoReplyBatcher.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.multipaxos.BatcherInbound
}

object BatcherInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.BatcherInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.BatcherInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.multipaxos.BatcherInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.multipaxos.BatcherInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.ClientRequest]].map(frankenpaxos.multipaxos.BatcherInbound.Request.ClientRequest)
    .orElse[frankenpaxos.multipaxos.BatcherInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.NotLeaderBatcher]].map(frankenpaxos.multipaxos.BatcherInbound.Request.NotLeaderBatcher))
    .orElse[frankenpaxos.multipaxos.BatcherInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.LeaderInfoReplyBatcher]].map(frankenpaxos.multipaxos.BatcherInbound.Request.LeaderInfoReplyBatcher))
    .getOrElse(frankenpaxos.multipaxos.BatcherInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.multipaxos.BatcherInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.multipaxos.BatcherInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.ClientRequest]]).map(frankenpaxos.multipaxos.BatcherInbound.Request.ClientRequest)
    .orElse[frankenpaxos.multipaxos.BatcherInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.NotLeaderBatcher]]).map(frankenpaxos.multipaxos.BatcherInbound.Request.NotLeaderBatcher))
    .orElse[frankenpaxos.multipaxos.BatcherInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.LeaderInfoReplyBatcher]]).map(frankenpaxos.multipaxos.BatcherInbound.Request.LeaderInfoReplyBatcher))
    .getOrElse(frankenpaxos.multipaxos.BatcherInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MultiPaxosProto.javaDescriptor.getMessageTypes.get(37)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MultiPaxosProto.scalaDescriptor.messages(37)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.multipaxos.ClientRequest
      case 2 => __out = frankenpaxos.multipaxos.NotLeaderBatcher
      case 3 => __out = frankenpaxos.multipaxos.LeaderInfoReplyBatcher
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.multipaxos.BatcherInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isClientRequest: _root_.scala.Boolean = false
    def isNotLeaderBatcher: _root_.scala.Boolean = false
    def isLeaderInfoReplyBatcher: _root_.scala.Boolean = false
    def clientRequest: scala.Option[frankenpaxos.multipaxos.ClientRequest] = None
    def notLeaderBatcher: scala.Option[frankenpaxos.multipaxos.NotLeaderBatcher] = None
    def leaderInfoReplyBatcher: scala.Option[frankenpaxos.multipaxos.LeaderInfoReplyBatcher] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.multipaxos.BatcherInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.multipaxos.ClientRequest) extends frankenpaxos.multipaxos.BatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.multipaxos.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class NotLeaderBatcher(value: frankenpaxos.multipaxos.NotLeaderBatcher) extends frankenpaxos.multipaxos.BatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.NotLeaderBatcher
      override def isNotLeaderBatcher: _root_.scala.Boolean = true
      override def notLeaderBatcher: scala.Option[frankenpaxos.multipaxos.NotLeaderBatcher] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class LeaderInfoReplyBatcher(value: frankenpaxos.multipaxos.LeaderInfoReplyBatcher) extends frankenpaxos.multipaxos.BatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.LeaderInfoReplyBatcher
      override def isLeaderInfoReplyBatcher: _root_.scala.Boolean = true
      override def leaderInfoReplyBatcher: scala.Option[frankenpaxos.multipaxos.LeaderInfoReplyBatcher] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class BatcherInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.BatcherInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.multipaxos.BatcherInbound](_l) {
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.ClientRequest(f_)))
    def notLeaderBatcher: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.NotLeaderBatcher] = field(_.getNotLeaderBatcher)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.NotLeaderBatcher(f_)))
    def leaderInfoReplyBatcher: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.LeaderInfoReplyBatcher] = field(_.getLeaderInfoReplyBatcher)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.BatcherInbound.Request.LeaderInfoReplyBatcher(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.BatcherInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val CLIENT_REQUEST_FIELD_NUMBER = 1
  final val NOT_LEADER_BATCHER_FIELD_NUMBER = 2
  final val LEADER_INFO_REPLY_BATCHER_FIELD_NUMBER = 3
}
