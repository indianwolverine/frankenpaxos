// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.multipaxos

@SerialVersionUID(0L)
@scala.scalajs.js.annotation.JSExportAll
final case class ReadBatcherInbound(
    request: frankenpaxos.multipaxos.ReadBatcherInbound.Request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ReadBatcherInbound] with scalapb.lenses.Updatable[ReadBatcherInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.readRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.readRequest.get.serializedSize) + request.readRequest.get.serializedSize }
      if (request.sequentialReadRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.sequentialReadRequest.get.serializedSize) + request.sequentialReadRequest.get.serializedSize }
      if (request.eventualReadRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.eventualReadRequest.get.serializedSize) + request.eventualReadRequest.get.serializedSize }
      if (request.batchMaxSlotReply.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.batchMaxSlotReply.get.serializedSize) + request.batchMaxSlotReply.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.readRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.sequentialReadRequest.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.eventualReadRequest.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.batchMaxSlotReply.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.multipaxos.ReadBatcherInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.ReadRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.readRequest.getOrElse(frankenpaxos.multipaxos.ReadRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.SequentialReadRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.sequentialReadRequest.getOrElse(frankenpaxos.multipaxos.SequentialReadRequest.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.EventualReadRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.eventualReadRequest.getOrElse(frankenpaxos.multipaxos.EventualReadRequest.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.BatchMaxSlotReply(_root_.scalapb.LiteParser.readMessage(_input__, request.batchMaxSlotReply.getOrElse(frankenpaxos.multipaxos.BatchMaxSlotReply.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.multipaxos.ReadBatcherInbound(
          request = __request
      )
    }
    def getReadRequest: frankenpaxos.multipaxos.ReadRequest = request.readRequest.getOrElse(frankenpaxos.multipaxos.ReadRequest.defaultInstance)
    def withReadRequest(__v: frankenpaxos.multipaxos.ReadRequest): ReadBatcherInbound = copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.ReadRequest(__v))
    def getSequentialReadRequest: frankenpaxos.multipaxos.SequentialReadRequest = request.sequentialReadRequest.getOrElse(frankenpaxos.multipaxos.SequentialReadRequest.defaultInstance)
    def withSequentialReadRequest(__v: frankenpaxos.multipaxos.SequentialReadRequest): ReadBatcherInbound = copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.SequentialReadRequest(__v))
    def getEventualReadRequest: frankenpaxos.multipaxos.EventualReadRequest = request.eventualReadRequest.getOrElse(frankenpaxos.multipaxos.EventualReadRequest.defaultInstance)
    def withEventualReadRequest(__v: frankenpaxos.multipaxos.EventualReadRequest): ReadBatcherInbound = copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.EventualReadRequest(__v))
    def getBatchMaxSlotReply: frankenpaxos.multipaxos.BatchMaxSlotReply = request.batchMaxSlotReply.getOrElse(frankenpaxos.multipaxos.BatchMaxSlotReply.defaultInstance)
    def withBatchMaxSlotReply(__v: frankenpaxos.multipaxos.BatchMaxSlotReply): ReadBatcherInbound = copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.BatchMaxSlotReply(__v))
    def clearRequest: ReadBatcherInbound = copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.multipaxos.ReadBatcherInbound.Request): ReadBatcherInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.readRequest.orNull
        case 2 => request.sequentialReadRequest.orNull
        case 3 => request.eventualReadRequest.orNull
        case 4 => request.batchMaxSlotReply.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.readRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.sequentialReadRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.eventualReadRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.batchMaxSlotReply.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.multipaxos.ReadBatcherInbound
}

object ReadBatcherInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.ReadBatcherInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.ReadBatcherInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.multipaxos.ReadBatcherInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.multipaxos.ReadBatcherInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.ReadRequest]].map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.ReadRequest)
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.SequentialReadRequest]].map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.SequentialReadRequest))
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.EventualReadRequest]].map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.EventualReadRequest))
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.BatchMaxSlotReply]].map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.BatchMaxSlotReply))
    .getOrElse(frankenpaxos.multipaxos.ReadBatcherInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.multipaxos.ReadBatcherInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.multipaxos.ReadBatcherInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.ReadRequest]]).map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.ReadRequest)
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.SequentialReadRequest]]).map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.SequentialReadRequest))
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.EventualReadRequest]]).map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.EventualReadRequest))
    .orElse[frankenpaxos.multipaxos.ReadBatcherInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.BatchMaxSlotReply]]).map(frankenpaxos.multipaxos.ReadBatcherInbound.Request.BatchMaxSlotReply))
    .getOrElse(frankenpaxos.multipaxos.ReadBatcherInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MultiPaxosProto.javaDescriptor.getMessageTypes.get(38)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MultiPaxosProto.scalaDescriptor.messages(38)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.multipaxos.ReadRequest
      case 2 => __out = frankenpaxos.multipaxos.SequentialReadRequest
      case 3 => __out = frankenpaxos.multipaxos.EventualReadRequest
      case 4 => __out = frankenpaxos.multipaxos.BatchMaxSlotReply
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.multipaxos.ReadBatcherInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isReadRequest: _root_.scala.Boolean = false
    def isSequentialReadRequest: _root_.scala.Boolean = false
    def isEventualReadRequest: _root_.scala.Boolean = false
    def isBatchMaxSlotReply: _root_.scala.Boolean = false
    def readRequest: scala.Option[frankenpaxos.multipaxos.ReadRequest] = None
    def sequentialReadRequest: scala.Option[frankenpaxos.multipaxos.SequentialReadRequest] = None
    def eventualReadRequest: scala.Option[frankenpaxos.multipaxos.EventualReadRequest] = None
    def batchMaxSlotReply: scala.Option[frankenpaxos.multipaxos.BatchMaxSlotReply] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.multipaxos.ReadBatcherInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ReadRequest(value: frankenpaxos.multipaxos.ReadRequest) extends frankenpaxos.multipaxos.ReadBatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.ReadRequest
      override def isReadRequest: _root_.scala.Boolean = true
      override def readRequest: scala.Option[frankenpaxos.multipaxos.ReadRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class SequentialReadRequest(value: frankenpaxos.multipaxos.SequentialReadRequest) extends frankenpaxos.multipaxos.ReadBatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.SequentialReadRequest
      override def isSequentialReadRequest: _root_.scala.Boolean = true
      override def sequentialReadRequest: scala.Option[frankenpaxos.multipaxos.SequentialReadRequest] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class EventualReadRequest(value: frankenpaxos.multipaxos.EventualReadRequest) extends frankenpaxos.multipaxos.ReadBatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.EventualReadRequest
      override def isEventualReadRequest: _root_.scala.Boolean = true
      override def eventualReadRequest: scala.Option[frankenpaxos.multipaxos.EventualReadRequest] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class BatchMaxSlotReply(value: frankenpaxos.multipaxos.BatchMaxSlotReply) extends frankenpaxos.multipaxos.ReadBatcherInbound.Request {
      type ValueType = frankenpaxos.multipaxos.BatchMaxSlotReply
      override def isBatchMaxSlotReply: _root_.scala.Boolean = true
      override def batchMaxSlotReply: scala.Option[frankenpaxos.multipaxos.BatchMaxSlotReply] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class ReadBatcherInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ReadBatcherInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.multipaxos.ReadBatcherInbound](_l) {
    def readRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ReadRequest] = field(_.getReadRequest)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.ReadRequest(f_)))
    def sequentialReadRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.SequentialReadRequest] = field(_.getSequentialReadRequest)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.SequentialReadRequest(f_)))
    def eventualReadRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.EventualReadRequest] = field(_.getEventualReadRequest)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.EventualReadRequest(f_)))
    def batchMaxSlotReply: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.BatchMaxSlotReply] = field(_.getBatchMaxSlotReply)((c_, f_) => c_.copy(request = frankenpaxos.multipaxos.ReadBatcherInbound.Request.BatchMaxSlotReply(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ReadBatcherInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val READ_REQUEST_FIELD_NUMBER = 1
  final val SEQUENTIAL_READ_REQUEST_FIELD_NUMBER = 2
  final val EVENTUAL_READ_REQUEST_FIELD_NUMBER = 3
  final val BATCH_MAX_SLOT_REPLY_FIELD_NUMBER = 4
}
