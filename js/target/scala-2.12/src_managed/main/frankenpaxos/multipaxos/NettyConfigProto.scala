// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.multipaxos

@SerialVersionUID(0L)
final case class NettyConfigProto(
    f: _root_.scala.Int,
    batcherAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    readBatcherAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    leaderAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    leaderElectionAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    proxyLeaderAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    acceptorAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.AcceptorGroup] = _root_.scala.collection.Seq.empty,
    replicaAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    proxyReplicaAddress: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto] = _root_.scala.collection.Seq.empty,
    distributionScheme: frankenpaxos.multipaxos.DistributionSchemeProto
    ) extends scalapb.GeneratedMessage with scalapb.Message[NettyConfigProto] with scalapb.lenses.Updatable[NettyConfigProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, f)
      batcherAddress.foreach(batcherAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(batcherAddress.serializedSize) + batcherAddress.serializedSize)
      readBatcherAddress.foreach(readBatcherAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(readBatcherAddress.serializedSize) + readBatcherAddress.serializedSize)
      leaderAddress.foreach(leaderAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leaderAddress.serializedSize) + leaderAddress.serializedSize)
      leaderElectionAddress.foreach(leaderElectionAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leaderElectionAddress.serializedSize) + leaderElectionAddress.serializedSize)
      proxyLeaderAddress.foreach(proxyLeaderAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(proxyLeaderAddress.serializedSize) + proxyLeaderAddress.serializedSize)
      acceptorAddress.foreach(acceptorAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(acceptorAddress.serializedSize) + acceptorAddress.serializedSize)
      replicaAddress.foreach(replicaAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(replicaAddress.serializedSize) + replicaAddress.serializedSize)
      proxyReplicaAddress.foreach(proxyReplicaAddress => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(proxyReplicaAddress.serializedSize) + proxyReplicaAddress.serializedSize)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(10, distributionScheme.value)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, f)
      batcherAddress.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      readBatcherAddress.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      leaderAddress.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      leaderElectionAddress.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      proxyLeaderAddress.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      acceptorAddress.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      replicaAddress.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      proxyReplicaAddress.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      _output__.writeEnum(10, distributionScheme.value)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.multipaxos.NettyConfigProto = {
      var __f = this.f
      val __batcherAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.batcherAddress)
      val __readBatcherAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.readBatcherAddress)
      val __leaderAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.leaderAddress)
      val __leaderElectionAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.leaderElectionAddress)
      val __proxyLeaderAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.proxyLeaderAddress)
      val __acceptorAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.AcceptorGroup] ++= this.acceptorAddress)
      val __replicaAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.replicaAddress)
      val __proxyReplicaAddress = (_root_.scala.collection.immutable.Vector.newBuilder[frankenpaxos.multipaxos.HostPortProto] ++= this.proxyReplicaAddress)
      var __distributionScheme = this.distributionScheme
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __f = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __batcherAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 26 =>
            __readBatcherAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 34 =>
            __leaderAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 42 =>
            __leaderElectionAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 50 =>
            __proxyLeaderAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 58 =>
            __acceptorAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.AcceptorGroup.defaultInstance)
          case 66 =>
            __replicaAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 74 =>
            __proxyReplicaAddress += _root_.scalapb.LiteParser.readMessage(_input__, frankenpaxos.multipaxos.HostPortProto.defaultInstance)
          case 80 =>
            __distributionScheme = frankenpaxos.multipaxos.DistributionSchemeProto.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.multipaxos.NettyConfigProto(
          f = __f,
          batcherAddress = __batcherAddress.result(),
          readBatcherAddress = __readBatcherAddress.result(),
          leaderAddress = __leaderAddress.result(),
          leaderElectionAddress = __leaderElectionAddress.result(),
          proxyLeaderAddress = __proxyLeaderAddress.result(),
          acceptorAddress = __acceptorAddress.result(),
          replicaAddress = __replicaAddress.result(),
          proxyReplicaAddress = __proxyReplicaAddress.result(),
          distributionScheme = __distributionScheme
      )
    }
    def withF(__v: _root_.scala.Int): NettyConfigProto = copy(f = __v)
    def clearBatcherAddress = copy(batcherAddress = _root_.scala.collection.Seq.empty)
    def addBatcherAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllBatcherAddress(__vs)
    def addAllBatcherAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(batcherAddress = batcherAddress ++ __vs)
    def withBatcherAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(batcherAddress = __v)
    def clearReadBatcherAddress = copy(readBatcherAddress = _root_.scala.collection.Seq.empty)
    def addReadBatcherAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllReadBatcherAddress(__vs)
    def addAllReadBatcherAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(readBatcherAddress = readBatcherAddress ++ __vs)
    def withReadBatcherAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(readBatcherAddress = __v)
    def clearLeaderAddress = copy(leaderAddress = _root_.scala.collection.Seq.empty)
    def addLeaderAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllLeaderAddress(__vs)
    def addAllLeaderAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(leaderAddress = leaderAddress ++ __vs)
    def withLeaderAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(leaderAddress = __v)
    def clearLeaderElectionAddress = copy(leaderElectionAddress = _root_.scala.collection.Seq.empty)
    def addLeaderElectionAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllLeaderElectionAddress(__vs)
    def addAllLeaderElectionAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(leaderElectionAddress = leaderElectionAddress ++ __vs)
    def withLeaderElectionAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(leaderElectionAddress = __v)
    def clearProxyLeaderAddress = copy(proxyLeaderAddress = _root_.scala.collection.Seq.empty)
    def addProxyLeaderAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllProxyLeaderAddress(__vs)
    def addAllProxyLeaderAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(proxyLeaderAddress = proxyLeaderAddress ++ __vs)
    def withProxyLeaderAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(proxyLeaderAddress = __v)
    def clearAcceptorAddress = copy(acceptorAddress = _root_.scala.collection.Seq.empty)
    def addAcceptorAddress(__vs: frankenpaxos.multipaxos.AcceptorGroup*): NettyConfigProto = addAllAcceptorAddress(__vs)
    def addAllAcceptorAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.AcceptorGroup]): NettyConfigProto = copy(acceptorAddress = acceptorAddress ++ __vs)
    def withAcceptorAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.AcceptorGroup]): NettyConfigProto = copy(acceptorAddress = __v)
    def clearReplicaAddress = copy(replicaAddress = _root_.scala.collection.Seq.empty)
    def addReplicaAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllReplicaAddress(__vs)
    def addAllReplicaAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(replicaAddress = replicaAddress ++ __vs)
    def withReplicaAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(replicaAddress = __v)
    def clearProxyReplicaAddress = copy(proxyReplicaAddress = _root_.scala.collection.Seq.empty)
    def addProxyReplicaAddress(__vs: frankenpaxos.multipaxos.HostPortProto*): NettyConfigProto = addAllProxyReplicaAddress(__vs)
    def addAllProxyReplicaAddress(__vs: TraversableOnce[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(proxyReplicaAddress = proxyReplicaAddress ++ __vs)
    def withProxyReplicaAddress(__v: _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]): NettyConfigProto = copy(proxyReplicaAddress = __v)
    def withDistributionScheme(__v: frankenpaxos.multipaxos.DistributionSchemeProto): NettyConfigProto = copy(distributionScheme = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => f
        case 2 => batcherAddress
        case 3 => readBatcherAddress
        case 4 => leaderAddress
        case 5 => leaderElectionAddress
        case 6 => proxyLeaderAddress
        case 7 => acceptorAddress
        case 8 => replicaAddress
        case 9 => proxyReplicaAddress
        case 10 => distributionScheme.javaValueDescriptor
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(f)
        case 2 => _root_.scalapb.descriptors.PRepeated(batcherAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(readBatcherAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(leaderAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(leaderElectionAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(proxyLeaderAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(acceptorAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 8 => _root_.scalapb.descriptors.PRepeated(replicaAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 9 => _root_.scalapb.descriptors.PRepeated(proxyReplicaAddress.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PEnum(distributionScheme.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.multipaxos.NettyConfigProto
}

object NettyConfigProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.NettyConfigProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.NettyConfigProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.multipaxos.NettyConfigProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.multipaxos.NettyConfigProto(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.AcceptorGroup]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]],
      frankenpaxos.multipaxos.DistributionSchemeProto.fromValue(__fieldsMap(__fields.get(9)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.multipaxos.NettyConfigProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.multipaxos.NettyConfigProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.AcceptorGroup]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]]).getOrElse(_root_.scala.collection.Seq.empty),
        frankenpaxos.multipaxos.DistributionSchemeProto.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConfigProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConfigProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = frankenpaxos.multipaxos.HostPortProto
      case 3 => __out = frankenpaxos.multipaxos.HostPortProto
      case 4 => __out = frankenpaxos.multipaxos.HostPortProto
      case 5 => __out = frankenpaxos.multipaxos.HostPortProto
      case 6 => __out = frankenpaxos.multipaxos.HostPortProto
      case 7 => __out = frankenpaxos.multipaxos.AcceptorGroup
      case 8 => __out = frankenpaxos.multipaxos.HostPortProto
      case 9 => __out = frankenpaxos.multipaxos.HostPortProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 10 => frankenpaxos.multipaxos.DistributionSchemeProto
    }
  }
  lazy val defaultInstance = frankenpaxos.multipaxos.NettyConfigProto(
    f = 0,
    distributionScheme = frankenpaxos.multipaxos.DistributionSchemeProto.HASH
  )
  implicit class NettyConfigProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.NettyConfigProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.multipaxos.NettyConfigProto](_l) {
    def f: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.f)((c_, f_) => c_.copy(f = f_))
    def batcherAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.batcherAddress)((c_, f_) => c_.copy(batcherAddress = f_))
    def readBatcherAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.readBatcherAddress)((c_, f_) => c_.copy(readBatcherAddress = f_))
    def leaderAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.leaderAddress)((c_, f_) => c_.copy(leaderAddress = f_))
    def leaderElectionAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.leaderElectionAddress)((c_, f_) => c_.copy(leaderElectionAddress = f_))
    def proxyLeaderAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.proxyLeaderAddress)((c_, f_) => c_.copy(proxyLeaderAddress = f_))
    def acceptorAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.AcceptorGroup]] = field(_.acceptorAddress)((c_, f_) => c_.copy(acceptorAddress = f_))
    def replicaAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.replicaAddress)((c_, f_) => c_.copy(replicaAddress = f_))
    def proxyReplicaAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[frankenpaxos.multipaxos.HostPortProto]] = field(_.proxyReplicaAddress)((c_, f_) => c_.copy(proxyReplicaAddress = f_))
    def distributionScheme: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.DistributionSchemeProto] = field(_.distributionScheme)((c_, f_) => c_.copy(distributionScheme = f_))
  }
  final val F_FIELD_NUMBER = 1
  final val BATCHER_ADDRESS_FIELD_NUMBER = 2
  final val READ_BATCHER_ADDRESS_FIELD_NUMBER = 3
  final val LEADER_ADDRESS_FIELD_NUMBER = 4
  final val LEADER_ELECTION_ADDRESS_FIELD_NUMBER = 5
  final val PROXY_LEADER_ADDRESS_FIELD_NUMBER = 6
  final val ACCEPTOR_ADDRESS_FIELD_NUMBER = 7
  final val REPLICA_ADDRESS_FIELD_NUMBER = 8
  final val PROXY_REPLICA_ADDRESS_FIELD_NUMBER = 9
  final val DISTRIBUTION_SCHEME_FIELD_NUMBER = 10
}
