// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.multipaxos

@SerialVersionUID(0L)
final case class ReadWriteWorkloadProto(
    value: frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ReadWriteWorkloadProto] with scalapb.lenses.Updatable[ReadWriteWorkloadProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (value.uniformReadWriteWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.uniformReadWriteWorkload.get.serializedSize) + value.uniformReadWriteWorkload.get.serializedSize }
      if (value.uniformMultiKeyReadWriteWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.uniformMultiKeyReadWriteWorkload.get.serializedSize) + value.uniformMultiKeyReadWriteWorkload.get.serializedSize }
      if (value.writeOnlyStringWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.writeOnlyStringWorkload.get.serializedSize) + value.writeOnlyStringWorkload.get.serializedSize }
      if (value.writeOnlyUniformSingleKeyWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.writeOnlyUniformSingleKeyWorkload.get.serializedSize) + value.writeOnlyUniformSingleKeyWorkload.get.serializedSize }
      if (value.writeOnlyBernoulliSingleKeyWorkload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.writeOnlyBernoulliSingleKeyWorkload.get.serializedSize) + value.writeOnlyBernoulliSingleKeyWorkload.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.uniformReadWriteWorkload.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.uniformMultiKeyReadWriteWorkload.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.writeOnlyStringWorkload.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.writeOnlyUniformSingleKeyWorkload.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.writeOnlyBernoulliSingleKeyWorkload.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.multipaxos.ReadWriteWorkloadProto = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformReadWriteWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.uniformReadWriteWorkload.getOrElse(frankenpaxos.multipaxos.UniformReadWriteWorkloadProto.defaultInstance)))
          case 18 =>
            __value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformMultiKeyReadWriteWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.uniformMultiKeyReadWriteWorkload.getOrElse(frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto.defaultInstance)))
          case 26 =>
            __value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyStringWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.writeOnlyStringWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto.defaultInstance)))
          case 34 =>
            __value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyUniformSingleKeyWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.writeOnlyUniformSingleKeyWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto.defaultInstance)))
          case 42 =>
            __value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyBernoulliSingleKeyWorkload(_root_.scalapb.LiteParser.readMessage(_input__, value.writeOnlyBernoulliSingleKeyWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.multipaxos.ReadWriteWorkloadProto(
          value = __value
      )
    }
    def getUniformReadWriteWorkload: frankenpaxos.multipaxos.UniformReadWriteWorkloadProto = value.uniformReadWriteWorkload.getOrElse(frankenpaxos.multipaxos.UniformReadWriteWorkloadProto.defaultInstance)
    def withUniformReadWriteWorkload(__v: frankenpaxos.multipaxos.UniformReadWriteWorkloadProto): ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformReadWriteWorkload(__v))
    def getUniformMultiKeyReadWriteWorkload: frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto = value.uniformMultiKeyReadWriteWorkload.getOrElse(frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto.defaultInstance)
    def withUniformMultiKeyReadWriteWorkload(__v: frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto): ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformMultiKeyReadWriteWorkload(__v))
    def getWriteOnlyStringWorkload: frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto = value.writeOnlyStringWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto.defaultInstance)
    def withWriteOnlyStringWorkload(__v: frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto): ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyStringWorkload(__v))
    def getWriteOnlyUniformSingleKeyWorkload: frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto = value.writeOnlyUniformSingleKeyWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto.defaultInstance)
    def withWriteOnlyUniformSingleKeyWorkload(__v: frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto): ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyUniformSingleKeyWorkload(__v))
    def getWriteOnlyBernoulliSingleKeyWorkload: frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto = value.writeOnlyBernoulliSingleKeyWorkload.getOrElse(frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto.defaultInstance)
    def withWriteOnlyBernoulliSingleKeyWorkload(__v: frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto): ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyBernoulliSingleKeyWorkload(__v))
    def clearValue: ReadWriteWorkloadProto = copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.Empty)
    def withValue(__v: frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value): ReadWriteWorkloadProto = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.uniformReadWriteWorkload.orNull
        case 2 => value.uniformMultiKeyReadWriteWorkload.orNull
        case 3 => value.writeOnlyStringWorkload.orNull
        case 4 => value.writeOnlyUniformSingleKeyWorkload.orNull
        case 5 => value.writeOnlyBernoulliSingleKeyWorkload.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.uniformReadWriteWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.uniformMultiKeyReadWriteWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.writeOnlyStringWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => value.writeOnlyUniformSingleKeyWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => value.writeOnlyBernoulliSingleKeyWorkload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.multipaxos.ReadWriteWorkloadProto
}

object ReadWriteWorkloadProto extends scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.ReadWriteWorkloadProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.multipaxos.ReadWriteWorkloadProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.multipaxos.ReadWriteWorkloadProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.multipaxos.ReadWriteWorkloadProto(
      value = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.UniformReadWriteWorkloadProto]].map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformReadWriteWorkload)
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto]].map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformMultiKeyReadWriteWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto]].map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyStringWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto]].map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyUniformSingleKeyWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto]].map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyBernoulliSingleKeyWorkload))
    .getOrElse(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.multipaxos.ReadWriteWorkloadProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.multipaxos.ReadWriteWorkloadProto(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.UniformReadWriteWorkloadProto]]).map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformReadWriteWorkload)
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto]]).map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformMultiKeyReadWriteWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto]]).map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyStringWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto]]).map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyUniformSingleKeyWorkload))
    .orElse[frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto]]).map(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyBernoulliSingleKeyWorkload))
    .getOrElse(frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ReadWriteWorkloadProtoCompanion.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ReadWriteWorkloadProtoCompanion.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.multipaxos.UniformReadWriteWorkloadProto
      case 2 => __out = frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto
      case 3 => __out = frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto
      case 4 => __out = frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto
      case 5 => __out = frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.multipaxos.ReadWriteWorkloadProto(
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isUniformReadWriteWorkload: _root_.scala.Boolean = false
    def isUniformMultiKeyReadWriteWorkload: _root_.scala.Boolean = false
    def isWriteOnlyStringWorkload: _root_.scala.Boolean = false
    def isWriteOnlyUniformSingleKeyWorkload: _root_.scala.Boolean = false
    def isWriteOnlyBernoulliSingleKeyWorkload: _root_.scala.Boolean = false
    def uniformReadWriteWorkload: scala.Option[frankenpaxos.multipaxos.UniformReadWriteWorkloadProto] = None
    def uniformMultiKeyReadWriteWorkload: scala.Option[frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto] = None
    def writeOnlyStringWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto] = None
    def writeOnlyUniformSingleKeyWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto] = None
    def writeOnlyBernoulliSingleKeyWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto] = None
  }
  object Value extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class UniformReadWriteWorkload(value: frankenpaxos.multipaxos.UniformReadWriteWorkloadProto) extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = frankenpaxos.multipaxos.UniformReadWriteWorkloadProto
      override def isUniformReadWriteWorkload: _root_.scala.Boolean = true
      override def uniformReadWriteWorkload: scala.Option[frankenpaxos.multipaxos.UniformReadWriteWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class UniformMultiKeyReadWriteWorkload(value: frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto) extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto
      override def isUniformMultiKeyReadWriteWorkload: _root_.scala.Boolean = true
      override def uniformMultiKeyReadWriteWorkload: scala.Option[frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class WriteOnlyStringWorkload(value: frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto) extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto
      override def isWriteOnlyStringWorkload: _root_.scala.Boolean = true
      override def writeOnlyStringWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class WriteOnlyUniformSingleKeyWorkload(value: frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto) extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto
      override def isWriteOnlyUniformSingleKeyWorkload: _root_.scala.Boolean = true
      override def writeOnlyUniformSingleKeyWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class WriteOnlyBernoulliSingleKeyWorkload(value: frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto) extends frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value {
      type ValueType = frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto
      override def isWriteOnlyBernoulliSingleKeyWorkload: _root_.scala.Boolean = true
      override def writeOnlyBernoulliSingleKeyWorkload: scala.Option[frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  implicit class ReadWriteWorkloadProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ReadWriteWorkloadProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.multipaxos.ReadWriteWorkloadProto](_l) {
    def uniformReadWriteWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.UniformReadWriteWorkloadProto] = field(_.getUniformReadWriteWorkload)((c_, f_) => c_.copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformReadWriteWorkload(f_)))
    def uniformMultiKeyReadWriteWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.UniformMultiKeyReadWriteWorkloadProto] = field(_.getUniformMultiKeyReadWriteWorkload)((c_, f_) => c_.copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.UniformMultiKeyReadWriteWorkload(f_)))
    def writeOnlyStringWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.WriteOnlyStringWorkloadProto] = field(_.getWriteOnlyStringWorkload)((c_, f_) => c_.copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyStringWorkload(f_)))
    def writeOnlyUniformSingleKeyWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.WriteOnlyUniformSingleKeyWorkloadProto] = field(_.getWriteOnlyUniformSingleKeyWorkload)((c_, f_) => c_.copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyUniformSingleKeyWorkload(f_)))
    def writeOnlyBernoulliSingleKeyWorkload: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.WriteOnlyBernoulliSingleKeyWorkloadProto] = field(_.getWriteOnlyBernoulliSingleKeyWorkload)((c_, f_) => c_.copy(value = frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value.WriteOnlyBernoulliSingleKeyWorkload(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.multipaxos.ReadWriteWorkloadProto.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val UNIFORM_READ_WRITE_WORKLOAD_FIELD_NUMBER = 1
  final val UNIFORM_MULTI_KEY_READ_WRITE_WORKLOAD_FIELD_NUMBER = 2
  final val WRITE_ONLY_STRING_WORKLOAD_FIELD_NUMBER = 3
  final val WRITE_ONLY_UNIFORM_SINGLE_KEY_WORKLOAD_FIELD_NUMBER = 4
  final val WRITE_ONLY_BERNOULLI_SINGLE_KEY_WORKLOAD_FIELD_NUMBER = 5
}
