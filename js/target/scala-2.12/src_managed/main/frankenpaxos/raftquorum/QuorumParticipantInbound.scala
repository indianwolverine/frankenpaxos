// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.raftquorum

@SerialVersionUID(0L)
final case class QuorumParticipantInbound(
    request: frankenpaxos.raftquorum.QuorumParticipantInbound.Request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[QuorumParticipantInbound] with scalapb.lenses.Updatable[QuorumParticipantInbound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (request.voteRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.voteRequest.get.serializedSize) + request.voteRequest.get.serializedSize }
      if (request.voteResponse.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.voteResponse.get.serializedSize) + request.voteResponse.get.serializedSize }
      if (request.appendEntriesRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.appendEntriesRequest.get.serializedSize) + request.appendEntriesRequest.get.serializedSize }
      if (request.appendEntriesResponse.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.appendEntriesResponse.get.serializedSize) + request.appendEntriesResponse.get.serializedSize }
      if (request.clientRequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientRequest.get.serializedSize) + request.clientRequest.get.serializedSize }
      if (request.clientQuorumQuery.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.clientQuorumQuery.get.serializedSize) + request.clientQuorumQuery.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      request.voteRequest.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.voteResponse.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.appendEntriesRequest.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.appendEntriesResponse.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.clientRequest.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      request.clientQuorumQuery.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.raftquorum.QuorumParticipantInbound = {
      var __request = this.request
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.voteRequest.getOrElse(frankenpaxos.raft.VoteRequest.defaultInstance)))
          case 18 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteResponse(_root_.scalapb.LiteParser.readMessage(_input__, request.voteResponse.getOrElse(frankenpaxos.raft.VoteResponse.defaultInstance)))
          case 26 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.appendEntriesRequest.getOrElse(frankenpaxos.raft.AppendEntriesRequest.defaultInstance)))
          case 34 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesResponse(_root_.scalapb.LiteParser.readMessage(_input__, request.appendEntriesResponse.getOrElse(frankenpaxos.raft.AppendEntriesResponse.defaultInstance)))
          case 42 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientRequest(_root_.scalapb.LiteParser.readMessage(_input__, request.clientRequest.getOrElse(frankenpaxos.raft.ClientRequest.defaultInstance)))
          case 50 =>
            __request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientQuorumQuery(_root_.scalapb.LiteParser.readMessage(_input__, request.clientQuorumQuery.getOrElse(frankenpaxos.raftquorum.ClientQuorumQuery.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      frankenpaxos.raftquorum.QuorumParticipantInbound(
          request = __request
      )
    }
    def getVoteRequest: frankenpaxos.raft.VoteRequest = request.voteRequest.getOrElse(frankenpaxos.raft.VoteRequest.defaultInstance)
    def withVoteRequest(__v: frankenpaxos.raft.VoteRequest): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteRequest(__v))
    def getVoteResponse: frankenpaxos.raft.VoteResponse = request.voteResponse.getOrElse(frankenpaxos.raft.VoteResponse.defaultInstance)
    def withVoteResponse(__v: frankenpaxos.raft.VoteResponse): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteResponse(__v))
    def getAppendEntriesRequest: frankenpaxos.raft.AppendEntriesRequest = request.appendEntriesRequest.getOrElse(frankenpaxos.raft.AppendEntriesRequest.defaultInstance)
    def withAppendEntriesRequest(__v: frankenpaxos.raft.AppendEntriesRequest): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesRequest(__v))
    def getAppendEntriesResponse: frankenpaxos.raft.AppendEntriesResponse = request.appendEntriesResponse.getOrElse(frankenpaxos.raft.AppendEntriesResponse.defaultInstance)
    def withAppendEntriesResponse(__v: frankenpaxos.raft.AppendEntriesResponse): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesResponse(__v))
    def getClientRequest: frankenpaxos.raft.ClientRequest = request.clientRequest.getOrElse(frankenpaxos.raft.ClientRequest.defaultInstance)
    def withClientRequest(__v: frankenpaxos.raft.ClientRequest): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientRequest(__v))
    def getClientQuorumQuery: frankenpaxos.raftquorum.ClientQuorumQuery = request.clientQuorumQuery.getOrElse(frankenpaxos.raftquorum.ClientQuorumQuery.defaultInstance)
    def withClientQuorumQuery(__v: frankenpaxos.raftquorum.ClientQuorumQuery): QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientQuorumQuery(__v))
    def clearRequest: QuorumParticipantInbound = copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.Empty)
    def withRequest(__v: frankenpaxos.raftquorum.QuorumParticipantInbound.Request): QuorumParticipantInbound = copy(request = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => request.voteRequest.orNull
        case 2 => request.voteResponse.orNull
        case 3 => request.appendEntriesRequest.orNull
        case 4 => request.appendEntriesResponse.orNull
        case 5 => request.clientRequest.orNull
        case 6 => request.clientQuorumQuery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => request.voteRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => request.voteResponse.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => request.appendEntriesRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => request.appendEntriesResponse.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => request.clientRequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => request.clientQuorumQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.raftquorum.QuorumParticipantInbound
}

object QuorumParticipantInbound extends scalapb.GeneratedMessageCompanion[frankenpaxos.raftquorum.QuorumParticipantInbound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.raftquorum.QuorumParticipantInbound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.raftquorum.QuorumParticipantInbound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.raftquorum.QuorumParticipantInbound(
      request = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[frankenpaxos.raft.VoteRequest]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteRequest)
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[frankenpaxos.raft.VoteResponse]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteResponse))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[frankenpaxos.raft.AppendEntriesRequest]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesRequest))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[frankenpaxos.raft.AppendEntriesResponse]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesResponse))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[frankenpaxos.raft.ClientRequest]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientRequest))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[frankenpaxos.raftquorum.ClientQuorumQuery]].map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientQuorumQuery))
    .getOrElse(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.raftquorum.QuorumParticipantInbound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.raftquorum.QuorumParticipantInbound(
        request = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[frankenpaxos.raft.VoteRequest]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteRequest)
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[frankenpaxos.raft.VoteResponse]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteResponse))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[frankenpaxos.raft.AppendEntriesRequest]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesRequest))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[frankenpaxos.raft.AppendEntriesResponse]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesResponse))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[frankenpaxos.raft.ClientRequest]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientRequest))
    .orElse[frankenpaxos.raftquorum.QuorumParticipantInbound.Request](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[frankenpaxos.raftquorum.ClientQuorumQuery]]).map(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientQuorumQuery))
    .getOrElse(frankenpaxos.raftquorum.QuorumParticipantInbound.Request.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftQuorumProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftQuorumProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = frankenpaxos.raft.VoteRequest
      case 2 => __out = frankenpaxos.raft.VoteResponse
      case 3 => __out = frankenpaxos.raft.AppendEntriesRequest
      case 4 => __out = frankenpaxos.raft.AppendEntriesResponse
      case 5 => __out = frankenpaxos.raft.ClientRequest
      case 6 => __out = frankenpaxos.raftquorum.ClientQuorumQuery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.raftquorum.QuorumParticipantInbound(
  )
  sealed trait Request extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isVoteRequest: _root_.scala.Boolean = false
    def isVoteResponse: _root_.scala.Boolean = false
    def isAppendEntriesRequest: _root_.scala.Boolean = false
    def isAppendEntriesResponse: _root_.scala.Boolean = false
    def isClientRequest: _root_.scala.Boolean = false
    def isClientQuorumQuery: _root_.scala.Boolean = false
    def voteRequest: scala.Option[frankenpaxos.raft.VoteRequest] = None
    def voteResponse: scala.Option[frankenpaxos.raft.VoteResponse] = None
    def appendEntriesRequest: scala.Option[frankenpaxos.raft.AppendEntriesRequest] = None
    def appendEntriesResponse: scala.Option[frankenpaxos.raft.AppendEntriesResponse] = None
    def clientRequest: scala.Option[frankenpaxos.raft.ClientRequest] = None
    def clientQuorumQuery: scala.Option[frankenpaxos.raftquorum.ClientQuorumQuery] = None
  }
  object Request extends {
    @SerialVersionUID(0L)
    case object Empty extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class VoteRequest(value: frankenpaxos.raft.VoteRequest) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raft.VoteRequest
      override def isVoteRequest: _root_.scala.Boolean = true
      override def voteRequest: scala.Option[frankenpaxos.raft.VoteRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class VoteResponse(value: frankenpaxos.raft.VoteResponse) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raft.VoteResponse
      override def isVoteResponse: _root_.scala.Boolean = true
      override def voteResponse: scala.Option[frankenpaxos.raft.VoteResponse] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class AppendEntriesRequest(value: frankenpaxos.raft.AppendEntriesRequest) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raft.AppendEntriesRequest
      override def isAppendEntriesRequest: _root_.scala.Boolean = true
      override def appendEntriesRequest: scala.Option[frankenpaxos.raft.AppendEntriesRequest] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class AppendEntriesResponse(value: frankenpaxos.raft.AppendEntriesResponse) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raft.AppendEntriesResponse
      override def isAppendEntriesResponse: _root_.scala.Boolean = true
      override def appendEntriesResponse: scala.Option[frankenpaxos.raft.AppendEntriesResponse] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class ClientRequest(value: frankenpaxos.raft.ClientRequest) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raft.ClientRequest
      override def isClientRequest: _root_.scala.Boolean = true
      override def clientRequest: scala.Option[frankenpaxos.raft.ClientRequest] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class ClientQuorumQuery(value: frankenpaxos.raftquorum.ClientQuorumQuery) extends frankenpaxos.raftquorum.QuorumParticipantInbound.Request {
      type ValueType = frankenpaxos.raftquorum.ClientQuorumQuery
      override def isClientQuorumQuery: _root_.scala.Boolean = true
      override def clientQuorumQuery: scala.Option[frankenpaxos.raftquorum.ClientQuorumQuery] = Some(value)
      override def number: _root_.scala.Int = 6
    }
  }
  implicit class QuorumParticipantInboundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raftquorum.QuorumParticipantInbound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.raftquorum.QuorumParticipantInbound](_l) {
    def voteRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.VoteRequest] = field(_.getVoteRequest)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteRequest(f_)))
    def voteResponse: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.VoteResponse] = field(_.getVoteResponse)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.VoteResponse(f_)))
    def appendEntriesRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.AppendEntriesRequest] = field(_.getAppendEntriesRequest)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesRequest(f_)))
    def appendEntriesResponse: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.AppendEntriesResponse] = field(_.getAppendEntriesResponse)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.AppendEntriesResponse(f_)))
    def clientRequest: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raft.ClientRequest] = field(_.getClientRequest)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientRequest(f_)))
    def clientQuorumQuery: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raftquorum.ClientQuorumQuery] = field(_.getClientQuorumQuery)((c_, f_) => c_.copy(request = frankenpaxos.raftquorum.QuorumParticipantInbound.Request.ClientQuorumQuery(f_)))
    def request: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.raftquorum.QuorumParticipantInbound.Request] = field(_.request)((c_, f_) => c_.copy(request = f_))
  }
  final val VOTE_REQUEST_FIELD_NUMBER = 1
  final val VOTE_RESPONSE_FIELD_NUMBER = 2
  final val APPEND_ENTRIES_REQUEST_FIELD_NUMBER = 3
  final val APPEND_ENTRIES_RESPONSE_FIELD_NUMBER = 4
  final val CLIENT_REQUEST_FIELD_NUMBER = 5
  final val CLIENT_QUORUM_QUERY_FIELD_NUMBER = 6
}
