// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package frankenpaxos.fastpaxos

@SerialVersionUID(0L)
final case class Phase1b(
    acceptorId: _root_.scala.Int,
    round: _root_.scala.Int,
    voteRound: _root_.scala.Int,
    voteValue: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phase1b] with scalapb.lenses.Updatable[Phase1b] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, acceptorId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, round)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, voteRound)
      if (voteValue.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, voteValue.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeInt32(1, acceptorId)
      _output__.writeInt32(2, round)
      _output__.writeInt32(3, voteRound)
      voteValue.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): frankenpaxos.fastpaxos.Phase1b = {
      var __acceptorId = this.acceptorId
      var __round = this.round
      var __voteRound = this.voteRound
      var __voteValue = this.voteValue
      var __requiredFields0: _root_.scala.Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __acceptorId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __round = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __voteRound = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __voteValue = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      frankenpaxos.fastpaxos.Phase1b(
          acceptorId = __acceptorId,
          round = __round,
          voteRound = __voteRound,
          voteValue = __voteValue
      )
    }
    def withAcceptorId(__v: _root_.scala.Int): Phase1b = copy(acceptorId = __v)
    def withRound(__v: _root_.scala.Int): Phase1b = copy(round = __v)
    def withVoteRound(__v: _root_.scala.Int): Phase1b = copy(voteRound = __v)
    def getVoteValue: _root_.scala.Predef.String = voteValue.getOrElse("")
    def clearVoteValue: Phase1b = copy(voteValue = None)
    def withVoteValue(__v: _root_.scala.Predef.String): Phase1b = copy(voteValue = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => acceptorId
        case 2 => round
        case 3 => voteRound
        case 4 => voteValue.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(acceptorId)
        case 2 => _root_.scalapb.descriptors.PInt(round)
        case 3 => _root_.scalapb.descriptors.PInt(voteRound)
        case 4 => voteValue.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = frankenpaxos.fastpaxos.Phase1b
}

object Phase1b extends scalapb.GeneratedMessageCompanion[frankenpaxos.fastpaxos.Phase1b] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[frankenpaxos.fastpaxos.Phase1b] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): frankenpaxos.fastpaxos.Phase1b = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    frankenpaxos.fastpaxos.Phase1b(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[frankenpaxos.fastpaxos.Phase1b] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      frankenpaxos.fastpaxos.Phase1b(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FastPaxosProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FastPaxosProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = frankenpaxos.fastpaxos.Phase1b(
    acceptorId = 0,
    round = 0,
    voteRound = 0
  )
  implicit class Phase1bLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, frankenpaxos.fastpaxos.Phase1b]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, frankenpaxos.fastpaxos.Phase1b](_l) {
    def acceptorId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.acceptorId)((c_, f_) => c_.copy(acceptorId = f_))
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
    def voteRound: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.voteRound)((c_, f_) => c_.copy(voteRound = f_))
    def voteValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getVoteValue)((c_, f_) => c_.copy(voteValue = Option(f_)))
    def optionalVoteValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.voteValue)((c_, f_) => c_.copy(voteValue = f_))
  }
  final val ACCEPTOR_ID_FIELD_NUMBER = 1
  final val ROUND_FIELD_NUMBER = 2
  final val VOTE_ROUND_FIELD_NUMBER = 3
  final val VOTE_VALUE_FIELD_NUMBER = 4
}
