syntax = "proto2";

package frankenpaxos.raft;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.raft"
  flat_package: true
};

// Participant Requests

message VoteRequest {
  required int32 term = 1;
  required int32 last_log_index = 2;
  required int32 last_log_term = 3;
}

message VoteResponse {
  required int32 term = 1;
  required bool vote_granted = 2;
}

message LogEntry {
  required int32 term = 1;
  required CommandOrNoop command = 2;
}

message AppendEntriesRequest {
  required int32 term = 1;
  required int32 prev_log_index = 2;
  required int32 prev_log_term = 3;
  repeated LogEntry entries = 4;
  required int32 leader_commit = 5;
}

message AppendEntriesResponse {
  required int32 term = 1;
  required bool success = 2;
  required int32 last_log_index = 3;
}

// Client Requests

message ClientRequest {
  // required int32 client_id = 1;
  // required int32 sequence_num = 1; for eliminating duplicates
  required CommandOrNoop cmd = 1;
}

message ClientRequestResponse {
  required bool success = 1;
  required bytes response = 2;
  required int32 leader_hint = 3;
}

message ClientQuery {
  required ReadCommand query = 1;
}

message ClientQueryResponse {
  required bool success = 1;
  required bytes response = 2;
  required int32 leader_hint = 3;
}

// Expected messages to recieve

message ParticipantInbound {
  oneof request {
    VoteRequest vote_request = 1;
    VoteResponse vote_response = 2;
    AppendEntriesRequest append_entries_request = 3;
    AppendEntriesResponse append_entries_response = 4;
    ClientRequest client_request = 5;
    ClientQuery client_query = 6;
  }
}

message ClientInbound {
  oneof request {
    ClientRequestResponse client_request_response = 1;
    ClientQueryResponse client_query_response = 2;
  }
}

// State Machine stuff

// A special noop command that does not affect the state machine.
message Noop {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";
}

// State machine request, may modify state
message Command {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required bytes cmd = 1;
}

// Read-only request for the state machine
message ReadCommand {
  option (scalapb.message).annotations =
  "@scala.scalajs.js.annotation.JSExportAll";

  required bytes query = 1;
}

message CommandOrNoop {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof value {
    Command command = 1;
    Noop noop = 2;
  }
}

